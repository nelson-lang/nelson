%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = eye(2);
[V, D] = eig(A, A);
V_REF = eye(2);
D_REF = eye(2);
assert_isequal(V, V_REF);
assert_isequal(D, D_REF);
%=============================================================================
A = eye(2) + i;
[V, D] = eig(A, A);
D_REF = eye(2);
assert_isapprox(real(D), real(D_REF), 1e-4);
%=============================================================================
A = diag([10^-16, 10^-15]);
[V, D] = eig(A, A);
V_REF = [100000000.0000, 0.0000; 0.0000  31622776.6017];
assert_isapprox(V, V_REF, 1e-4);
D_REF = eye(2);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = eye(2);
B = [3 6; 4 8];
[V, D] = eig(A, B);
V_REF = [-0.7500     -1.0000;
     -1.0000      0.5000];
D_REF = [0.0909      0.0000;
      0.0000         Inf];
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-3);
%=============================================================================
[V, D] = eig(6, 2);
V_REF = 0.7071;
D_REF = 3.;
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [1, 4, 2; 3, 1, 2;-1, 0, -2.1];
B = [2, 1, 8.1; 1.1, 2, 7.7; -4, 0, 0];
[V, D] = eig(A, B);
V_REF = [0.0523     -1.0000      0.9657;
      1.0000     -0.7583      0.6628;
     -0.2945     -0.7303     -1.0000];
D_REF = [-2.7042      0.0000      0.0000;
      0.0000      0.6334      0.0000;
      0.0000      0.0000     -0.2936];
assert_isapprox(A*V, B*V*D, 1e-4);
if ispc()
  assert_isapprox(V, V_REF, 1e-4);
  assert_isapprox(D, D_REF, 1e-4);
end
%=============================================================================
A = [1, 4, 2; 3, 1, 2;-1, 0, -2.1];
B = [2, 1, 8.1; 1.1, 2, 7.7; -4, 0, 0];
[V, D] = eig(B, A);
V_REF = [0.9657      1.0000      0.0523;
      0.6628      0.7583      1.0000;
     -1.0000      0.7303     -0.2945];
D_REF = [-3.4055      0.0000      0.0000;
      0.0000      1.5788      0.0000;
      0.0000      0.0000     -0.3698];
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1, 8+i; 1, 2-i];
B = [2i, 8.1i+8; 1.1, 2i-1];
[V, D] = eig(A, B);
V_REF = [-0.6355 + 0.3645i  -0.0389 + 0.9611i;
   0.0366 - 0.0923i   0.4278 + 0.1844i];
D_REF = [0.7075 + 0.4673i   0.0000 + 0.0000i;
   0.0000 + 0.0000i   0.1947 - 0.6737i];
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1, 8+i; 1, 2-i];
B = [2i, 8.1i+8; 1.1, 2i-1];
[V, D] = eig(B, A);
V_REF = [0.9050 + 0.0950i  -0.3984 - 0.6016i;
  -0.1040 + 0.0663i  -0.3412 + 0.0757i];
D_REF = [0.9842 - 0.6500i   0.0000 + 0.0000i;
   0.0000 + 0.0000i   0.3958 + 1.3700i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1,8+i;1,2-i];
B = [2i,8.1i+8;1.1,2i-1];
[V, D] = eig(A, B);
V_REF = [-0.6355 + 0.3645i  -0.0389 + 0.9611i;
   0.0366 - 0.0923i   0.4278 + 0.1844i];
D_REF = [0.7075 + 0.4673i   0.0000 + 0.0000i;
   0.0000 + 0.0000i   0.1947 - 0.6737i];
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1,8+i;1,2-i];
B = [2i,8.1i+8;1.1,2i-1];
[V, D] = eig(B, A);
D_REF = [0.9842 - 0.6500i   0.0000 + 0.0000i;
   0.0000 + 0.0000i   0.3958 + 1.3700i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [1,4,2;3,1,2;-1,0,-2.1];
B = [2,1,8.1;1.1,2,7.7;-4,0,0];
[V, D] = eig(A, B);
V_REF = [0.0523   -1.0000    0.9657;
    1.0000   -0.7583    0.6628;
   -0.2945   -0.7303   -1.0000];
D_REF = [-2.7042         0         0;
         0    0.6334         0;
         0         0   -0.2936];
assert_isapprox(A*V, B*V*D, 1e-4);
if ispc()
  assert_isapprox(V, V_REF, 1e-4);
  assert_isapprox(D, D_REF, 1e-4);
end
%=============================================================================
A = [1/sqrt(2) 0; 0 1];
B = [0 1; -1/sqrt(2) 0];
[V, D] = eig(A, B);
V_REF = [1.0000 + 0.0000i   1.0000 + 0.0000i;
   0.0000 - 0.7071i   0.0000 + 0.7071i];
D_REF = [0.0000 + 1.0000i   0.0000 + 0.0000i;
   0.0000 + 0.0000i   0.0000 - 1.0000i];
if ispc()
   assert_isapprox(V, V_REF, 1e-4);
   assert_isapprox(D, D_REF, 1e-4);
end
%=============================================================================
A = diag([10^-16, 10^-15]);
[V, D] = eig(A, A);
V_REF = [100000000.0000      0.0000;
    0.0000  31622776.6017];
D_REF = [1.0000      0.0000;
    0.0000      1.0000];
assert_isapprox(V, V_REF, 1e-4);
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = single(eye(2));
B = [3 6; 4 8];
[V, D] = eig(A, B);
V_REF = [-0.7500     -1.0000;
     -1.0000      0.5000];
D_REF = [0.0909      0.0000;
      0.0000         Inf];
assert_isapprox(V, single(V_REF), 1e-4);
assert_isapprox(D, single(D_REF), 1e-3);
%=============================================================================
% compact format
%=============================================================================
A = eye(2);
D = eig(A, A);
D_REF = [1; 1];
assert_isequal(D, D_REF);
%=============================================================================
A = eye(2) + i;
D = eig(A, A);
D_REF = [1.0000 - 0.0000i; 1.0000 + 0.0000i];
assert_isapprox(real(D), real(D_REF), 1e-3);
%=============================================================================
A = diag([10^-16, 10^-15]);
D = eig(A, A);
D_REF = [1; 1];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = eye(2);
B = [3 6; 4 8];
D = eig(A, B);
D_REF = [0.0909 ; Inf];
assert_isapprox(D, D_REF, 1e-3);
%=============================================================================
D = eig(6, 2);
D_REF = 3.;
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [1, 4, 2; 3, 1, 2;-1, 0, -2.1];
B = [2, 1, 8.1; 1.1, 2, 7.7; -4, 0, 0];
D = eig(A, B);
D_REF = [-2.7042;
0.6334;
-0.2936];
assert_isapprox(sort(D), sort(D_REF), 1e-4);
%=============================================================================
A = [1, 4, 2; 3, 1, 2;-1, 0, -2.1];
B = [2, 1, 8.1; 1.1, 2, 7.7; -4, 0, 0];
D = eig(B, A);
D_REF = [ -3.4055
1.5788
-0.3698];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1, 8+i; 1, 2-i];
B = [2i, 8.1i+8; 1.1, 2i-1];
D = eig(A, B);
D_REF = [0.7075 + 0.4673i
0.1947 - 0.6737i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1, 8+i; 1, 2-i];
B = [2i, 8.1i+8; 1.1, 2i-1];
D = eig(B, A);
D_REF = [ 0.9842 - 0.6500i;
0.3958 + 1.3700i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1,8+i;1,2-i];
B = [2i,8.1i+8;1.1,2i-1];
D = eig(A, B);
D_REF = [0.7075 + 0.4673i; 0.1947 - 0.6737i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [-1,8+i;1,2-i];
B = [2i,8.1i+8;1.1,2i-1];
D = eig(B, A);
D_REF = [0.9842 - 0.6500i; 0.3958 + 1.3700i];
assert_isapprox(D, D_REF, 1e-4);
%=============================================================================
A = [1,4,2;3,1,2;-1,0,-2.1];
B = [2,1,8.1;1.1,2,7.7;-4,0,0];
D = eig(A, B);
D_REF = [-2.7042;0.6334; -0.2936];
assert_isapprox(sort(D), sort(D_REF), 1e-4);
%=============================================================================
A = [1/sqrt(2) 0; 0 1];
B = [0 1; -1/sqrt(2) 0];
D = eig(A, B);
D_REF = [0.0000 + 1.0000i;0.0000 - 1.0000i];
if ~ismac()
  assert_isapprox(D, D_REF, 1e-4);
end
%=============================================================================
A = diag([10^-16, 10^-15]);
D = eig(A, A);
D_REF = [1.0000; 1.0000];
assert_isapprox(D, D_REF, 1e-4);
%============================================================================
A = single(eye(2));
B = [3 6; 4 8];
D = eig(A, B);
D_REF = [0.0909; Inf];
assert_isapprox(D, single(D_REF), 1e-3);
%=============================================================================
assert_checkerror('eig([1,2;1.1,-2], 7)', _('input matrices must be the same size.'));
%=============================================================================
