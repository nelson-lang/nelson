%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('rref'), -1);
assert_isequal(nargout('rref'), -1);
%=============================================================================
A = [1  1  5;2  1  8;1  2  7;-1  1 -1];
b = [6 8 10 2]';
M = [A, b];
[R, k] = rref(M);
k_REF = [1 2];
R_REF = [1 0 3 2;0 1 2 4; 0 0 0 0; 0 0 0 0];
assert_isequal(R, R_REF);
assert_isequal(k, k_REF);
%=============================================================================
M = [magic(3), eye(3)];
[R, k] = rref(M);
R_REF = [1.0000         0         0    0.1472   -0.1444    0.0639;
0    1.0000         0   -0.0611    0.0222    0.1056;
0         0    1.0000   -0.0194    0.1889   -0.1028];
k_REF = [1     2     3];
assert_isapprox(R, R_REF, 1e-4);
assert_isequal(k, k_REF);
%=============================================================================
M = single([magic(3), eye(3)]);
[R, k] = rref(M);
R_REF = [1.0000         0         0    0.1472   -0.1444    0.0639;
0    1.0000         0   -0.0611    0.0222    0.1056;
0         0    1.0000   -0.0194    0.1889   -0.1028];
R_REF = single(R_REF);
k_REF = [1     2     3];
assert_isapprox(R, R_REF, 1e-4);
assert_isequal(k, k_REF);
%=============================================================================
[R, k] = rref(ones(0, 1));
R_REF = ones(0, 1);
k_REF = ones(1, 0);
assert_isequal(R, R_REF);
assert_isequal(k, k_REF);
%=============================================================================
[R, k] = rref(Inf);
R_REF = 0;
k_REF = ones(1, 0);
assert_isequal(R, R_REF);
assert_isequal(k, k_REF);
%=============================================================================
M = [1 2 1; 2 4 2.01; 2 4 2.1];
tol = 0.02;
[R, k] = rref(M, tol);
R_REF = [1, 2, 0;0, 0, 1;0, 0, 0];
k_REF = [1 3];
assert_isequal(R, R_REF);
assert_isequal(k, k_REF);
%=============================================================================
