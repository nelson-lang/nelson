%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
% version 2.1 of the License, or (at your option) any later version.
%
% Alternatively, you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public
% License along with this program. If not, see <http://www.gnu.org/licenses/>.
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('svd'), 2);
assert_isequal(nargout('svd'), 3);
%=============================================================================
assert_checkerror('[U, S, V] = svd(Inf);', _('svd: cannot take svd of matrix containing Inf or NaN values.'));
assert_checkerror('[U, S, V] = svd(NaN);', _('svd: cannot take svd of matrix containing Inf or NaN values.'));
%=============================================================================
[U, S, V] = svd([0 0;i() 3]);
U_REF = [0.0000 + 0.0000i   0.0000 + 1.0000i;
0.0000 - 1.0000i   0.0000 + 0.0000i];
S_REF = [3.1623         0;
0         0];
V_REF = [-0.3162 + 0.0000i  -0.9487 + 0.0000i;
0.0000 - 0.9487i   0.0000 + 0.3162i];
assert_isapprox(abs(U), abs(U_REF), 1e-4);
assert_isapprox(S, S_REF, 1e-4);
%=============================================================================
A = zeros(0, 5);
s = svd(A);
REF = zeros(0, 1);
assert_isequal(s, REF);
assert_isequal(A, zeros(0, 5));
%=============================================================================
A = zeros(3, 5);
s = svd(A);
REF = zeros(3, 1);
assert_isequal(s, REF);
assert_isequal(A, zeros(3, 5));
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
A_REF = A;
s = svd(A);
REF = [27.4687;
22.6432;
8.5584;
5.9857;
2.0149];
assert_isapprox(s, REF, 1e-4);
assert_isequal(A, A_REF);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
A = single(A);
A_REF = A;
s = svd(A);
REF = [27.4687;
22.6432;
8.5584;
5.9857;
2.0149];
REF = single(REF);
assert_isapprox(s, REF, 1e-4);
assert_isequal(A, A_REF);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
B = complex(A, A);
B_REF = B;
s = svd(B);
REF = [38.8467;
32.0223;
12.1034;
8.4651;
2.8495];
assert_isapprox(s, REF, 1e-4);
assert_isequal(B, B_REF);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
B = single(complex(A, A));
B_REF = single(B);
s = svd(B);
REF = [38.8467;
32.0223;
12.1034;
8.4651;
2.8495];
REF = single(REF);
assert_isapprox(s, REF, 1e-4);
assert_isequal(B, B_REF);
%=============================================================================
[U, S, V] = svd([]);
assert_isequal(U, []);
assert_isequal(S, []);
assert_isequal(V, []);
%=============================================================================
[U, S, V] = svd(single([]));
assert_isequal(U, single([]));
assert_isequal(S, single([]));
assert_isequal(V, single([]));
%=============================================================================
[U, S, V] = svd(zeros(3, 0));
assert_isequal(U, eye(3, 3));
assert_isequal(S, zeros(3, 0));
assert_isequal(V, zeros(0, 0));
%=============================================================================
[U, S, V] = svd(zeros(0, 3));
assert_isequal(U, zeros(0, 0));
assert_isequal(S, zeros(0, 3));
assert_isequal(V, eye(3, 3));
%=============================================================================
A = [1 2; 3 4; 5 6; 7 8];
[U, S, V] = svd(A);
U_REF = [-0.1525   -0.8226   -0.3945   -0.3800;
-0.3499   -0.4214    0.2428    0.8007;
-0.5474   -0.0201    0.6979   -0.4614;
-0.7448    0.3812   -0.5462    0.0407];
S_REF = [14.2691         0;
0    0.6268;
0         0;
0         0];
V_REF = [-0.6414    0.7672;
-0.7672   -0.6414];
assert_isapprox(abs(U), abs(U_REF), 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(abs(V), abs(V_REF), 1e-4);
%=============================================================================
A = [1 2; 3 4; 5 6; 7 8];
[U, S, V] = svd(A, 'econ');
U_REF = [-0.1525   -0.8226
-0.3499   -0.4214
-0.5474   -0.0201
-0.7448    0.3812];
S_REF = [14.2691         0;
0    0.6268];
V_REF = [-0.6414    0.7672;
-0.7672   -0.6414];
assert_isapprox(abs(U), abs(U_REF), 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(abs(V), abs(V_REF), 1e-4);
%=============================================================================
A = [1 2; 3 4; 5 6; 7 8];
[U, S, V] = svd(A, 0);
U_REF = [-0.1525   -0.8226
-0.3499   -0.4214
-0.5474   -0.0201
-0.7448    0.3812];
S_REF = [14.2691         0;
0    0.6268];
V_REF = [-0.6414    0.7672;
-0.7672   -0.6414];
assert_isapprox(abs(U), abs(U_REF), 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(abs(V), abs(V_REF), 1e-4);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
A_REF = A;
[U, S, V] = svd(A);
U_REF = [   -0.5911    0.2632    0.3554    0.3143    0.2299    0.5508;
-0.3976    0.2438   -0.2224   -0.7535   -0.3636    0.1820;
-0.0335   -0.6003   -0.4508    0.2334   -0.3055    0.5362;
-0.4297    0.2362   -0.6859    0.3319    0.1649   -0.3897;
-0.4697   -0.3509    0.3874    0.1587   -0.5183   -0.4608;
0.2934    0.5763   -0.0209    0.3791   -0.6526    0.1091];
S_REF = [27.4687         0         0         0         0;
0   22.6432         0         0         0;
0         0    8.5584         0         0;
0         0         0    5.9857         0;
0         0         0         0    2.0149;
0         0         0         0         0];
V_REF = [-0.2514    0.8148   -0.2606    0.3967   -0.2180;
-0.3968    0.3587    0.7008   -0.4507    0.1402;
-0.6922   -0.2489   -0.2208    0.2513    0.5891;
-0.3662   -0.3686    0.3859    0.4342   -0.6265;
-0.4076   -0.0980   -0.4933   -0.6227   -0.4396];
assert_isapprox(U, U_REF, 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(V, V_REF, 1e-4);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
[U, S, V] = svd(A, 0);
U_REF = [-0.5911    0.2632    0.3554    0.3143    0.2299;
-0.3976    0.2438   -0.2224   -0.7535   -0.3636;
-0.0335   -0.6003   -0.4508    0.2334   -0.3055;
-0.4297    0.2362   -0.6859    0.3319    0.1649;
-0.4697   -0.3509    0.3874    0.1587   -0.5183;
0.2934    0.5763   -0.0209    0.3791   -0.6526];
S_REF = [27.4687         0         0         0         0;
0   22.6432         0         0         0;
0         0    8.5584         0         0;
0         0         0    5.9857         0;
0         0         0         0    2.0149];
V_REF = [-0.2514    0.8148   -0.2606    0.3967   -0.2180;
-0.3968    0.3587    0.7008   -0.4507    0.1402;
-0.6922   -0.2489   -0.2208    0.2513    0.5891;
-0.3662   -0.3686    0.3859    0.4342   -0.6265;
-0.4076   -0.0980   -0.4933   -0.6227   -0.4396];
assert_isapprox(U, U_REF, 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(V, V_REF, 1e-4);
%=============================================================================
A = [     8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
[U, S, V] = svd(A, 'econ');
U_REF = [-0.5911    0.2632    0.3554    0.3143    0.2299;
-0.3976    0.2438   -0.2224   -0.7535   -0.3636;
-0.0335   -0.6003   -0.4508    0.2334   -0.3055;
-0.4297    0.2362   -0.6859    0.3319    0.1649;
-0.4697   -0.3509    0.3874    0.1587   -0.5183;
0.2934    0.5763   -0.0209    0.3791   -0.6526];
S_REF = [27.4687         0         0         0         0;
0   22.6432         0         0         0;
0         0    8.5584         0         0;
0         0         0    5.9857         0;
0         0         0         0    2.0149];
V_REF = [-0.2514    0.8148   -0.2606    0.3967   -0.2180;
-0.3968    0.3587    0.7008   -0.4507    0.1402;
-0.6922   -0.2489   -0.2208    0.2513    0.5891;
-0.3662   -0.3686    0.3859    0.4342   -0.6265;
-0.4076   -0.0980   -0.4933   -0.6227   -0.4396];
assert_isapprox(U, U_REF, 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_isapprox(V, V_REF, 1e-4);
%=============================================================================
A = ones(2, 3);
[U, S, V] = svd(A, 'econ');
U_REF = [-0.7071   -0.7071;
-0.7071    0.7071];
S_REF = [2.4495         0;
0    0.0000];
V_REF = [-0.5774   -0.8165;
-0.5774    0.4082;
-0.5774    0.4082];
V_REF_MKL = [-0.5774, -0.5774;
-0.5774, 0.7887;
-0.5774, -0.2113];
assert_isapprox(abs(U), abs(U_REF), 1e-4);
assert_isapprox(S, S_REF, 1e-4);
assert_istrue(isapprox(abs(V), abs(V_REF), 1e-4) || isapprox(V, V_REF_MKL, 1e-4));
%=============================================================================
A = ones(3, 3);
[U1, S1, V1] = svd(A, 'econ');
[U2, S2, V2] = svd(A);
assert_isapprox(U1, U2, 1e-4);
assert_isapprox(S1, S2, 1e-4);
assert_isapprox(V1, V1, 1e-4);
%=============================================================================
A = ones(3, 2);
[U, S, V] = svd(A, 'econ');
U1_REF = [-0.5774   -0.5774;
-0.5774    0.7887;
-0.5774   -0.2113];
S1_REF = [2.4495         0;
0         0];
V1_REF = [-0.7071   -0.7071;
-0.7071    0.7071];

% MKL does not return same result on some CORE I7
U2_REF = [-0.5774      0.8165;
-0.5774     -0.4082;
-0.5774     -0.4082];
S2_REF = [2.4495      0.0000;
0.0000      0.0000];
V2_REF = [-0.7071      0.7071;
-0.7071     -0.7071];
if isapprox(abs(U), abs(U2_REF), 1e-4)
  assert_isapprox(abs(U), abs(U2_REF), 1e-4);
  assert_isapprox(S, S2_REF, 1e-4);
  assert_isapprox(abs(V), abs(V2_REF), 1e-4);
else
  assert_isapprox(abs(U), abs(U1_REF), 1e-4);
  assert_isapprox(S, S1_REF, 1e-4);
  assert_isapprox(abs(V), abs(V1_REF), 1e-4);
end
%=============================================================================
A = ones(3, 2);
[U, S, V] = svd(A);
U1_REF = [-0.5774   -0.5774   -0.5774;
-0.5774    0.7887   -0.2113;
-0.5774   -0.2113    0.7887];
S1_REF = [2.4495         0;
0         0;
0         0];
V1_REF = [-0.7071   -0.7071;
-0.7071    0.7071];

% standard blas macos
U3_REF = [-0.5774     -0.5774      0.0000;
-0.5774      0.7887     -0.2113;
-0.5774     -0.2113      0.7887];

% MKL on some CORE I7
U2_REF = [ -0.5774      0.8165     -0.0000;
-0.5774     -0.4082     -0.7071;
-0.5774     -0.4082      0.7071];

U3_REF = [0.5774      0.8165      0.0000;
      0.5774     -0.4082     -0.7071;
      0.5774     -0.4082      0.7071];
U4_REF = [  0.5774      0.5774      0.0000;
      0.5774     -0.7887     -0.2113;
      0.5774      0.2113      0.7887];
S2_REF = [2.4495      0.0000;
0.0000      0.0000;
0.0000      0.0000];
V2_REF = [-0.7071      0.7071;
-0.7071     -0.7071];
if U(1,3) < eps
  U(1,3) = 0;
end
if isapprox(U, U1_REF, 1e-4)
  assert_isapprox(U, U1_REF, 1e-4);
  assert_isapprox(S, S1_REF, 1e-4);
  assert_isapprox(V, V1_REF, 1e-4);
end
if isapprox(U, U2_REF, 1e-4)
  assert_isapprox(U, U2_REF, 1e-4);
end
if isapprox(U, U3_REF, 1e-4)
  assert_isapprox(U, U3_REF, 1e-4);
end
if isapprox(U, U4_REF, 1e-4)
  assert_isapprox(U, U4_REF, 1e-4);
end
assert_isapprox(S, S1_REF, 1e-4);
assert_isapprox(abs(V), abs(V1_REF), 1e-4);
%=============================================================================
A = ones(3, 2);
[U, S, V] = svd(A, 0);
U1_REF = [-0.5774   -0.5774;
-0.5774    0.7887;
-0.5774   -0.2113];
S1_REF = [2.4495         0;
0         0];
V1_REF = [-0.7071   -0.7071;
-0.7071    0.7071];
% MKL on some CORE I7
U2_REF = [-0.5774      0.8165;
-0.5774     -0.4082;
-0.5774     -0.4082];
S2_REF = [2.4495      0.0000;
0.0000      0.0000];
V2_REF = [-0.7071      0.7071;
-0.7071     -0.7071];
if isapprox(U, U2_REF, 1e-4)
  assert_isapprox(U, U2_REF, 1e-4);
  assert_isapprox(S, S2_REF, 1e-4);
  assert_isapprox(V, V2_REF, 1e-4);
else
  assert_isapprox(abs(U(:, 1)), abs(U1_REF(:, 1)), 1e-4);
  assert_isapprox(S, S1_REF, 1e-4);
  assert_isapprox(abs(V), abs(V1_REF), 1e-4);
end
%=============================================================================
A = ones(3, 3);
[U, S, V] = svd(A);
U_REF = [-0.5774   -0.5774   -0.5774;
-0.5774   -0.2113    0.7887;
-0.5774    0.7887   -0.2113];
S_REF = [3.0000         0         0;
0         0         0;
0         0         0];
V_REF = [-0.5774         0    0.8165;
-0.5774   -0.7071   -0.4082;
-0.5774    0.7071   -0.4082];
assert_isapprox(S, S_REF, 1e-4);
%=============================================================================
A = ones(3, 2);
[U, S] = svd(A, 0);
U1_REF = [-0.5774   -0.5774;
-0.5774    0.7887;
-0.5774   -0.2113];
S1_REF = [2.4495         0;
0         0];
% MKL on some CORE I7
U2_REF = [-0.5774      0.8165;
-0.5774     -0.4082;
-0.5774     -0.4082];
S2_REF = [ 2.4495      0.0000;
0.0000      0.0000];
if isapprox(U, U2_REF, 1e-4)
  assert_isapprox(U, U2_REF, 1e-4);
  assert_isapprox(S, S2_REF, 1e-4);
else
  assert_isapprox(abs(U(:,1)), abs(U1_REF(:,1)), 1e-4);
  assert_isapprox(S, S1_REF, 1e-4);
end
%=============================================================================
A = [8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
A = A * i;
A_REF = A;
[U, S, V] = svd(A);
U_REF = [-0.0000 - 0.5911i   0.0000 + 0.2632i  -0.0000 - 0.3554i  -0.0000 - 0.3143i  -0.0000 + 0.2299i   0.3320 - 0.4394i;
0.0000 - 0.3976i   0.0000 + 0.2438i   0.0000 + 0.2224i   0.0000 + 0.7535i  -0.0000 - 0.3636i   0.1097 - 0.1452i;
0.0000 - 0.0335i  -0.0000 - 0.6003i   0.0000 + 0.4508i  -0.0000 - 0.2334i  -0.0000 - 0.3055i   0.3232 - 0.4278i;
-0.0000 - 0.4297i  -0.0000 + 0.2362i  -0.0000 + 0.6859i  -0.0000 - 0.3319i   0.0000 + 0.1649i  -0.2349 + 0.3109i;
0.0000 - 0.4697i   0.0000 - 0.3509i   0.0000 - 0.3874i   0.0000 - 0.1587i   0.0000 - 0.5183i  -0.2778 + 0.3676i;
-0.0000 + 0.2934i  -0.0000 + 0.5763i  -0.0000 + 0.0209i   0.0000 - 0.3791i   0.0000 - 0.6526i   0.0658 - 0.0871i];
S_REF = [27.4687         0         0         0         0;
0   22.6432         0         0         0;
0         0    8.5584         0         0;
0         0         0    5.9857         0;
0         0         0         0    2.0149;
0         0         0         0         0];
V_REF = [-0.2514 + 0.0000i   0.8148 + 0.0000i   0.2606 + 0.0000i  -0.3967 + 0.0000i  -0.2180 + 0.0000i;
-0.3968 + 0.0000i   0.3587 - 0.0000i  -0.7008 + 0.0000i   0.4507 - 0.0000i   0.1402 - 0.0000i;
-0.6922 - 0.0000i  -0.2489 - 0.0000i   0.2208 + 0.0000i  -0.2513 + 0.0000i   0.5891 - 0.0000i;
-0.3662 - 0.0000i  -0.3686 + 0.0000i  -0.3859 - 0.0000i  -0.4342 - 0.0000i  -0.6265 + 0.0000i;
-0.4076 - 0.0000i  -0.0980 - 0.0000i   0.4933 + 0.0000i   0.6227 - 0.0000i  -0.4396 + 0.0000i];
assert_isapprox(imag(U), imag(U_REF), 1e-4);
assert_isapprox(imag(S), imag(S_REF), 1e-4);
%=============================================================================
A = [8.79   9.93   9.83   5.45   3.16;
6.11   6.91   5.04  -0.27   7.98;
-9.15  -7.93   4.86   4.85   3.01;
9.57   1.64   8.83   0.74   5.80;
-3.49   4.02   9.80  10.00   4.27;
9.84   0.15  -8.99  -6.02  -5.31];
A = single(A * i);
A_REF = A;
[U, S, V] = svd(A);
U_REF = [-0.0000 - 0.5911i   0.0000 + 0.2632i  -0.0000 - 0.3554i  -0.0000 - 0.3143i  -0.0000 + 0.2299i   0.3320 - 0.4394i;
0.0000 - 0.3976i   0.0000 + 0.2438i   0.0000 + 0.2224i   0.0000 + 0.7535i  -0.0000 - 0.3636i   0.1097 - 0.1452i;
0.0000 - 0.0335i  -0.0000 - 0.6003i   0.0000 + 0.4508i  -0.0000 - 0.2334i  -0.0000 - 0.3055i   0.3232 - 0.4278i;
-0.0000 - 0.4297i  -0.0000 + 0.2362i  -0.0000 + 0.6859i  -0.0000 - 0.3319i   0.0000 + 0.1649i  -0.2349 + 0.3109i;
0.0000 - 0.4697i   0.0000 - 0.3509i   0.0000 - 0.3874i   0.0000 - 0.1587i   0.0000 - 0.5183i  -0.2778 + 0.3676i;
-0.0000 + 0.2934i  -0.0000 + 0.5763i  -0.0000 + 0.0209i   0.0000 - 0.3791i   0.0000 - 0.6526i   0.0658 - 0.0871i];
U_REF = single(U_REF);
S_REF = [27.4687         0         0         0         0;
0   22.6432         0         0         0;
0         0    8.5584         0         0;
0         0         0    5.9857         0;
0         0         0         0    2.0149;
0         0         0         0         0];
S_REF = single(S_REF);
V_REF = [-0.2514 + 0.0000i   0.8148 + 0.0000i   0.2606 + 0.0000i  -0.3967 + 0.0000i  -0.2180 + 0.0000i;
-0.3968 + 0.0000i   0.3587 - 0.0000i  -0.7008 + 0.0000i   0.4507 - 0.0000i   0.1402 - 0.0000i;
-0.6922 - 0.0000i  -0.2489 - 0.0000i   0.2208 + 0.0000i  -0.2513 + 0.0000i   0.5891 - 0.0000i;
-0.3662 - 0.0000i  -0.3686 + 0.0000i  -0.3859 - 0.0000i  -0.4342 - 0.0000i  -0.6265 + 0.0000i;
-0.4076 - 0.0000i  -0.0980 - 0.0000i   0.4933 + 0.0000i   0.6227 - 0.0000i  -0.4396 + 0.0000i];
V_REF = single(V_REF);
assert_isapprox(imag(U), imag(U_REF), 1e-4);
assert_isapprox(imag(S), imag(S_REF), 1e-4);
%=============================================================================
