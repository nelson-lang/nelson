%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('balance'), 2);
assert_isequal(nargout('balance'), 3);
%=============================================================================
A = [1  100  10000; .01  1  100; .0001  .01  1];
%=============================================================================
[T, B] = balance(A);
T_REF = [512.0000         0         0;
0    8.0000         0;
0         0    0.0625];
assert_isapprox(T, T_REF, 1e-3);
%=============================================================================
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
[S, P, B] = balance(A);
S_REF = [512.0000; 8.0000; 0.0625];
assert_isapprox(S, S_REF, 1e-3);
%=============================================================================
P_REF = [1;  2;  3];
assert_isapprox(P, P_REF, 1e-3);
%=============================================================================
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
B = balance(A);
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
B = balance(A, 'noperm');
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
[T, B] = balance(A, 'noperm');
T_REF = [512.0000         0         0;
0    8.0000         0;
0         0    0.0625];
assert_isapprox(T, T_REF, 1e-3);
%=============================================================================
[S, P, B] = balance(A, 'noperm');
S_REF = [512.0000; 8.0000; 0.0625];
assert_isapprox(S, S_REF, 1e-3);
P_REF = [1;  2;  3];
assert_isapprox(P, P_REF, 1e-3);
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
% single
%=============================================================================
A = single([1  100  10000; .01  1  100; .0001  .01  1]);
%=============================================================================
[T, B] = balance(A);
T_REF = [512.0000         0         0;
0    8.0000         0;
0         0    0.0625];
assert_isapprox(T, single(T_REF), 1e-3);
%=============================================================================
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
[S, P, B] = balance(A);
S_REF = [512.0000; 8.0000; 0.0625];
assert_isapprox(S, single(S_REF), 1e-3);
%=============================================================================
P_REF = [1;  2;  3];
assert_isapprox(P, single(P_REF), 1e-3);
%=============================================================================
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
B = balance(A);
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
B = balance(A, 'noperm');
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
[T, B] = balance(A, 'noperm');
T_REF = [512.0000         0         0;
0    8.0000         0;
0         0    0.0625];
assert_isapprox(T, single(T_REF), 1e-3);
%=============================================================================
[S, P, B] = balance(A, 'noperm');
S_REF = [512.0000; 8.0000; 0.0625];
assert_isapprox(S, single(S_REF), 1e-3);
P_REF = [1;  2;  3];
assert_isapprox(P, single(P_REF), 1e-3);
B_REF = [1.0000    1.5625    1.2207;
0.6400    1.0000    0.7812;
0.8192    1.2800    1.0000];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
% double complex
%=============================================================================
A = [1  100  10000; .01  1  100; .0001  .01  1] + i;
%=============================================================================
[T, B] = balance(A);
T_REF = [64.0000         0         0;
0    8.0000         0;
0         0    0.5000];
assert_isapprox(T, T_REF, 1e-3);
%=============================================================================
B_REF = 1.0e+02 * [0.0100 + 0.0100i   0.1250 + 0.0013i   0.7812 + 0.0001i;
0.0008 + 0.0800i   0.0100 + 0.0100i   0.0625 + 0.0006i;
0.0001 + 1.2800i   0.0016 + 0.1600i   0.0100 + 0.0100i];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
[S, P, B] = balance(A);
S_REF = [6.4000e+01; 8.0000e+00;5.0000e-01];
assert_isapprox(S, S_REF, 1e-3);
%=============================================================================
P_REF = [1; 2; 3];
assert_isapprox(P, P_REF, 1e-3);
%=============================================================================
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
B = balance(A);
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
B = balance(A,'noperm');
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, B_REF, 1e-3);
%=============================================================================
% single complex
%=============================================================================
A = [1  100  10000; .01  1  100; .0001  .01  1] + i;
A = single(A);
%=============================================================================
[T, B] = balance(A);
T_REF = [64.0000         0         0;
0    8.0000         0;
0         0    0.5000];
assert_isapprox(T, single(T_REF), 1e-3);
%=============================================================================
B_REF = 1.0e+02 * [0.0100 + 0.0100i   0.1250 + 0.0013i   0.7812 + 0.0001i;
0.0008 + 0.0800i   0.0100 + 0.0100i   0.0625 + 0.0006i;
0.0001 + 1.2800i   0.0016 + 0.1600i   0.0100 + 0.0100i];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
[S, P, B] = balance(A);
S_REF = [6.4000e+01; 8.0000e+00;5.0000e-01];
assert_isapprox(S, single(S_REF), 1e-3);
%=============================================================================
P_REF = [1; 2; 3];
assert_isapprox(P, P_REF, 1e-3);
%=============================================================================
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
B = balance(A);
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
B = balance(A,'noperm');
B_REF = [1.0000e+00 + 1.0000e+00i   1.2500e+01 + 1.2500e-01i   7.8125e+01 + 7.8125e-03i;
   8.0000e-02 + 8.0000e+00i   1.0000e+00 + 1.0000e+00i   6.2500e+00 + 6.2500e-02i;
   1.2800e-02 + 1.2800e+02i   1.6000e-01 + 1.6000e+01i   1.0000e+00 + 1.0000e+00i];
assert_isapprox(B, single(B_REF), 1e-3);
%=============================================================================
[S, P, B] = balance([]);
assert_isequal(S, []);
assert_isequal(P, []);
assert_isequal(B, []);
%=============================================================================
B = balance([],'noperm');
assert_isequal(B, []);
%=============================================================================