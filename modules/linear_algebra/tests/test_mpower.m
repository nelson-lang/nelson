%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = [0, 0, 2, 3;
    0, 0, 4, 5;
    0, 0, 6, 7;
    0, 0, 8, 9];
R = A^0.37;
REF = [0.0000 + 0.0000i   0.0000 + 0.0000i   0.9630 + 1.2340i   0.0804 - 0.9459i;
0.0000 + 0.0000i   0.0000 + 0.0000i   1.0866 + 0.7468i   0.6237 - 0.5725i;
0.0000 + 0.0000i   0.0000 + 0.0000i   1.2101 + 0.2597i   1.1670 - 0.1991i;
0.0000 + 0.0000i   0.0000 + 0.0000i   1.3337 - 0.2275i   1.7102 + 0.1744i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1 2; 3 4];
R = A^2;
R2 = A*A;
REF = [7 10; 15 22];
assert_isapprox(R, REF, 1e-4);
assert_isapprox(R2, REF, 1e-4);
%=============================================================================
R = 2^6;
REF = 64;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = 0.25^pi;
REF = 0.012840228555487;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^0;
REF = eye(3, 3);
assert_isequal(R, REF);
%=============================================================================
A = [1 2 3; 2 2 3; 3 2 4];
R = A^1;
REF = A;
assert_isequal(R, REF);
%=============================================================================
A = [1 2 3; 2 2 3; 3 2 4];
R = A^-1;
REF = [   -1.0000    1.0000   -0.0000;
-0.5000    2.5000   -1.5000;
 1.0000   -2.0000    1.0000];
 assert_isapprox(R, REF, 1e-4);
 %=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^6;
REF = [44987       41490       71634;
50889       46934       81033;
65368       60288      104089];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^5;
REF = [        5902        5444        9399;
6677        6158       10632;
8577        7910       13657];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^7;
REF = [      342869      316222      545967;
387856      357712      617601;
498211      459490      793324];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^0.7;
REF = [  0.488270676114652 + 0.613917780050852i  1.150608899912486 - 0.282958944220378i  1.620214670550096 - 0.202216266286403i;
1.044910220593855 - 0.060736794176214i  1.274972484708160 + 0.027994007852336i  1.514515991231466 + 0.020005883757761i;
1.690680456762519 - 0.350364366315845i  0.939211541275222 + 0.161485355867949i  2.249416919089593 + 0.115405313705564i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^-3;
REF = [  -2.749999999999860   7.249999999999633  -3.749999999999811;
-7.374999999999380  30.124999999998376 -18.374999999999162;
 5.999999999999553 -21.999999999998828  12.999999999999394];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1 1 1;1 2 3;1 3 6];
R = A^-3;
REF = [145.0000 -207.0000   81.0000;
-207.0000  298.0000 -117.0000;
  81.0000 -117.0000   46.0000];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^pi;
REF =  1.0e+02 * [1.349227001470902 - 0.002593522494235i  1.251931372537563 + 0.001195372427102i  2.158885281826370 + 0.000854271455162i;
1.532919595557591 + 0.000256585241611i  1.413216241699634 - 0.000118261909702i  2.439873504846399 - 0.000084515730329i;
1.971559799813021 + 0.001480129578823i  1.813907818577615 - 0.000682201943880i  3.133461319270574 - 0.000487534791752i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = [1 2 3; 2 2 3; 3 2 4]^1+8i;
REF = [ 1.000000000000000 + 8.000000000000000i  2.000000000000000 + 8.000000000000000i  3.000000000000000 + 8.000000000000000i;
2.000000000000000 + 8.000000000000000i  2.000000000000000 + 8.000000000000000i  3.000000000000000 + 8.000000000000000i;
3.000000000000000 + 8.000000000000000i  2.000000000000000 + 8.000000000000000i  4.000000000000000 + 8.000000000000000i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
assert_checkerror('R = [1 2 3; 2 2 3; 3 2 4]^[ 1; 2; 3; 4];', _('Power (^) operator can only be applied to scalar and square arguments.'));
%=============================================================================
assert_checkerror('R = [1 2 3; 2 2 3; 3 2 4]^[ 1 2 3 4];', _('Power (^) operator can only be applied to scalar and square arguments.'));
%=============================================================================
assert_checkerror('R = [1 2 3; 2 2 3; 3 2 4]^[ 1 4; 2 3; 3 3];', _('Power (^) operator can only be applied to scalar and square arguments.'));
%=============================================================================
assert_checkerror('R = [1 2 3; 2 2 3; 3 2 4]^[ 1 4 2; 2 3 2; 3 2 2];', _('Size mismatch on arguments to power (^) operator.'));
%=============================================================================
assert_checkerror('R = [2, 0.25, -9,eps, 2i, 5+6i]^pi;', _('Power (^) operator can only be applied to scalar and square arguments.'));
%=============================================================================
assert_checkerror('R = pi^[2, 0.25, -9, eps, 2i, 5+6i];', _('Power (^) operator can only be applied to scalar and square arguments.'));
%=============================================================================
