%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = ones(1, 0);
R = A(:);
REF = zeros(0, 1);
assert_isequal(R, REF);
%=============================================================================
A = ones(1, 0);
R = A(:,:);
REF = zeros(1, 0);
assert_isequal(R, REF);
%=============================================================================
A = ones(1, 0);
assert_checkerror('R = A(2,:);', _('Index exceeds dimensions.'));
%=============================================================================
A = ones(3, 0);
R = A(1,:);
REF = zeros(1, 0);
assert_isequal(R, REF);
%=============================================================================
A = ones(3, 0);
R = A(2,:);
REF = zeros(1, 0);
assert_isequal(R, REF);
%=============================================================================
A = ones(3, 0);
R = A(3,:);
REF = zeros(1, 0);
assert_isequal(R, REF);
%=============================================================================
A = ones(3, 0);
assert_checkerror('R = A(4,:);', _('Index exceeds dimensions.'));
%=============================================================================
A = ones(3, 0);
assert_checkerror('R = A(:,1);', _('Index exceeds dimensions.'));
%=============================================================================
A = ones(1, 0);
R = A([],:);
REF = []
assert_isequal(R, REF);
%=============================================================================
