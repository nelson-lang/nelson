//=============================================================================
// Copyright (c) 2017 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// <-- Issue URL -->
// https://github.com/Nelson-numerical-software/nelson/issues/152
// <-- Short Description -->
// insertion did not return expected result for empty matrix.
//=============================================================================
A = [];
A(:) = 3;
REF = [];
assert_isequal(A, REF);
//=============================================================================
A = [];
A(':')=3;
REF = [];
assert_isequal(A, REF);
//=============================================================================
A = ones(1, 0);
A(':')=3;
REF = zeros(1, 0);
assert_isequal(A, REF);
//=============================================================================
A = ones(1, 0);
A(':')=3;
REF = zeros(1, 0);
assert_isequal(A, REF);
//=============================================================================
A = 1;
A(:) = 3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = 1;
A(':') = 3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = [];
A(:, 1) = 3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = [];
A(':', 1)=3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = 1;
A(:, 1) = 3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = 1;
A(':', 1) = 3;
REF = 3;
assert_isequal(A, REF);
//=============================================================================
A = [];
A(:, 1)=1:3;
A(:, 1)=1:3;
REF = (1:3)';
assert_isequal(A, REF)
//=============================================================================
A = [];
A(':', 1)=1:3;
REF = (1:3)';
assert_isequal(A, REF)
//=============================================================================
A = [];
A(:, 1)=1:3';
REF = (1:3)';
assert_isequal(A, REF)
//=============================================================================
A = [];
A(1:3,1) = (1:3);
REF = (1:3)';
assert_isequal(A, REF)
//=============================================================================
A = [];
A(1:3,:,1) = (1:3)';
REF = (1:3)';
assert_isequal(A, REF);
//=============================================================================
A = [];
A(1:3,':',1) = (1:3)';
REF = (1:3)';
assert_isequal(A, REF);
//=============================================================================
A = [];
A(1:3,:) = (1:3)';
REF = (1:3)';
assert_isequal(A, REF);
//=============================================================================
A = [];
A(1:3, ':') = (1:3)';
REF = (1:3)';
assert_isequal(A, REF);
//=============================================================================
A = [];
A(1:3,1) = (1:3)';
REF = (1:3)';
assert_isequal(A, REF)
//=============================================================================
A = 1:3;
assert_checkerror('A(1) = ones(1,0);', _('Size mismatch in assignment A(I1,I2,...,In) = B.'));
//=============================================================================
A = [];
assert_checkerror('A(1:3,1:3,1) = (1:3)'';', _('Size mismatch in assignment A(I1,I2,...,In) = B.'));
//=============================================================================
A = [];
assert_checkerror('A(1:3,:,1) = (1:4)'';', _('Size mismatch in assignment A(I1,I2,...,In) = B.'));
//=============================================================================
A = [];
assert_checkerror('A(1:3,'':'',1) = (1:4)'';', _('Size mismatch in assignment A(I1,I2,...,In) = B.'));
//=============================================================================
A = 1:3;
assert_checkerror('A(2) = single([])', _('Empty matrix of type double expected.'));
//=============================================================================
A = 1:3;
assert_checkerror('A(2, 1) = single([])', _('Empty matrix of type double expected.'));
//=============================================================================
