%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--JULIA ENVIRONMENT REQUIRED-->
%=============================================================================
R = jlrun('', 'A', 'A', 1);
assert_isequal(R, 1);
%=============================================================================
R = jlrun('', 'A', 'A', 3.14);
assert_isequal(R, 3.14);
%=============================================================================
R = jlrun('', 'A', 'A', single(3.14));
assert_isequal(R, single(3.14));
%=============================================================================
R = jlrun('', 'A', 'A', int8(42));
assert_isequal(R, int8(42));
%=============================================================================
R = jlrun('', 'A', 'A', int16(42));
assert_isequal(R, int16(42));
%=============================================================================
R = jlrun('', 'A', 'A', int32(42));
assert_isequal(R, int32(42));
%========================================================================
R = jlrun('', 'A', 'A', int64(42));
assert_isequal(R, int64(42));
%=============================================================================
R = jlrun('', 'A', 'A', uint8(42));
assert_isequal(R, uint8(42));
%=============================================================================
R = jlrun('', 'A', 'A', uint16(42));
assert_isequal(R, uint16(42));
%=============================================================================
R = jlrun('', 'A', 'A', uint32(42));
assert_isequal(R, uint32(42));
%=============================================================================
R = jlrun('', 'A', 'A', uint64(42));
assert_isequal(R, uint64(42));
%=============================================================================
R = jlrun('', 'A', 'A', true);
assert_istrue(R);
R = jlrun('', 'A', 'A', false);
assert_isfalse(R);
%=============================================================================
R = jlrun('', 'A', 'A', 'Hello, Julia!');
assert_isequal(R, 'Hello, Julia!');
%=============================================================================
R = jlrun('', 'A', 'A', "Hello, Julia!");
assert_isequal(R, 'Hello, Julia!');
%=============================================================================
R = jlrun('', 'A', 'A', 3 + 2i);
assert_isequal(R, 3+2i);
%=============================================================================
R = jlrun('', 'A', 'A', single(3 + 2i));
assert_isequal(R, single(3+2i));
%=============================================================================
names = ["Unicycle" "Bicycle" "Tricycle"];
wheels = [1 2 3];
d = dictionary(wheels,names);
R = jlrun('', "A", 'A', d);
assert_isequal(R.typeof(), 'Dict{Any, Any}');
%=============================================================================
R = jlrun('', 'A', 'A', magic(4));
assert_isequal(R.numeric(), magic(4));
%=============================================================================
