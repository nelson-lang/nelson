%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--JULIA ENVIRONMENT REQUIRED-->
%=============================================================================
R = jlrun('A = 1', 'A');
assert_isequal(R, int64(1));
%=============================================================================
R = jlrun('A = 3.14', 'A');
assert_isequal(R, 3.14);
%=============================================================================
R = jlrun('A = Float32(3.14)', 'A');
assert_isequal(R, single(3.14));
%=============================================================================
R = jlrun('A = Int8(42)', 'A');
assert_isequal(R, int8(42));
%=============================================================================
R = jlrun('A = Int16(42)', 'A');
assert_isequal(R, int16(42));
%=============================================================================
R = jlrun('A = Int32(42)', 'A');
assert_isequal(R, int32(42));
%=============================================================================
R = jlrun('A = Int64(42)', 'A');
assert_isequal(R, int64(42));
%=============================================================================
R = jlrun('A = UInt8(42)', 'A');
assert_isequal(R, uint8(42));
%=============================================================================
R = jlrun('A = UInt16(42)', 'A');
assert_isequal(R, uint16(42));
%=============================================================================
R = jlrun('A = UInt32(42)', 'A');
assert_isequal(R, uint32(42));
%=============================================================================
R = jlrun('A = UInt64(42)', 'A');
assert_isequal(R, uint64(42));
%=============================================================================
R = jlrun('A = true', 'A');
assert_istrue(R);
R = jlrun('A = false', 'A');
assert_isfalse(R);
%=============================================================================
R = jlrun('A = "Hello, Julia!"', 'A');
assert_isequal(R, 'Hello, Julia!');
%=============================================================================
R = jlrun('A = 3 + 2im', 'A');
assert_isequal(R, 3+2i);
%=============================================================================
R = jlrun('A = 3.0 + 2.0im', 'A');
assert_isequal(R, 3+2i);
%=============================================================================
R = jlrun('A = Float32(3.0) + Float32(2.0)im;', 'A');
assert_isequal(R, single(3+2i));
%=============================================================================
R = jlrun('A = ["Hello, Julia!"]', 'A');
assert_isequal(R.string(), "Hello, Julia!");
%=============================================================================
R = jlrun('A = [1, 2, 3, 4, 5]', 'A');
assert_isequal(R.numeric(), int64([1; 2; 3; 4; 5]));
%=============================================================================
R = jlrun('A = [1 2; 3 4]', 'A');
assert_isequal(R.numeric(), int64([1 2; 3 4]));
%=============================================================================
R = jlrun('A = (1, "hello", 3.14)', 'A');
assert_isequal(R.cell(), {int64(1); 'hello'; 3.14});
%=============================================================================
R = jlrun('A = Dict("key1" => 42, "key2" => "value")', 'A');
assert_isequal(R.typeof(), 'Dict{String, Any}');
%=============================================================================
R = jlrun('mutable struct MyType; x::Int; end; A = MyType(10)', 'A');
assert_isequal(R.typeof(), 'MyType');
%=============================================================================
R = jlrun('A = x -> x^2', 'A');
assert_istrue(startsWith(R.typeof(), 'var"#'));
%=============================================================================
R = jlrun('A = nothing', 'A');
assert_isequal(R.typeof(), 'Nothing');
%=============================================================================
R = jlrun('A = 3 + 4im', 'A');
assert_isequal(R, 3+4i);
%=============================================================================
R = jlrun('A = 3.2 + 4.1im', 'A');
assert_isequal(R, 3.2+4.1i);
%=============================================================================
R = jlrun('A = Complex{Float64}[1+2im  3+4im  5+6im;7+8im  9+10im 11+12im;13+14im 15+16im 17+18im]','A');
REF = [1.0000+2.0000i,3.0000+4.0000i,5.0000+6.0000i;
7.0000+8.0000i,9.0000+10.0000i,11.0000+12.0000i;
13.0000+14.0000i,15.0000+16.0000i,17.0000+18.0000i];
assert_isequal(R.numeric(), REF);
%=============================================================================
R = jlrun('A = [Complex{Real}(1, 2.1) Complex{Real}(1, 2.1);Complex{Real}(1, 2.1) Complex{Real}(1, 2.1)]', 'A');
assert_isequal(R.typeof(), 'Matrix{Complex{Real}}');
R = jlrun('A = ComplexF64.(A)','A');
assert_isequal(R.typeof(), 'Matrix{ComplexF64}');
REF = [1.0000+2.1000i,1.0000+2.1000i; 1.0000 + 2.1000i,1.0000 + 2.1000i];
assert_isequal(R.double(), REF);
%=============================================================================
R = jlrun('A = [Complex{Int64}(1, 2) Complex{Int64}(1, 2);Complex{Int64}(1, 2) Complex{Int64}(1, 2)]', 'A');
assert_isequal(R.typeof(), 'Matrix{Complex{Int64}}');
R = jlrun('A = ComplexF64.(A)','A');
assert_isequal(R.typeof(), 'Matrix{ComplexF64}');
REF = [1.0000+2.000i,1.0000+2.000i; 1.0000 + 2.000i,1.0000 + 2.000i];
assert_isequal(R.double(), REF);
%=============================================================================
R = jlrun('using SparseArrays;n, m = 4, 4 ; I = [1, 2, 3]; J = [1, 3, 4] ;V = [1.0, 2.0, 3.0]; S = sparse(I, J, V, n, m)', 'S');
assert_isequal(R.typeof(), 'SparseMatrixCSC{Float64, Int64}');
I = [1, 2, 3]; J = [1, 3, 4] ;V = [1.0, 2.0, 3.0]; m = 4; n = 4;
REF = sparse(I, J, V, m, n);
VS = R.double();
assert_isequal(size(VS), size(REF));
assert_isequal(VS, REF);
%=============================================================================
R = jlrun('using SparseArrays;n, m = 4, 4;I = [1, 2, 3]; J = [1, 3, 4]; V = [true, true, true];S = sparse(I, J, V, n, m)','S');
I = [1, 2, 3]; J = [1, 3, 4] ;V = [true, true, true]; m = 4; n = 4;
REF = sparse(I, J, V, m, n);
VS = R.numeric();
assert_isequal(size(VS), size(REF));
assert_isequal(VS, REF);
%=============================================================================
R = jlrun('using SparseArrays;n, m = 4, 4;I = [1, 2, 3]; J = [1, 3, 4]; V = [1.0 + 2.0im, 3.0 + 4.0im, 5.0 + 6.0im];S = sparse(I, J, V, n, m)','S');
I = [1, 2, 3]; J = [1, 3, 4] ;V = [1.0+2.0i,3.0+4.0i,5.0+6.0i]; m = 4; n = 4;
REF = sparse(I, J, V, m, n);
VS = R.numeric();
assert_isequal(size(VS), size(REF));
assert_isequal(VS, REF);
%=============================================================================
R = jlrun('A = Set([1, 2, 3, 3])', 'A');
assert_isequal(R.typeof(), 'Set{Int64}');
%=============================================================================
