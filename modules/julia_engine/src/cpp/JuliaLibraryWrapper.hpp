//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
#pragma once
//=============================================================================
#ifdef _MSC_VER
#pragma warning(disable : 4267)
#pragma warning(disable : 4200)
#endif
//=============================================================================
#include <string>
#include <cstdio>
#include <julia.h>
//=============================================================================
bool
isJuliaLibraryLoaded();
//=============================================================================
bool
loadJuliaLibrary(const std::wstring& juliaLibraryPathName);
//=============================================================================
bool
unloadJuliaLibrary();
//=============================================================================
void
NLSjl_init();
//=============================================================================
jl_value_t*
NLSjl_eval_string(const std::string str);
//=============================================================================
jl_value_t*
NLSjl_eval_string(const char* str);
//=============================================================================
jl_value_t*
NLSjl_exception_occurred(void);
//=============================================================================
void
NLSjl_exception_clear(void);
//=============================================================================
const char*
NLSjl_typeof_str(jl_value_t* v);
//=============================================================================
const char*
NLSjl_string_ptr(jl_value_t* s);
//=============================================================================
jl_value_t*
NLSjl_get_global(jl_module_t* m, jl_sym_t* var);
//=============================================================================
void
NLSjl_set_global(jl_module_t* m, jl_sym_t* var, jl_value_t* val);
//=============================================================================
int8_t
NLSjl_unbox_bool(jl_value_t* v);
//=============================================================================
float
NLSjl_unbox_float32(jl_value_t* v);
//=============================================================================
double
NLSjl_unbox_float64(jl_value_t* v);
//=============================================================================
int8_t
NLSjl_unbox_int8(jl_value_t* v);
//=============================================================================
uint8_t
NLSjl_unbox_uint8(jl_value_t* v);
//=============================================================================
int16_t
NLSjl_unbox_int16(jl_value_t* v);
//=============================================================================
uint16_t
NLSjl_unbox_uint16(jl_value_t* v);
//=============================================================================
int32_t
NLSjl_unbox_int32(jl_value_t* v);
//=============================================================================
uint32_t
NLSjl_unbox_uint32(jl_value_t* v);
//=============================================================================
int64_t
NLSjl_unbox_int64(jl_value_t* v);
//=============================================================================
uint64_t
NLSjl_unbox_uint64(jl_value_t* v);
//=============================================================================
jl_sym_t*
NLSjl_symbol(const char* str);
//=============================================================================
const char*
NLSjl_typeof_str(jl_value_t* v);
//=============================================================================
void*
NLSjl_array_eltype(jl_value_t* a);
//=============================================================================
jl_value_t*
NLSjl_box_float64(double x);
//=============================================================================
jl_value_t*
NLSjl_box_int32(int32_t x);
//=============================================================================
jl_value_t*
NLSjl_get_field(jl_value_t* o, const char* fld);
//=============================================================================
int
NLSjl_field_index(jl_datatype_t* t, jl_sym_t* fld, int err);
//=============================================================================
const char*
NLSjl_string_ptr(jl_value_t* s);
//=============================================================================
jl_value_t*
NLSjl_call(jl_function_t* f, jl_value_t** args, uint32_t nargs);
//=============================================================================
jl_value_t*
NLSjl_call0(jl_function_t* f);
//=============================================================================
jl_value_t*
NLSjl_call1(jl_function_t* f, jl_value_t* a);
//=============================================================================
jl_value_t*
NLSjl_call2(jl_function_t* f, jl_value_t* a, jl_value_t* b);
//=============================================================================
jl_value_t*
NLSjl_call3(jl_function_t* f, jl_value_t* a, jl_value_t* b, jl_value_t* c);
//=============================================================================
jl_function_t*
NLSjl_get_function(jl_module_t* m, const char* name);
//=============================================================================
jl_value_t*
NLSjl_box_logical(uint8_t x);
//=============================================================================
jl_value_t*
NLSjl_box_bool(int8_t x);
//=============================================================================
jl_value_t*
NLSjl_box_int8(int8_t x);
//=============================================================================
jl_value_t*
NLSjl_box_uint8(uint8_t x);
//=============================================================================
jl_value_t*
NLSjl_box_int16(int16_t x);
//=============================================================================
jl_value_t*
NLSjl_box_uint16(uint16_t x);
//=============================================================================
jl_value_t*
NLSjl_box_int32(int32_t x);
//=============================================================================
jl_value_t*
NLSjl_box_uint32(uint32_t x);
//=============================================================================
jl_value_t*
NLSjl_box_char(uint32_t x);
//=============================================================================
jl_value_t*
NLSjl_box_int64(int64_t x);
//=============================================================================
jl_value_t*
NLSjl_box_uint64(uint64_t x);
//=============================================================================
jl_value_t*
NLSjl_box_float32(float x);
//=============================================================================
jl_value_t*
NLSjl_box_float64(double x);
//=============================================================================
jl_value_t*
NLSjl_cstr_to_string(const std::string& str);
//=============================================================================
jl_value_t*
NLSjl_cstr_to_string(const char* str);
//=============================================================================
jl_value_t*
NLSjl_apply_array_type(jl_value_t* type, size_t dim);
//=============================================================================
jl_array_t*
NLSjl_alloc_array_1d(jl_value_t* atype, size_t nr);
//=============================================================================
jl_array_t*
NLSjl_alloc_array_2d(jl_value_t* atype, size_t nr, size_t nc);
//=============================================================================
jl_array_t*
NLSjl_alloc_array_3d(jl_value_t* atype, size_t nr, size_t nc, size_t z);
//=============================================================================
jl_array_t*
NLSjl_alloc_array_nd(jl_value_t* atype, size_t* dims, size_t ndims);
//=============================================================================
jl_value_t*
NLSjl_get_nth_field(jl_value_t* v, size_t i);
//=============================================================================
