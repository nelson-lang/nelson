<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
	<copyright>SAME AS NELSON SOFTWARE</copyright>

	<language>en_US</language>
	<keyword>evalin</keyword>
	<short_description
  >Evaluate Nelson code in string in an specified scope.</short_description>

	<syntax>
		<syntax_item>evalin(scope, str)</syntax_item>
		<syntax_item>[r1, ... rn] = evalin(scope, str)</syntax_item>
	</syntax>
	
	<param_input>
		<param_input_item>
			<param_name>scope</param_name>
			<param_description>a string: 'base' or 'caller'.</param_description>
		</param_input_item>

		<param_input_item>
			<param_name>str</param_name>
			<param_description>a string: Nelson instruction to execute</param_description>
		</param_input_item>
	</param_input>

	<param_output>

		<param_output_item>
			<param_name>[r1, ... rn]</param_name>
			<param_description>results: output variables</param_description>
		</param_output_item>
	</param_output>

	<description><p><b
      >eval</b> executes Nelson instructions given in a string in 'base' or 'caller' scope.</p>
</description>


	<used_function />
	<bibliography />

<examples>

	<example_item>
		<example_item_type>nelson</example_item_type>
		<example_item_description />
		<example_item_data><![CDATA[R = evalin('base', 'evalin(''caller'',''pi'')')]]>
		</example_item_data>
	</example_item>

</examples>

	<see_also>
		<see_also_item>
			<link linkend="${core}eval">eval</link>
		</see_also_item>
		<see_also_item>
			<link linkend="${memory_manager}acquirevar">acquirevar</link>
		</see_also_item>
		<see_also_item>
			<link linkend="${core}execstr">execstr</link>
		</see_also_item>
		<see_also_item>
			<link linkend="${core}evalc">evalc</link>
		</see_also_item>
	</see_also>

	<history>
		<history_item>
			<history_version>1.0.0</history_version>
			<history_description>initial version</history_description>
		</history_item>
	</history>

	<authors>
		<author_item>Allan CORNET</author_item>
	</authors>
</xmldoc>
