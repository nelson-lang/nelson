//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('acos'), 1);
assert_isequal(nargout('acos'), 1);
//=============================================================================
assert_isequal(acos(NaN), NaN);
assert_isequal(acos(-NaN), NaN);
assert_isequal(acos(Inf), complex(0, -Inf));
assert_isequal(acos(-Inf), complex(pi, -Inf));
//=============================================================================
n = 100;
A = rand(n,n);
B = acos(-A) - asin(A);
e = pi * 0.5 *ones(n,n);
assert_isapprox(real(B), e, 4 * eps);
//=============================================================================
v = [1.   0.8660254   0.7071068   0.5   0.   0.  -0.5  -0.7071068  -0.8660254  -1];
r = acos(v);
ref = [0.   0.5235988   0.7853981   1.0471976   1.5707963   1.5707963   2.0943951   2.3561945   2.6179939   3.1415927];
assert_isapprox(real(r), ref, 1e-7);
//=============================================================================
x = acos(0i);
ref = 1.5708;
assert_isapprox(x, ref, 1e-4);
//=============================================================================
X = acos(ones(3, 3, 3));
REF = zeros(3, 3, 3);
assert_isequal(X, REF);
//=============================================================================
S = sparse(ones(3, 3));
X = acos(S);
REF = sparse(zeros(3, 3));
assert_isequal(X, REF);
//=============================================================================
assert_isequal(acos([]), []);
//=============================================================================
assert_checkerror('acos(''a'')', [_('Undefined function ''acos'' for input arguments of type '''), class('a'), '''.']);
//=============================================================================
