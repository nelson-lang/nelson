//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('tan'), 1);
assert_isequal(nargout('tan'), 1);
//=============================================================================
assert_isequal(tan(NaN), NaN);
assert_isequal(tan(-NaN), NaN);
assert_isequal(tan(Inf), NaN);
assert_isequal(tan(-Inf), NaN);
//=============================================================================
v = [1.   0.8660254   0.7071068   0.5   0.   0.  -0.5  -0.7071068  -0.8660254  -1];
r = tan(v);
ref = [1.5574     1.1758     0.8545     0.5463     0.0000     0.0000    -0.5463    -0.8545    -1.1758    -1.5574];
assert_isapprox(r, ref, 1e-4);
//=============================================================================
x = tan(0i);
ref = 0;
assert_isequal(x, ref);
assert_isequal(tan(0), 0);
assert_isequal(tan(-0), 0);
//=============================================================================
X = tan(zeros(3, 3, 3));
REF = zeros(3, 3, 3);
assert_isequal(X, REF);
//=============================================================================
S = sparse(zeros(3, 3));
X = tan(S);
REF = sparse(zeros(3, 3));
assert_isequal(X, REF);
//=============================================================================
assert_isequal(tan([]), []);
//=============================================================================
assert_checkerror('tan(''a'')', [_('Undefined function ''tan'' for input arguments of type '''), class('a'), '''.']);
//=============================================================================
