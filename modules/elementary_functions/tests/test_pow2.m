%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('pow2'), -1);
assert_isequal(nargout('pow2'), 1);
%=============================================================================
E = [1 -2 4 -4 3 9];
R = pow2(E);
REF = [2.0000    0.2500   16.0000    0.0625    8.0000  512.0000];
assert_isapprox(R, REF);
%=============================================================================
R = pow2(7i);
REF = [0.1392 - 0.9903i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
X = [1/2, pi/4, -3/4 , 1/2 , 1-eps/2 , 1/2 ];
E = [ 1 2 2 -51 1024 -1021];
R = pow2(X, E);
%=============================================================================
R = pow2(1/2, 1);
REF = 1;
assert_isapprox(R, REF);
%=============================================================================
R = pow2(pi/4, 2);
REF = pi;
assert_isapprox(R, REF);
%=============================================================================
R = pow2(-3/4, 2);
REF = -3;
assert_isapprox(R, REF);
%=============================================================================
R = pow2(1/2, -51);
REF = eps;
assert_isapprox(R, REF);
%=============================================================================
R = pow2(1-eps/2, 1024);
REF = inf;
assert_isapprox(R, REF);
%=============================================================================
R = pow2(1/2, -1021);
REF = 2.2251e-308; 
assert_isapprox(R, REF);
%=============================================================================
R = pow2([]);
REF = [];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1]);
REF = 2;
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1, 2, 3]);
REF = [2 4 8];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1;2;3]);
REF = [2; 4; 8];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1, 2, 3; 4, 5, 6]);
REF = [ 2     4     8; 16    32    64];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([i]);
REF = 0.7692 + 0.6390i;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = pow2([i, 2i, 3i]);
REF = [0.7692 + 0.6390i,   0.1835 + 0.9830i,  -0.4870 + 0.8734i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = pow2([i;2i;3i]);
REF = [0.7692 + 0.6390i;   0.1835 + 0.9830i;  -0.4870 + 0.8734i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = pow2([i, 2i, 3i; 4i, 5i, 6i]);
REF = [   0.7692 + 0.6390i,   0.1835 + 0.9830i,  -0.4870 + 0.8734i;
-0.9327 + 0.3607i,  -0.9479 - 0.3185i,  -0.5257 - 0.8507i];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = pow2([], []);
REF = [];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1],[1]);
REF = 2;
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1, 2, 3], [3, 2, 1]);
REF = [8 8 6];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1; 2; 3],[3; 2; 1]);
REF = [8; 8; 6];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([1, 2, 3; 4, 5, 6], [6, 5, 4; 3, 2, 1]);
REF = [    64    64    48; 32    20    12];
assert_isapprox(R, REF);
%=============================================================================
R = pow2(i, i);
REF = 0;
assert_isapprox(R, REF);
%=============================================================================
R = pow2([i,2i,3i],[3i,2i,i]);
REF = [0 0 0];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([i;2i;3i],[3i;2i;i]);
REF = [0; 0; 0];
assert_isapprox(R, REF);
%=============================================================================
R = pow2([i,2i,3i;4i,5i,6i],[6i,5i,4i;3i,2i,i]);
REF = [0     0     0;    0     0     0];
assert_isapprox(R, REF);
[msg, id] = lastwarn();
assert_isequal(id, 'Nelson:pow2:ignoredImagPart');
%=============================================================================
