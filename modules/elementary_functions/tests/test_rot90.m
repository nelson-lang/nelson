%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('rot90'), -1);
assert_isequal(nargout('rot90'), -1);
%=============================================================================
A = (1:5)';
%=============================================================================
R = rot90(A);
REF = 1:5;
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 0);
REF = (1:5)';
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 1);
REF = 1:5;
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 2);
REF = [5;4;3;2;1];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 3);
REF = [5   4   3   2   1];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 4);
REF = (1:5)';
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 40);
REF = (1:5)';
assert_isequal(R, REF);
%=============================================================================
A = [1 2 3; 4 5 6];
%=============================================================================
R = rot90(A);
REF = [3     6;
2     5;
1     4];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 0);
REF = [1 2 3; 4 5 6];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 1);
REF = [     3     6;
2     5;
1     4];
assert_isequal(R, REF)
%=============================================================================
R = rot90(A, 2);
REF = [ 6     5     4
3     2     1];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 3);
REF = [     4     1;
5     2;
6     3];
assert_isequal(R, REF);
%=============================================================================
R = rot90(A, 4);
REF = [1 2 3; 4 5 6];
assert_isequal(R, REF)
%=============================================================================
R = rot90(A, 40);
REF = [1 2 3; 4 5 6];
assert_isequal(R, REF)
%=============================================================================
R = rot90(ones(3, 0), 0);
REF = ones(3, 0);
assert_isequal(R, REF);
%=============================================================================
R = rot90(ones(3, 0), 1);
REF = ones(0, 3);
assert_isequal(R, REF);
%=============================================================================
R = rot90(ones(3, 0), 2);
REF = ones(3, 0);
assert_isequal(R, REF);
%=============================================================================
R = rot90(ones(3, 0), 3);
REF = ones(0, 3);
assert_isequal(R, REF);
%=============================================================================
A = [5;4;3;2;1] + i;
R = rot90(A, 2);
REF = [1;2;3;4;5] + i;
assert_isequal(R, REF);
%=============================================================================
