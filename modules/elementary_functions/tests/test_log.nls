//=============================================================================
// Copyright (c) 2016-2018 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('log'), 1)
assert_isequal(nargout('log'), 1)
//=============================================================================
R = log(-1);
REF = complex(0, pi);
assert_isapprox(R, REF, 1e-4);
//=============================================================================
R = log(3);
REF = 1.0986;
assert_isapprox(R, REF, 1e-4);
//=============================================================================
R = log(3+i);
REF = 1.1513 + 0.3218i;
assert_isapprox(real(R), real(REF), 1e-3);
assert_isapprox(imag(R), imag(REF), 1e-3);
//=============================================================================
R = log(single(-1));
REF = single(complex(0, pi));
assert_isapprox(R, REF, 1e-3);
//=============================================================================
R = log(single(3+i));
REF = single(1.1513 + 0.3218i);
assert_isapprox(real(R), real(REF), 1e-3);
assert_isapprox(imag(R), imag(REF), 1e-3);
//=============================================================================
R = log(eye(3,2));
REF = [0  -Inf;
  -Inf     0;
  -Inf  -Inf];
assert_isapprox(R, REF, 1e-4);
//=============================================================================
R = log(NaN);
REF = NaN;
assert_isequal(R, REF);
//=============================================================================
