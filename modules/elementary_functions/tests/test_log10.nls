//=============================================================================
// Copyright (c) 2020-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('log10'), 1);
assert_isequal(nargout('log10'), 1);
//=============================================================================
R = log10(NaN);
REF = NaN;
assert_isequal(R,REF);
//=============================================================================
R = log10(0);
REF = -Inf;
assert_isequal(R,REF);
//=============================================================================
R = log10(1);
REF = 0;
assert_isequal(R,REF);
//=============================================================================
R = log10(10);
REF = 1;
assert_isequal(R,REF);
//=============================================================================
R = log10(100);
REF = 2;
assert_isequal(R,REF);
//=============================================================================
R = log10(3i);
REF = 0.4771 + 0.6822i;
assert_isapprox(R,REF, 1e-4);
//=============================================================================
R = log10([1 10 100]);
REF =  [0 1 2];
assert_isequal(R,REF);
//=============================================================================
R = log10([1 10 ;100 1000]);
REF = [0 1; 2 3];
assert_isequal(R,REF);
//=============================================================================
R = log10(single(10));
REF = single(1);
assert_isequal(R,REF);
//=============================================================================
assert_checkerror('R = log10(true);', sprintf(_('function %s_log10 undefined.'), class(true)));
//=============================================================================
R = log10(-3);
REF = log10(complex(-3, 0));
assert_isequal(R,REF);
//=============================================================================
R = log10([0i NaN]);
REF = [-Inf NaN];
assert_isequal(R,REF);
//=============================================================================
R = log10([0i complex(NaN, NaN)]);
REF = [-Inf complex(NaN, NaN)];
assert_isequal(R,REF);
//=============================================================================
