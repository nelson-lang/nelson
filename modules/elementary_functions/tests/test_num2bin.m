%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
% version 2.1 of the License, or (at your option) any later version.
%
% Alternatively, you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public
% License along with this program. If not, see <http://www.gnu.org/licenses/>.
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('num2bin'), 1)
assert_isequal(nargout('num2bin'), 1)
%=============================================================================
assert_isequal(num2bin(logical(0)), '0')
assert_isequal(num2bin(logical(1)), '1')
%=============================================================================
assert_isequal(num2bin(int8(0)),  '0000000000000000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(uint8(0)), '0000000000000000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(int16(0)),  '0000000000000000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(uint16(0)), '0000000000000000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(int32(0)),  '0000000000000000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(uint32(0)), '0000000000000000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(int64(0)),  '0000000000000000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(uint64(0)), '0000000000000000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(single(0)), '00000000000000000000000000000000')
assert_isequal(num2bin(double(0)), '0000000000000000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmax('int8')), '0100000001011111110000000000000000000000000000000000000000000000')
assert_isequal(num2bin(intmax('uint8')), '0100000001101111111000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmax('int16')), '0100000011011111111111111100000000000000000000000000000000000000')
assert_isequal(num2bin(intmax('uint16')), '0100000011101111111111111110000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmax('int32')), '0100000111011111111111111111111111111111110000000000000000000000')
assert_isequal(num2bin(intmax('uint32')), '0100000111101111111111111111111111111111111000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmax('int64')), '0100001111100000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(intmax('uint64')), '0100001111110000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmin('int8')), '1100000001100000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmin('int16')), '1100000011100000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmin('int32')), '1100000111100000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(intmin('int64')), '1100001111100000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(Inf), '0111111111110000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(-Inf), '1111111111110000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(NaN),  '0111111111111000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(-NaN),  '1111111111111000000000000000000000000000000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(single(Inf)),'01111111100000000000000000000000')
assert_isequal(num2bin(single(-Inf)),  '11111111100000000000000000000000')
%=============================================================================
assert_isequal(num2bin(single(NaN)), '01111111110000000000000000000000')
assert_isequal(num2bin(single(-NaN)), '11111111110000000000000000000000')
%=============================================================================
assert_isequal(num2bin(pi),  '0100000000001001001000011111101101010100010001000010110100011000')
assert_isequal(num2bin(single(pi)),  '01000000010010010000111111011011')
%=============================================================================
assert_isequal(num2bin(eps), '0011110010110000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(eps('single')), '00110100000000000000000000000000')
%=============================================================================
assert_isequal(num2bin(1), '0011111111110000000000000000000000000000000000000000000000000000')
assert_isequal(num2bin(-1),  '1011111111110000000000000000000000000000000000000000000000000000')
%=============================================================================
REF = ['0011111111110000000000000000000000000000000000000000000000000000';
 '0000000000000000000000000000000000000000000000000000000000000000';
 '0000000000000000000000000000000000000000000000000000000000000000';
 '0011111111110000000000000000000000000000000000000000000000000000';
 '0000000000000000000000000000000000000000000000000000000000000000';
 '0000000000000000000000000000000000000000000000000000000000000000'];
assert_isequal(num2bin(eye(2, 3)), REF);
%=============================================================================
REF = [ '0011111111100001100011111110000101010101100000000000000000000000';
 '0011111111100110111000101101010011001110101000000000000000000000';
 '0011111111100011010010011101011001101000011000000000000000000000';
 '0011111111100001011011111010111011011000011000000000000000000000';
 '0011111111011011000111010010100100000010010000000000000000000000';
 '0011111111100100101010110010101000100010101000000000000000000000'];
R = num2bin(rand(2, 3));
assert_isequal(R, REF);
%=============================================================================
REF = ['0011111111110000000000000000000000000000000000000000000000000000';
'0000000000000000000000000000000000000000000000000000000000000000';
'0000000000000000000000000000000000000000000000000000000000000000';
'0011111111110000000000000000000000000000000000000000000000000000';
'0000000000000000000000000000000000000000000000000000000000000000';
'0000000000000000000000000000000000000000000000000000000000000000'];
R = num2bin(sparse(eye(2, 3)));
assert_isequal(R, REF);
%=============================================================================
assert_checkerror('num2bin(i)', _('First argument must be real.'))
assert_checkerror('num2bin(''i'')', sprintf(_('function %s_num2bin undefined.'), 'char'));
%=============================================================================
