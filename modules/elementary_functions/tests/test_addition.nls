//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
R = 1 + 1;
REF = 2;
assert_isequal(R, REF);
//=============================================================================
R = ones(3, 0) + 1;
REF = zeros(3, 0);
assert_isequal(R, REF);
//=============================================================================
R = ones(3, 0) + ones(3, 0);
REF = zeros(3, 0);
assert_isequal(R, REF);
//=============================================================================
R = ones(3, 3) + ones(3, 3);
REF = ones(3, 3) * 2;
assert_isequal(R, REF);
//=============================================================================
R = 1 + zeros(3, 3, 3);
REF = ones(3, 3, 3);
assert_isequal(R, REF);
//=============================================================================
R = zeros(3, 3, 3) + 1;
REF = ones(3, 3, 3);
assert_isequal(R, REF);
//=============================================================================
R = ones(3, 3, 3) + ones(3, 3, 3);
REF = ones(3, 3, 3) + 1;
assert_isequal(R, REF);
//=============================================================================
R = 3 + i;
REF = complex(3, 1);
assert_isequal(R, REF);
//=============================================================================
A = ones(1,2,3);
B = [1:3];
assert_checkerror('R = A + B;', [_('Size mismatch on arguments to arithmetic operator '),  '+']);
//=============================================================================
A = "r";
B = "B";
R = A + B;
REF = "rB";
assert_isequal(R, REF);
//=============================================================================
A = "r";
B = "B";
R = B + A;
REF = "Br";
assert_isequal(R, REF);
//=============================================================================
A = ["a", "b"; "c", "d"];
B = "u";
R = A + B;
REF = ["au", "bu"; "cu", "du"];
assert_isequal(R, REF);
//=============================================================================
B = ["a", "b"; "c", "d"];
A = "u";
R = A + B;
REF = ["ua", "ub"; "uc", "ud"];
assert_isequal(R, REF);
//=============================================================================
A = ["1", "2"; "3", "4"];
B = ["a", "b"; "c", "d"];
R = A + B;
REF = ["1a", "2b"; "3c", "4d"];
assert_isequal(R, REF);
//=============================================================================
B = ["1", "2"; "3", "4"];
A = ["a", "b"; "c", "d"];
R = A + B;
REF = ["a1", "b2"; "c3", "d4"];
assert_isequal(R, REF);
//=============================================================================
A = ["1", "2"];
B = ["3"; "4"];
R = A + B;
REF = ["13", "23";
       "14", "24"];
assert_isequal(R, REF);
//=============================================================================
B = ["1", "2", "5"];
A = ["3"; "4"];
R = A + B;
REF = ["31", "35", "42";
 "32", "41", "45"];
 assert_isequal(R, REF);
//=============================================================================
A = ["1", "2", "5"];
B = ["3"; "4"];
R = A + B;
REF = ["13", "23", "53";
    "14", "24", "54"];
assert_isequal(R, REF);
//=============================================================================
A = ["a", "b"];
B = ["1", "2"; "3", "4"];
R = A + B;
REF = ["a1", "b2";
    "a3", "b4"];
assert_isequal(R, REF);
//=============================================================================
A = ["1", "2"; "3", "4"];
B = ["a", "b"];
R = A + B;
REF = ["1a", "2b";
    "3a", "4b"];
assert_isequal(R, REF);
//=============================================================================
A = ["1", "2"; "3", "4"];
B = ["a"; "b"];
R = A + B;
REF = ["1a", "2a";
    "3b", "4b"];
assert_isequal(R, REF);
//=============================================================================
B = ["1", "2"; "3", "4"];
A = ["a"; "b"];
R = A + B;
REF = ["a1", "a2";
    "b3", "b4"];
assert_isequal(R, REF);
//=============================================================================
