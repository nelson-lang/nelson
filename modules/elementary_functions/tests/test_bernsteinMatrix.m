%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('bernsteinMatrix'), -1);
assert_isequal(nargout('bernsteinMatrix'), -1);
%=============================================================================
try
 bernsteinMatrix(Inf, 0)
catch ex
   assert_isequal(ex.identifier, 'Nelson:validators:mustBeInteger')
end
%=============================================================================
R = bernsteinMatrix(4, linspace(0, 1, 10));
REF =  [1.0000         0         0         0         0;
0.6243    0.3121    0.0585    0.0049    0.0002;
0.3660    0.4182    0.1792    0.0341    0.0024;
0.1975    0.3951    0.2963    0.0988    0.0123;
0.0953    0.3048    0.3658    0.1951    0.0390;
0.0390    0.1951    0.3658    0.3048    0.0953;
0.0123    0.0988    0.2963    0.3951    0.1975;
0.0024    0.0341    0.1792    0.4182    0.3660;
0.0002    0.0049    0.0585    0.3121    0.6243;
     0         0         0         0    1.0000];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = bernsteinMatrix(3, 4);
REF = [-27   108  -144    64];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = bernsteinMatrix(1, linspace(0, 1, 5));
REF = [1 0; 0.75 0.25; 0.5 0.5; 0.25 0.75; 0 1];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
