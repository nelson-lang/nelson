//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('isfinite'), 1)
assert_isequal(nargout('isfinite'), 1)
//=============================================================================
assert_isequal(isfinite(NaN), false);
assert_isequal(isfinite(single(Inf)), false);
assert_isequal(isfinite(Inf), false);
//=============================================================================
X = [1 2 Inf 3 -Inf 4];
R = isfinite(X);
REF = [ true  true  false   true  false   true];
assert_isequal(R, REF);
//=============================================================================
X = sparse([1 2 Inf 3 0 Inf 0 4]);
R = isfinite(X);
REF = [ true   true   false  true   true   false  true   true ];
assert_isequal(R, REF);
//=============================================================================
R = isfinite([13, Inf, -Inf, NaN]);
REF = logical([1, 0, 0, 0]);
assert_isequal(R, REF);
//=============================================================================
