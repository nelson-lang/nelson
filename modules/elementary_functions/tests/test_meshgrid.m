%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
x = -1:0.4:1;
y = -1:0.4:1;
[X, Y] = meshgrid(x, y);
REF_X = [-1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000;
   -1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000;
   -1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000;
   -1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000;
   -1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000;
   -1.0000   -0.6000   -0.2000    0.2000    0.6000    1.0000];
assert_isapprox(X, REF_X, 1e-4);
%=============================================================================
REF_Y = [-1.0000   -1.0000   -1.0000   -1.0000   -1.0000   -1.0000;
   -0.6000   -0.6000   -0.6000   -0.6000   -0.6000   -0.6000;
   -0.2000   -0.2000   -0.2000   -0.2000   -0.2000   -0.2000;
    0.2000    0.2000    0.2000    0.2000    0.2000    0.2000;
    0.6000    0.6000    0.6000    0.6000    0.6000    0.6000;
    1.0000    1.0000    1.0000    1.0000    1.0000    1.0000];
assert_isapprox(Y, REF_Y, 1e-4);
%=============================================================================
[X, Y, Z] = meshgrid([], [], []);
assert_isequal(X, [])
assert_isequal(Y, [])
assert_isequal(Z, [])
%=============================================================================
x = 0:2:4;
y = 0:1:4;
z = 0:3:4;
[X,Y,Z] = meshgrid(x, y, z);

X_1 = [0     2     4;
     0     2     4;
     0     2     4;
     0     2     4;
     0     2     4];
assert_isequal(X(:,:,1), X_1)
%=============================================================================
X_2 = [0     2     4;
     0     2     4;
     0     2     4;
     0     2     4;
     0     2     4];
assert_isequal(X(:,:,2), X_2)
%=============================================================================
Y_1 = [0     0     0;
     1     1     1;
     2     2     2;
     3     3     3;
     4     4     4];
assert_isequal(Y(:,:,1), Y_1)
%=============================================================================
Y_2 = [0     0     0;
     1     1     1;
     2     2     2;
     3     3     3;
     4     4     4];
assert_isequal(Y(:,:,2), Y_2)
%=============================================================================
Z_1 = [0     0     0;
0     0     0;
0     0     0;
0     0     0;
0     0     0];
assert_isequal(Z(:,:,1), Z_1);
%=============================================================================
