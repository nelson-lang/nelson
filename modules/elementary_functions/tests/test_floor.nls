//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('floor'), 1)
assert_isequal(nargout('floor'), 1)
//=============================================================================
A = [2.3 3.8 5.5 -2.3 -3.8 -5.5];
R = floor(A);
REF = [2     3     5    -3    -4    -6];
assert_isequal(R, REF);
//=============================================================================
A = single([2.3 3.8 5.5 -2.3 -3.8 -5.5]);
R = floor(A);
REF = single([2     3     5    -3    -4    -6]);
assert_isequal(R, REF);
//=============================================================================
A = [2.3 3.8 5.5 -2.3 -3.8 -5.5];
REF = [2     3     5    -3    -4    -6];
R = floor(sparse(A));
REF = sparse(REF);
assert_isequal(R, REF);
//=============================================================================
A = complex([2.3 3.8 5.5 -2.3 -3.8 -5.5], [2.3 3.8 5.5 -2.3 -3.8 -5.5] * 2);
R = floor(A);
REF = [2.0000+4.0000i, 3.0000+7.0000i, 5.0000+11.0000i, -3.0000-5.0000i, -4.0000-8.0000i, -6.0000-11.0000i];
assert_isequal(R, REF);
//=============================================================================
A = floor(int8(3));
R = class(A);
assert_isequal(R, 'int8');
//=============================================================================
assert_isequal(floor(NaN), NaN);
assert_isequal(floor(Inf), Inf);
assert_isequal(floor(-Inf), -Inf);
assert_isequal(floor(zeros(0, 3)), zeros(0, 3));
//=============================================================================
