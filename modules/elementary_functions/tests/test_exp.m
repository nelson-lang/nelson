%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('exp'), 1)
assert_isequal(nargout('exp'), 1)
%=============================================================================
A = 3;
R = exp(A);
REF = 20.0855;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = single(3);
R = exp(A);
REF = single(20.0855);
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = 3 - i;
R = exp(A);
REF = complex(10.8523, -16.9014);
assert_isapprox(R, REF, 1e-4);
%=============================================================================
assert_isequal(exp(NaN), NaN);
assert_isequal(exp(Inf), Inf);
assert_isequal(exp(-Inf), 0);
assert_isequal(exp(zeros(0, 3)), zeros(0, 3));
assert_isequal(exp([]), []);
%=============================================================================
R = exp(sparse(eye(2, 2)));
REF =  sparse([2.7183  1.0000; 1.0000  2.7183]);
assert_isapprox(full(R), full(REF), 1e-4);
%=============================================================================
R = exp(ones(2, 2, 2));
assert_isapprox(R(1), 2.71828, 1e-4);
%=============================================================================
