//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('factorial'), 1)
assert_isequal(nargout('factorial'), 1)
//=============================================================================
R = factorial(6);
REF = 720;
assert_isequal(R, REF);
//=============================================================================
R = factorial(single(6));
REF = single(720);
assert_isequal(R, REF);
//=============================================================================
R = factorial([4, 3; 2 1]);
REF = [24 6; 2 1];
assert_isequal(R, REF);
//=============================================================================
R = factorial(single([4, 3; 2 1]));
REF = single([24 6; 2 1]);
assert_isequal(R, REF);
//=============================================================================
R = factorial(171);
REF = Inf;
assert_isequal(R, REF);
//=============================================================================
R = factorial(single(35));
REF = single(Inf);
assert_isequal(R, REF);
//=============================================================================
R = factorial(0);
REF = 1;
assert_isequal(R, REF);
//=============================================================================
R = factorial(Inf);
REF = Inf;
assert_isequal(R, REF);
//=============================================================================
assert_checkerror('R = factorial(-Inf);', _('#1 input argument: must be real positive integer values.'));
assert_checkerror('R = factorial(NaN);', _('#1 input argument: must be real positive integer values.'));
//=============================================================================
R = factorial(int8(255));
REF = int8(127);
assert_isequal(R, REF);
//=============================================================================
