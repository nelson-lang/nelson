//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('round'), 1)
assert_isequal(nargout('round'), 1)
//=============================================================================
A = [2.3 3.8 5.5 -2.3 -3.8 -5.5];
REF = [2     4     6    -2    -4    -6];
R = round(A);
assert_isequal(R, REF);
//=============================================================================
A = single([2.3 3.8 5.5 -2.3 -3.8 -5.5]);
R = round(A);
REF = single([2     4     6    -2    -4    -6]);
assert_isequal(R, REF);
//=============================================================================
A = [2.3 3.8 5.5 -2.3 -3.8 -5.5];
REF = [2     4     6    -2    -4    -6];
R = round(sparse(A));
REF = sparse(REF);
assert_isequal(R, REF);
//=============================================================================
A = complex([2.3 3.8 5.5 -2.3 -3.8 -5.5], [2.3 3.8 5.5 -2.3 -3.8 -5.5] * 2);
R = round(A);
REF = [2.0000+5.0000i, 4.0000+8.0000i, 6.0000+11.0000i, -2.0000-5.0000i, -4.0000-8.0000i, -6.0000-11.0000i];
assert_isequal(R, REF);
//=============================================================================
A = round(int8(3));
R = class(A);
assert_isequal(R, 'int8');
//=============================================================================
assert_isequal(round(NaN), NaN);
assert_isequal(round(Inf), Inf);
assert_isequal(round(-Inf), -Inf);
assert_isequal(round(zeros(0, 3)), zeros(0, 3));
//=============================================================================
