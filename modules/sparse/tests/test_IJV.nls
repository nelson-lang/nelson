//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
S = sparse(eye(3,4));
[A, B, C, D, E] = IJV(S);
REF_A = [1;2;3];
assert_isequal(A, REF_A);
REF_B = [1;2;3];
assert_isequal(B, REF_B);
REF_C = [1;1;1];
assert_isequal(C, REF_C);
REF_D = 3;
assert_isequal(D, REF_D);
REF_E = 4;
assert_isequal(E, REF_E);
//=============================================================================
[A, B, C, D, E] = IJV(sparse([]));
REF_A = zeros(0, 1);
assert_isequal(A, REF_A);
REF_B = zeros(0, 1);
assert_isequal(B, REF_B);
REF_C = zeros(0, 1);
assert_isequal(C, REF_C);
REF_D = 0;
assert_isequal(D, REF_D);
REF_E = 0;
assert_isequal(E, REF_E);
//=============================================================================
[A, B, C, D, E] = IJV(sparse(complex([])));
REF_A = zeros(0, 1);
assert_isequal(A, REF_A);
REF_B = zeros(0, 1);
assert_isequal(B, REF_B);
REF_C = complex(zeros(0, 1));
assert_isequal(C, REF_C);
REF_D = 0;
assert_isequal(D, REF_D);
REF_E = 0;
assert_isequal(E, REF_E);
//=============================================================================
