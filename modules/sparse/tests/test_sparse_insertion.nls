//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
A = sparse(eye(4,5));
A([5]) = 3;
A([3]) = 3;
A([1]) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 3; 1; 2; 3; 4];  
ref_b = [1; 1; 2; 2; 3; 4];
ref_c = [3; 3; 3; 1; 1; 1];  
ref_d = 4;
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
A = sparse(eye(4,5));
A([1,3,1],[2,1]) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 3; 1; 2; 3; 3; 4]; 
ref_b = [1; 1; 2; 2; 2; 3; 4];  
ref_c = [3; 3; 3; 1; 3; 1; 1]; 
ref_d = 4; 
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
A = sparse(eye(4,5));
A([2,1],[1,3,1]) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 2; 2; 1; 2; 3; 4]; 
ref_b = [1; 1; 2; 3; 3; 3; 4]; 
ref_c = [3; 3; 1; 3; 3; 1; 1];
ref_d = 4;
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
A = sparse(eye(4,5));
A([5 3 1]) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 3; 1; 2; 3; 4]; 
ref_b = [1; 1; 2; 2; 3; 4];
ref_c = [3; 3; 3; 1; 1; 1];
ref_d = 4; 
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
A = sparse(eye(4, 5));
A(2, [5 3 1]) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 2; 2; 2; 3; 4; 2];  
ref_b = [1; 1; 2; 3; 3; 4; 5];  
ref_c = [1; 3; 1; 3; 1; 1; 3.000]; 
ref_d = 4;
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
A = sparse(eye(4, 5));
A([5 3 1],2) = 3;
[a, b, c, d, e] = IJV(A);
ref_a = [1; 1; 2; 3; 5; 3; 4];  
ref_b = [1; 2; 2; 2; 2; 3; 4];
ref_c = [1; 3; 1; 3; 3; 1; 1];
ref_d = 5;
ref_e = 5;
assert_isequal(a, ref_a);
assert_isequal(b, ref_b);
assert_isequal(c, ref_c);
assert_isequal(d, ref_d);
assert_isequal(e, ref_e); 
//=============================================================================
