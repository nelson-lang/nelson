//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
matver = {'-v7', '-v7.3'};
//=============================================================================
R = int8(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = int16(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = int32(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = int64(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = uint8(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = uint16(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = uint32(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
R = uint64(eye(3, 4));
R_REF = R;
//=============================================================================
for v = matver
  test_file_mat = [tempdir(), 'test_save_eye_', class(R), v{1}, '.mat'];
  savemat(test_file_mat, 'R', v{1});
  clear R;
  loadmat(test_file_mat);
  assert_isequal(R, R_REF);
end
//=============================================================================
