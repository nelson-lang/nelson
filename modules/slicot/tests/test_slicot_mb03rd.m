%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% http://slicot.org/objects/software/shared/doc/MB03RD.html
% [A_OUT, X_OUT, NBLCKS, BLSIZE, WR, WI, INFO] = slicot_mb03rd(JOBX, SORT, PMAX, A_IN, X_IN, TOL)
assert_isequal(nargin('slicot_mb03rd'), 6);
assert_isequal(nargout('slicot_mb03rd'), 7);
%=============================================================================
N = 8;
PMAX = 1.D03;
TOL = 1.D-2;
JOBX = 'U';
SORT = 'S';
A_IN = [1.   -1.    1.    2.    3.    1.    2.    3.;
1.    1.    3.    4.    2.    3.    4.    2.;
0.    0.    1.   -1.    1.    5.    4.    1.;
0.    0.    0.    1.   -1.    3.    1.    2.;
0.    0.    0.    1.    1.    2.    3.   -1.;
0.    0.    0.    0.    0.    1.    5.    1.;
0.    0.    0.    0.    0.    0.    0.99999999   -0.99999999;
0.    0.    0.    0.    0.    0.    0.99999999    0.99999999];
X_IN = zeros(N, N);
[A_OUT, X_OUT, NBLCKS, BLSIZE, WR, WI, INFO] = slicot_mb03rd(JOBX, SORT, PMAX, A_IN, X_IN, TOL);
%=============================================================================
A_OUT_REF = [1.0000     -1.0000     -1.2247     -0.7071     -3.4186      1.4577      0.0000      0.0000;
1.0000      1.0000      0.0000      1.4142     -5.1390      3.1637      0.0000      0.0000;
0.0000      0.0000      1.0000     -1.7321     -0.0016      2.0701      0.0000      0.0000;
0.0000      0.0000      0.5774      1.0000      0.7516      1.1379      0.0000      0.0000;
0.0000      0.0000      0.0000      0.0000      1.0000     -5.8606      0.0000      0.0000;
0.0000      0.0000      0.0000      0.0000      0.1706      1.0000      0.0000      0.0000;
0.0000      0.0000      0.0000      0.0000      0.0000      0.0000      1.0000     -1.0102;
0.0000      0.0000      0.0000      0.0000      0.0000      0.0000      0.0000      1.0000];
assert_isapprox(A_OUT, A_OUT_REF, 1e-4);
%=============================================================================
NBLCKS_REF = int32(2);
assert_isequal(NBLCKS, NBLCKS_REF);
%=============================================================================
BLSIZE_REF = [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000];
assert_isapprox(BLSIZE, BLSIZE_REF, 1e-4);
%=============================================================================
WR_REF = [1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000];
assert_isapprox(WR, WR_REF, 1e-4);
%=============================================================================
WI_REF = [1.0000, -1.0000, 1.0000, -1.0000, 1.0000, -1.0000, 0.0000, 0.0000]
assert_isapprox(WI, WI_REF, 1e-4);
%=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
%=============================================================================
