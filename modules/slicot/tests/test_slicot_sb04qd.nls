//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// http://slicot.org/objects/software/shared/doc/SB0QMB.html
assert_isequal(nargin('slicot_sb04qd'), 3);
assert_isequal(nargout('slicot_sb04qd'), 5);
//=============================================================================
N = 3;
M = 3;
A_IN = [1.0   2.0   3.0;
6.0   7.0   8.0;
9.0   2.0   3.0];
B_IN = [7.0   2.0   3.0;
2.0   1.0   2.0; 
3.0   4.0   1.0];
C_IN = [271.0   135.0   147.0;
923.0   494.0   482.0;
578.0   383.0   287.0];

[A_OUT, B_OUT, C_OUT, Z, INFO] = slicot_sb04qd(A_IN, B_IN, C_IN);
//=============================================================================
A_OUT_REF = [1.0000     -3.6056      0.0000;
-10.8167      8.8462      0.7692;
0.5352      6.7692      1.1538];
assert_isapprox(A_OUT, A_OUT_REF, 1e-4);
//=============================================================================
B_OUT_REF = [9.3443      0.3690      1.0409;
0.0000      1.5048     -1.6675;
0.0000      0.0000     -1.8491];
assert_isapprox(B_OUT, B_OUT_REF, 1e-4);
//=============================================================================
C_OUT_REF = [2.0000      3.0000      6.0000;
4.0000      7.0000      1.0000;
5.0000      3.0000      2.0000];
assert_isapprox(C_OUT, C_OUT_REF, 1e-4);
//=============================================================================
Z_REF = [0.8337      0.5204     -0.1845;
0.3881     -0.7900     -0.4746;
0.3928     -0.3241      0.8606];
assert_isapprox(Z, Z_REF, 1e-4);
//=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
//=============================================================================
