%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% http://slicot.org/objects/software/shared/doc/SB02OD.html
% [RCOND, X, ALFAR, ALFAI, BETA, S, T, U, INFO] = slicot_sb02od(DICO, JOBB, FACT, UPLO, JOBL, SORT, P, A, B, Q, R, L, TOL)
assert_isequal(nargin('slicot_sb02od'), 13);
assert_isequal(nargout('slicot_sb02od'), 9);
%=============================================================================
N = 2;
M = 1;
P = 3;
TOL = 0.0;
DICO = 'C';
JOBB = 'B';
FACT = 'B';
UPLO = 'U';
JOBL = 'Z';
SORT = 'S';
A = [0.0  1.0;
0.0  0.0];
B = [0.0; 1.0];
Q = [1.0  0.0;
0.0  1.0;
0.0  0.0];
R = [0.0;
0.0;
1.0];
L = zeros(N, M);
[RCOND, X, ALFAR, ALFAI, BETA, S, T, U, INFO] = slicot_sb02od(DICO, JOBB, FACT, UPLO, JOBL, SORT, P, A, B, Q, R, L, TOL);
%=============================================================================
RCOND_REF = 0.4714;
assert_isapprox(RCOND, RCOND_REF, 1e-4);
%=============================================================================
X_REF = [1.7321      1.0000;
1.0000      1.7321];
assert_isapprox(X, X_REF, 1e-4);
%=============================================================================
ALFAR_REF = [-1.2679     -1.2679      1.2679      1.2679];
assert_isapprox(ALFAR, ALFAR_REF, 1e-4);
%=============================================================================
ALFAI_REF = [0.7321     -0.7321      0.7321     -0.7321];
assert_isapprox(ALFAI, ALFAI_REF, 1e-4);
%=============================================================================
BETA_REF = [1.4641      1.4641      1.4641      1.4641];
assert_isapprox(BETA, BETA_REF, 1e-4);
%=============================================================================
S_REF_1 = [-0.4330     -0.4854     -0.1369      0.2412      0.0000;
0.6423     -0.9256      0.3262      0.1744      0.6180;
0.0000      0.0000      0.5196     -0.3606      0.0000;
0.0000      0.0000      0.6441      0.7610      0.0000;
0.0000      0.0000      0.0000     -0.4472     -1.1180];

S_REF_2 = [-0.4330   -0.4854    0.1369   -0.2412         0;
0.6423   -0.9256   -0.3262   -0.1744    0.6180;
0         0    0.5196   -0.3606         0;
0         0    0.6441    0.7610         0;
0         0         0   -0.4472   -1.1180];

REF_CASE = 0;
if isapprox(S, S_REF_1, 1e-4)
  REF_CASE = 1;
else
  REF_CASE = 2;
end
assert_istrue(isapprox(S, S_REF_1, 1e-4) || isapprox(S, S_REF_2, 1e-4)); 
%=============================================================================
T_REF_1 = [1.0000      0.0000     -0.0000      0.0000;
0.0000      0.7125     -0.0000      0.5462;
0.0000      0.0000      1.0000      0.0000;
0.0000      0.0000      0.0000      0.6276;
0.0000     -0.8944      0.0000      0.0000];

T_REF_2 = [1.0000        -0   -0.0000    0.0000;
0    0.7125   -0.0000   -0.5462;
0         0    1.0000        -0;
0         0         0    0.6276;
0   -0.8944         0         0];

if (REF_CASE == 1)
  assert_isapprox(T, T_REF_1, 1e-4);
else
  assert_isapprox(T, T_REF_2, 1e-4);
end
%=============================================================================
U_REF_1 = [-0.7071     -0.3397      0.4472     -0.4297;
0.0000      0.7845      0.0000     -0.6202;
-0.6124      0.0981     -0.7746      0.1240;
-0.3536      0.5095      0.4472      0.6445];

U_REF_2 = [-0.7071   -0.3397   -0.4472    0.4297;
-0.0000    0.7845    0.0000    0.6202;
-0.6124    0.0981    0.7746   -0.1240;
-0.3536    0.5095   -0.4472   -0.6445];

if (REF_CASE == 1)
  assert_isapprox(U, U_REF_1, 1e-4);
else
  assert_isapprox(U, U_REF_2, 1e-4);
end
%=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
%=============================================================================
