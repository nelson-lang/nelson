%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% http://slicot.org/objects/software/shared/doc/mb03pd.html
% [A_OUT, JPVT_OUT, TAU, RANK, SVAL, INFO] = slicot_mb03pd(JOBRQ, A_IN, JPVT_IN, RCOND, SVLMAX)
assert_isequal(nargin('slicot_mb03pd'), 5);
assert_isequal(nargout('slicot_mb03pd'), 6);
%=============================================================================
M = 6;
N = 5;
JOBRQ = 'R';
RCOND = 5.D-16;
SVLMAX = 0.0;
JPVT_IN = zeros(1, M);
A_IN = [   1.    2.    6.    3.    5.;
-2.   -1.   -1.    0.   -2.;
5.    5.    1.    5.    1.;
-2.   -1.   -1.    0.   -2.;
4.    8.    4.   20.    4.;
-2.   -1.   -1.    0.   -2.];
[A_OUT, JPVT_OUT, TAU, RANK, SVAL, INFO] = slicot_mb03pd(JOBRQ, A_IN, JPVT_IN, RCOND, SVLMAX);
%=============================================================================
A_OUT_REF = [0.0000     -1.0517     -1.8646     -1.9712      1.2374;
0.0000     -1.0517     -1.8646     -1.9712      1.2374;
0.1859     -1.0517     -1.8646     -1.9712      1.2374;
-0.6955     -0.4765      4.6768      0.0466     -7.4246;
0.0496      0.0992     -0.3823      6.7059     -5.4801;
0.1502      0.3004      0.1502      0.7511    -22.6274];
assert_isapprox(A_OUT, A_OUT_REF, 1e-4);
%=============================================================================
JPVT_OUT_REF = int32([2              4              6              3              1              5]);
assert_isequal(JPVT_OUT, JPVT_OUT_REF);
%=============================================================================
TAU_REF = [0.0000      1.9332      1.1691      1.7265      1.1768];
assert_isapprox(TAU, TAU_REF, 1e-4);
%=============================================================================
RANK_REF = int32(4);
assert_isequal(RANK, RANK_REF);
%=============================================================================
SVAL_REF = [24.5744      0.9580      0.0000];
assert_isapprox(SVAL, SVAL_REF, 1e-4);
%=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
%=============================================================================
