%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% http://slicot.org/objects/software/shared/doc/SG02AD.html
% [RCONDU, X, ALFAR, ALFAI, BETA, S, T, U, IWARN, INFO] = slicot_sg02ad(DICO, JOBB, FACT, UPLO, JOBL, SCAL, SORT, ACC, P, A, E, B, Q, R, L, TOL)
assert_isequal(nargin('slicot_sg02ad'), 16);
assert_isequal(nargout('slicot_sg02ad'), 10);
%=============================================================================
N = 2;
M = 1;
P = 3;
TOL = 0.0;
DICO = 'C';
JOBB = 'B';
FACT = 'B';
UPLO = 'U';
JOBL = 'Z';
SCAL = 'N';
SORT = 'S';
ACC = 'N';
A = [0.0  1.0;
0.0  0.0];
E = [1.0  0.0;
0.0  1.0];
B = [0.0;
1.0];
Q = [1.0  0.0;
0.0  1.0;
0.0  0.0];
R = [0.0;
0.0;
1.0];
L = zeros(N, N);
[RCONDU, X, ALFAR, ALFAI, BETA, S, T, U, IWARN, INFO] = slicot_sg02ad(DICO, JOBB, FACT, UPLO, JOBL, SCAL, SORT, ACC, P, A, E, B, Q, R, L, TOL);
%=============================================================================
RCONDU_REF = 0.3013;
assert_isapprox(RCONDU, RCONDU_REF, 1e-4);
%=============================================================================
X_REF = [1.7321      1.0000;
1.0000      1.7321];
assert_isapprox(X, X_REF, 1e-4);
%=============================================================================
ALFAR_REF = [-1.2679     -1.2679      1.2679      1.2679];
assert_isapprox(ALFAR, ALFAR_REF, 1e-4);
%=============================================================================
ALFAI_REF = [0.7321     -0.7321      0.7321     -0.7321];
assert_isapprox(ALFAI, ALFAI_REF, 1e-4);
%=============================================================================
BETA_REF = [1.4641      1.4641      1.4641      1.4641];
assert_isapprox(BETA, BETA_REF, 1e-4);
%=============================================================================
S_REF_1 = [-0.6928     -0.3883     -0.2739      0.3070      0.0000;
0.6481     -0.9340     -0.4148     -0.7853      0.4142;
0.0000      0.0000      0.6495     -0.4507      0.0000;
0.0000      0.0000      0.5183      0.8517      0.0000;
0.0000      0.0000      0.0000     -0.7071     -1.4142];

S_REF_2 = [-0.6928   -0.3883    0.2739   -0.3070         0;
0.6481   -0.9340    0.4148    0.7853    0.4142;
     0         0    0.6495   -0.4507         0;
     0         0    0.5183    0.8517         0;
     0         0         0   -0.7071   -1.4142];

REF_CASE = 0;
if isapprox(S, S_REF_1, 1e-4)
    REF_CASE = 1;
else
    REF_CASE = 2;
end
assert_istrue(isapprox(S, S_REF_1, 1e-4) || isapprox(S, S_REF_2, 1e-4)); 
%=============================================================================
T_REF_1 = [1.0000      0.0000     -0.0000     -0.0000;
0.0000      0.8987     -0.0000     -0.2707;
0.0000      0.0000      1.0000      0.0000;
0.0000      0.0000      0.0000      0.7868;
0.0000     -0.7071      0.0000      0.0000];

T_REF_2 = [1.0000        -0    0.0000   -0.0000;
0    0.8987    0.0000    0.2707;
0         0    1.0000        -0;
0         0         0    0.7868;
0   -0.7071         0         0];

if REF_CASE == 1
    assert_isapprox(T, T_REF_1, 1e-4);
else
    assert_isapprox(T, T_REF_2, 1e-4);
end
%=============================================================================
U_REF_1 = [-0.4472      0.4297     -0.7071      0.3397;
0.0000     -0.6202     -0.0000      0.7845;
-0.7746      0.1240      0.6124      0.0981;
-0.4472     -0.6445     -0.3536     -0.5095];

U_REF_2 = [   -0.4472    0.4297   -0.7071    0.3397;
0.0000   -0.6202   -0.0000    0.7845;
-0.7746    0.1240    0.6124    0.0981;
-0.4472   -0.6445   -0.3536   -0.5095];
if REF_CASE == 1
    assert_isapprox(U, U_REF_1, 1e-4);
else
    assert_isapprox(U, U_REF_2, 1e-4);
end
%=============================================================================
IWARN_REF = int32(0);
assert_isequal(IWARN, IWARN_REF);
%=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
%=============================================================================
