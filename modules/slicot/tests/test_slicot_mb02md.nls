//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// http://slicot.org/objects/software/shared/doc/MB02MD.html
// [RANK_OUT, C_OUT, S, X, IWARN, INFO] = slicot_mb02md(JOB, M, N, L, RANK_IN, C_IN, TOL)
assert_isequal(nargin('slicot_mb02md'), 7);
assert_isequal(nargout('slicot_mb02md'), 6);
//=============================================================================
M = 6;
N = 3;
L = 1;
JOB = 'B';
TOL = 0.0;
RANK_IN = 1;
C_IN = [0.80010  0.39985  0.60005  0.89999;
0.29996  0.69990  0.39997  0.82997;
0.49994  0.60003  0.20012  0.79011;
0.90013  0.20016  0.79995  0.85002;
0.39998  0.80006  0.49985  0.99016;
0.20002  0.90007  0.70009  1.02994];
[RANK_OUT, C_OUT, S, X, IWARN, INFO] = slicot_mb02md(JOB, M, N, L, RANK_IN, C_IN, TOL);
//=============================================================================
RANK_OUT_REF = int32(3);
assert_isequal(RANK_OUT, RANK_OUT_REF);
//=============================================================================
C_OUT_REF = [-0.3899     -0.7024      0.4778     -0.3555;
-0.4556      0.6615      0.1775     -0.5687;
-0.4153     -0.2407     -0.8511     -0.2128;
-0.6840      0.1059      0.1261      0.7106;
0.1809      0.3209      0.0247     -0.4139;
0.0905      0.4609     -0.3528      0.5128];
assert_isapprox(C_OUT, C_OUT_REF, 1e-4);
//=============================================================================
S_REF = [3.2281;
0.8716;
0.3697;
0.0001];
assert_isapprox(S, S_REF, 1e-4);
//=============================================================================
X_REF = [0.5003      0.8003      0.2995];
assert_isapprox(X, X_REF, 1e-4);
//=============================================================================
IWARN_REF = int32(0);  
assert_isequal(IWARN, IWARN_REF);
//=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
//=============================================================================
