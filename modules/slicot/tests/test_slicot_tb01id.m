%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% http://slicot.org/objects/software/shared/doc/TB01ID.html
% [MAXRED_OUT, A_OUT, B_OUT, C_OUT, SCALE, INFO] = slicot_tb01id(JOB, MAXRED_IN, A_IN, B_IN, C_IN)
assert_isequal(nargin('slicot_tb01id'), 5);
assert_isequal(nargout('slicot_tb01id'), 6);
%=============================================================================
N = 5;
M = 2;
P = 5;
JOB = 'A';
MAXRED_IN = 0.0;

A_IN = [0.0  1.0000e+000          0.0          0.0          0.0;
-1.5800e+006 -1.2570e+003          0.0          0.0          0.0;
3.5410e+014          0.0 -1.4340e+003          0.0 -5.3300e+011;
0.0          0.0          0.0          0.0  1.0000e+000;
0.0          0.0          0.0 -1.8630e+004 -1.4820e+000];

B_IN = [0.0          0.0;
1.1030e+002          0.0;
0.0          0.0;
0.0          0.0;
0.0  8.3330e-003];

C_IN = [1.0000e+000          0.0          0.0          0.0          0.0;
0.0          0.0  1.0000e+000          0.0          0.0;
0.0          0.0          0.0  1.0000e+000          0.0;
6.6640e-001          0.0 -6.2000e-013          0.0          0.0;
0.0          0.0 -1.0000e-003  1.8960e+006  1.5080e+002];
[MAXRED_OUT, A_OUT, B_OUT, C_OUT, SCALE, INFO] = slicot_tb01id(JOB, MAXRED_IN, A_IN, B_IN, C_IN);
%=============================================================================
MAXRED_OUT_REF = 3487501739.1198;
assert_isapprox(MAXRED_OUT, MAXRED_OUT_REF, 1e-4);
%=============================================================================
A_OUT_REF = [0.0000  10000.0000      0.0000      0.0000      0.0000;
-158.0000  -1257.0000      0.0000      0.0000      0.0000;
35410.0000      0.0000  -1434.0000      0.0000   -533.0000;
0.0000      0.0000      0.0000      0.0000    100.0000;
0.0000      0.0000      0.0000   -186.3000     -1.4820];
assert_isapprox(A_OUT, A_OUT_REF, 1e-4);
%=============================================================================
B_OUT_REF = [0.0000      0.0000;
1103.0000      0.0000;
0.0000      0.0000;
0.0000      0.0000;
0.0000     83.3300];
assert_isapprox(B_OUT, B_OUT_REF, 1e-4);
%=============================================================================
C_OUT_REF = [0.0000      0.0000      0.0000      0.0000      0.0000;
0.0000      0.0000  100000.0000      0.0000      0.0000;
0.0000      0.0000      0.0000      0.0000      0.0000;
0.0000      0.0000     -0.0000      0.0000      0.0000;
0.0000      0.0000   -100.0000      1.8960      0.0151];
assert_isapprox(C_OUT, C_OUT_REF, 1e-4);
%=============================================================================
SCALE_REF = [0.0000      0.1000  100000.0000      0.0000      0.0001];
assert_isapprox(SCALE, SCALE_REF, 1e-4);
%=============================================================================
INFO_REF = int32(0);
assert_isequal(INFO, INFO_REF);
%=============================================================================

