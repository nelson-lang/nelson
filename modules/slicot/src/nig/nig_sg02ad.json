{
  "NELSON_NAME": "slicot_sg02ad",
  "NELSON_NAMESPACE": "Slicot",
  "MODULE_NAME": "slicot",
  "SYMBOL": "sg02ad",
  "LANGUAGE": "fortran",
  "VARIABLES": [
    {
      "NAME": "DICO",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "JOBB",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "FACT",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "UPLO",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "JOBL",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "SCAL",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "SORT",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "ACC",
      "TYPE": "character",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "N",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "(int)A.getDimensions().getRows()",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "M",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "(int)B.getDimensions().getColumns()",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "P",
      "TYPE": "integer",
      "MODE": "input",
      "VALUE": "0",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "A",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_N": "(int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDA",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "E",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_N": "(int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDE",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "B",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "LDB",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "Q",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, std::max((int)A.getDimensions().getRows(), (int)P.getContentAsInteger32Scalar()))",
      "DIMENSION_N": "(int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDQ",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, std::max((int)A.getDimensions().getRows(), (int)P.getContentAsInteger32Scalar()))",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "R",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, std::max((int)P.getContentAsInteger32Scalar(), (int)B.getDimensions().getColumns()))",
      "DIMENSION_N": "(int)B.getDimensions().getColumns()"
    },
    {
      "NAME": "LDR",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, std::max((int)P.getContentAsInteger32Scalar(), (int)B.getDimensions().getColumns()))",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "L",
      "TYPE": "double_array",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "LDL",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "RCONDU",
      "TYPE": "double",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "X",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_N": "(int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDX",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "ALFAR",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "1",
      "DIMENSION_N": "2 * (int)A.getDimensions().getRows()"
    },
    {
      "NAME": "ALFAI",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "1",
      "DIMENSION_N": "2 * (int)A.getDimensions().getRows()"
    },
    {
      "NAME": "BETA",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "1",
      "DIMENSION_N": "2 * (int)A.getDimensions().getRows()"
    },
    {
      "NAME": "S",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, 2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns())",
      "DIMENSION_N": "std::max(1, 2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns())"
    },
    {
      "NAME": "LDS",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, 2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "T",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, 2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns())",
      "DIMENSION_N": "2 * (int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDT",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, 2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "U",
      "TYPE": "double_array",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, 2 * (int)A.getDimensions().getRows())",
      "DIMENSION_N": "2 * (int)A.getDimensions().getRows()"
    },
    {
      "NAME": "LDU",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(1, 2 * (int)A.getDimensions().getRows())",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "TOL",
      "TYPE": "double",
      "MODE": "input",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "IWORK",
      "TYPE": "integer_array",
      "MODE": "local",
      "VALUE": [],
      "DIMENSION_M": "std::max(1, std::max((int)B.getDimensions().getColumns(), 2 * (int)A.getDimensions().getRows()))",
      "DIMENSION_N": "1"
    },
    {
      "NAME": "DWORK",
      "TYPE": "double_array",
      "MODE": "local",
      "VALUE": [],
      "DIMENSION_M": "std::max(7*(2 * (int)A.getDimensions().getRows() + 1)+16, std::max(16 * (int)A.getDimensions().getRows(),std::max(2 * (int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns(),3 * (int)B.getDimensions().getColumns())))",
      "DIMENSION_N": "1"
    },
    {
      "NAME": "LDWORK",
      "TYPE": "integer",
      "MODE": "local",
      "VALUE": "std::max(7*(2*(int)A.getDimensions().getRows()+1)+16, std::max(16*(int)A.getDimensions().getRows(),std::max(2*(int)A.getDimensions().getRows() + (int)B.getDimensions().getColumns(), 3 * (int)B.getDimensions().getColumns())))",
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "BWORK",
      "TYPE": "integer_array",
      "MODE": "local",
      "VALUE": [],
      "DIMENSION_M": "2 * (int)A.getDimensions().getRows()",
      "DIMENSION_N": "1"
    },
    {
      "NAME": "IWARN",
      "TYPE": "integer",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    },
    {
      "NAME": "INFO",
      "TYPE": "integer",
      "MODE": "output",
      "VALUE": [],
      "DIMENSION_M": [],
      "DIMENSION_N": []
    }
  ]
}
