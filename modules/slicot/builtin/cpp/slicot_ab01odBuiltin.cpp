//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.0.0
//=============================================================================
#include <algorithm>
#include "slicot_ab01odBuiltin.hpp"
#include "Error.hpp"
#include "i18n.hpp"
#include "InputOutputArgumentsCheckers.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
#ifdef __cplusplus
extern "C"
{
#endif
    extern int
    ab01od_(const char* STAGES, const char* JOBU, const char* JOBV, int* N, int* M, double* A,
        int* LDA, double* B, int* LDB, double* U, int* LDU, double* V, int* LDV, int* NCONT,
        int* INDCON, int* KSTAIR, double* TOL, int* IWORK, double* DWORK, int* LDWORK, int* INFO);
#ifdef __cplusplus
}
#endif
//=============================================================================
// [A_OUT, B_OUT, U_OUT, V, NCONT_OUT, INDCON_OUT, KSTAIR_OUT, INFO] = slicot_ab01od(STAGES, JOBU,
// JOBV, A_IN, B_IN, U_IN, NCONT_IN, INDCON_IN, KSTAIR_IN, TOL)
//=============================================================================
ArrayOfVector
Nelson::SlicotGateway::slicot_ab01odBuiltin(int nLhs, const ArrayOfVector& argIn)
{
    ArrayOfVector retval;
    nargoutcheck(nLhs, 0, 8);
    nargincheck(argIn, 10, 10);
    // INPUT VARIABLES
    ArrayOf STAGES = argIn[0];
    Dimensions dimsSTAGES = STAGES.getDimensions();
    std::string STAGES_string = STAGES.getContentAsCString();
    const char* STAGES_ptr = STAGES_string.c_str();
    ArrayOf JOBU = argIn[1];
    Dimensions dimsJOBU = JOBU.getDimensions();
    std::string JOBU_string = JOBU.getContentAsCString();
    const char* JOBU_ptr = JOBU_string.c_str();
    ArrayOf JOBV = argIn[2];
    Dimensions dimsJOBV = JOBV.getDimensions();
    std::string JOBV_string = JOBV.getContentAsCString();
    const char* JOBV_ptr = JOBV_string.c_str();
    ArrayOf TOL = argIn[9];
    Dimensions dimsTOL = TOL.getDimensions();
    TOL.promoteType(NLS_DOUBLE);
    double* TOL_ptr = (double*)TOL.getDataPointer();
    // IN/OUT VARIABLES
    ArrayOf A = argIn[3];
    Dimensions dimsA = A.getDimensions();
    A.promoteType(NLS_DOUBLE);
    ArrayOf A_output = A;
    A_output.ensureSingleOwner();
    double* A_output_ptr = (double*)A_output.getDataPointer();
    ArrayOf B = argIn[4];
    Dimensions dimsB = B.getDimensions();
    B.promoteType(NLS_DOUBLE);
    ArrayOf B_output = B;
    B_output.ensureSingleOwner();
    double* B_output_ptr = (double*)B_output.getDataPointer();
    ArrayOf U = argIn[5];
    Dimensions dimsU = U.getDimensions();
    U.promoteType(NLS_DOUBLE);
    ArrayOf U_output = U;
    U_output.ensureSingleOwner();
    double* U_output_ptr = (double*)U_output.getDataPointer();
    ArrayOf NCONT = argIn[6];
    Dimensions dimsNCONT = NCONT.getDimensions();
    NCONT.promoteType(NLS_INT32);
    ArrayOf NCONT_output = NCONT;
    NCONT_output.ensureSingleOwner();
    int* NCONT_output_ptr = (int*)NCONT_output.getDataPointer();
    ArrayOf INDCON = argIn[7];
    Dimensions dimsINDCON = INDCON.getDimensions();
    INDCON.promoteType(NLS_INT32);
    ArrayOf INDCON_output = INDCON;
    INDCON_output.ensureSingleOwner();
    int* INDCON_output_ptr = (int*)INDCON_output.getDataPointer();
    ArrayOf KSTAIR = argIn[8];
    Dimensions dimsKSTAIR = KSTAIR.getDimensions();
    KSTAIR.promoteType(NLS_INT32);
    ArrayOf KSTAIR_output = KSTAIR;
    KSTAIR_output.ensureSingleOwner();
    int* KSTAIR_output_ptr = (int*)KSTAIR_output.getDataPointer();
    // LOCAL VARIABLES
    ArrayOf N = ArrayOf::int32VectorConstructor(1);
    int* N_ptr = (int*)N.getDataPointer();
    N_ptr[0] = (int)A.getRows();
    ArrayOf M = ArrayOf::int32VectorConstructor(1);
    int* M_ptr = (int*)M.getDataPointer();
    M_ptr[0] = (int)B.getColumns();
    ArrayOf LDA = ArrayOf::int32VectorConstructor(1);
    int* LDA_ptr = (int*)LDA.getDataPointer();
    LDA_ptr[0] = std::max(1, (int)A.getRows());
    ArrayOf LDB = ArrayOf::int32VectorConstructor(1);
    int* LDB_ptr = (int*)LDB.getDataPointer();
    LDB_ptr[0] = std::max(1, (int)A.getRows());
    ArrayOf LDU = ArrayOf::int32VectorConstructor(1);
    int* LDU_ptr = (int*)LDU.getDataPointer();
    LDU_ptr[0] = std::max(1, (int)A.getRows());
    ArrayOf LDV = ArrayOf::int32VectorConstructor(1);
    int* LDV_ptr = (int*)LDV.getDataPointer();
    LDV_ptr[0] = STAGES.getContentAsCString().compare("F") != 0
            && JOBV.getContentAsCString().compare("I") == 0
        ? std::max(1, (int)B.getColumns())
        : 1;
    ArrayOf IWORK = ArrayOf::int32Matrix2dConstructor(1, (int)B.getColumns());
    int* IWORK_ptr = (int*)IWORK.getDataPointer();
    ArrayOf DWORK = ArrayOf::doubleMatrix2dConstructor(1,
        std::max(1,
            std::max((int)A.getRows(), (int)B.getColumns())
                + std::max((int)A.getRows(), 3 * (int)B.getColumns())));
    double* DWORK_ptr = (double*)DWORK.getDataPointer();
    ArrayOf LDWORK = ArrayOf::int32VectorConstructor(1);
    int* LDWORK_ptr = (int*)LDWORK.getDataPointer();
    LDWORK_ptr[0] = STAGES.getContentAsCString().compare("B") != 0
        ? std::max(1,
            std::max((int)A.getRows(), (int)B.getColumns())
                + std::max((int)A.getRows(), 3 * (int)B.getColumns()))
        : std::max(1,
            std::max((int)A.getRows(), (int)B.getColumns())
                + std::max((int)A.getRows(), (int)B.getColumns()));
    // OUTPUT VARIABLES
    ArrayOf V_output = ArrayOf::doubleMatrix2dConstructor(
        (indexType)std::max(1, (int)B.getColumns()), (indexType)(int)B.getColumns());
    double* V_output_ptr = (double*)V_output.getDataPointer();
    ArrayOf INFO_output = ArrayOf::int32VectorConstructor(1);
    int* INFO_output_ptr = (int*)INFO_output.getDataPointer();
    // CHECK INPUT VARIABLES DIMENSIONS
    if (!dimsSTAGES.isScalar()) {
        Error(_W("Input argument #1: scalar expected."));
    }
    if (!dimsJOBU.isScalar()) {
        Error(_W("Input argument #2: scalar expected."));
    }
    if (!dimsJOBV.isScalar()) {
        Error(_W("Input argument #3: scalar expected."));
    }
    Dimensions dimsA_expected(std::max(1, (int)A.getRows()), (int)A.getRows());
    if (!dimsA.equals(dimsA_expected)) {
        Error(_("Input argument #4: wrong size.") + " " + dimsA_expected.toString() + " "
            + "expected" + ".");
    }
    Dimensions dimsB_expected(std::max(1, (int)A.getRows()), (int)B.getColumns());
    if (!dimsB.equals(dimsB_expected)) {
        Error(_("Input argument #5: wrong size.") + " " + dimsB_expected.toString() + " "
            + "expected" + ".");
    }
    Dimensions dimsU_expected(std::max(1, (int)A.getRows()), (int)A.getRows());
    if (!dimsU.equals(dimsU_expected)) {
        Error(_("Input argument #6: wrong size.") + " " + dimsU_expected.toString() + " "
            + "expected" + ".");
    }
    if (!dimsNCONT.isScalar()) {
        Error(_W("Input argument #7: scalar expected."));
    }
    if (!dimsINDCON.isScalar()) {
        Error(_W("Input argument #8: scalar expected."));
    }
    Dimensions dimsKSTAIR_expected(1, (int)A.getRows());
    if (!dimsKSTAIR.equals(dimsKSTAIR_expected)) {
        Error(_("Input argument #9: wrong size.") + " " + dimsKSTAIR_expected.toString() + " "
            + "expected" + ".");
    }
    if (!dimsTOL.isScalar()) {
        Error(_W("Input argument #10: scalar expected."));
    }
    // CALL EXTERN FUNCTION
    try {
        ab01od_(STAGES_ptr, JOBU_ptr, JOBV_ptr, N_ptr, M_ptr, A_output_ptr, LDA_ptr, B_output_ptr,
            LDB_ptr, U_output_ptr, LDU_ptr, V_output_ptr, LDV_ptr, NCONT_output_ptr,
            INDCON_output_ptr, KSTAIR_output_ptr, TOL_ptr, IWORK_ptr, DWORK_ptr, LDWORK_ptr,
            INFO_output_ptr);
    } catch (const std::runtime_error&) {
        Error("ab01od function fails.");
    }
    // ASSIGN OUTPUT VARIABLES
    if (nLhs > 0) {
        retval << A_output;
    }
    if (nLhs > 1) {
        retval << B_output;
    }
    if (nLhs > 2) {
        retval << U_output;
    }
    if (nLhs > 3) {
        retval << V_output;
    }
    if (nLhs > 4) {
        retval << NCONT_output;
    }
    if (nLhs > 5) {
        retval << INDCON_output;
    }
    if (nLhs > 6) {
        retval << KSTAIR_output;
    }
    if (nLhs > 7) {
        retval << INFO_output;
    }
    return retval;
}
//=============================================================================
