<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>fr_FR</language>
    <keyword>bdschur</keyword>
    <short_description
  >Factorisation de Schur en blocs diagonaux.</short_description>
    <syntax>
        <syntax_item>[T, B] = bdschur(A)</syntax_item>
        <syntax_item>[T, B] = bdschur(A, CONDMAX)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>A</param_name>
            <param_description>Matrice carrée réelle.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>CONDMAX</param_name>
            <param_description
      >borne supérieure sur le nombre de condition de T. Par défaut, CONDMAX = 1e4.</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>T</param_name>
            <param_description>Matrice de transformation.</param_description>
        </param_output_item>
        <param_output_item>
            <param_name>B</param_name>
            <param_description
      >Matrice diagonale par blocs obtenue par la transformation B = T \ A * T.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p>
            <b
      >[T, B] = bdschur(A, CONDMAX)</b> calcule une matrice de transformation <b
      >T</b>, où <b
      >B = T \ A * T</b> donne une matrice diagonale par blocs, chaque bloc étant une matrice de Schur quasi triangulaire supérieure, assurant la diagonalisation de la matrice A tout en préservant certaines propriétés structurelles.</p>
        </description>
        <used_function>MB03RD</used_function>
        <bibliography
  >http://slicot.org/objects/software/shared/doc/MB03RD.html</bibliography>
        <examples>
            <example_item>
                <example_item_type>nelson</example_item_type>
                <example_item_description />
                <example_item_data
        runnable="cli"
      ><![CDATA[
A = [1.   -1.    1.    2.    3.    1.    2.    3.;
   1.    1.    3.    4.    2.    3.    4.    2.;
   0.    0.    1.   -1.    1.    5.    4.    1.;
   0.    0.    0.    1.   -1.    3.    1.    2.;
   0.    0.    0.    1.    1.    2.    3.   -1.;
   0.    0.    0.    0.    0.    1.    5.    1.;
   0.    0.    0.    0.    0.    0.    0.99999999   -0.99999999;
   0.    0.    0.    0.    0.    0.    0.99999999    0.99999999];
[T, B] = bdschur(A)
]]></example_item_data>
            </example_item>
        </examples>
        <see_also>
            <see_also_item>
                <link linkend="${slicot}slicot_mb03rd">slicot_mb03rd</link>
            </see_also_item>
        </see_also>
        <history>
            <history_item>
                <history_version>1.0.0</history_version>
                <history_description>version initiale</history_description>
            </history_item>
        </history>
        <authors>
            <author_item>SLICOT Documentation</author_item>
        </authors>
    </xmldoc>
