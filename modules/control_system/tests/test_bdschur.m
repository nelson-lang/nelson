%=============================================================================
% Copyright (c) 2023-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = [1.   -1.    1.    2.    3.    1.    2.    3.;
1.    1.    3.    4.    2.    3.    4.    2.;
0.    0.    1.   -1.    1.    5.    4.    1.;
0.    0.    0.    1.   -1.    3.    1.    2.;
0.    0.    0.    1.    1.    2.    3.   -1.;
0.    0.    0.    0.    0.    1.    5.    1.;
0.    0.    0.    0.    0.    0.    0.99999999   -0.99999999;
0.    0.    0.    0.    0.    0.    0.99999999    0.99999999];

[T, B] = bdschur(A);

T_REF = [1.0000         0         0         0         0         0    0.9045    0.1957;
0    1.0000         0         0         0         0   -0.3015    0.9755;
0         0    0.8165   -0.0000   -0.5768   -0.0156   -0.3015    0.0148;
0         0   -0.4082    0.7071   -0.5768   -0.0156    0.0000   -0.0534;
0         0   -0.4082   -0.7071   -0.5768   -0.0156    0.0000    0.0801;
0         0         0         0   -0.0276    0.9805    0.0000    0.0267;
0         0         0         0    0.0332   -0.0066   -0.0000   -0.0000;
0         0         0         0    0.0011    0.1948    0.0000   -0.0000];
B_REF = [1.0000   -1.0000   -1.2247   -0.7071   -3.4186    1.4577         0         0;
1.0000    1.0000    0.0000    1.4142   -5.1390    3.1637         0         0;
0         0    1.0000   -1.7321   -0.0016    2.0701         0         0;
0         0    0.5774    1.0000    0.7516    1.1379         0         0;
0         0         0         0    1.0000   -5.8606         0         0;
0         0         0         0    0.1706    1.0000         0         0;
0         0         0         0         0         0    1.0000   -0.8850;
0         0         0         0         0         0         0    1.0000];
assert_isapprox(T, T_REF, 1e-4);
assert_isapprox(B, B_REF, 1e-4);
%=============================================================================
[T, B] = bdschur([]);
assert_isequal(T, []);
assert_isequal(B, []);
%=============================================================================
