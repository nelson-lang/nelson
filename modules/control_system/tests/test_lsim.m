%=============================================================================
% Copyright (c) 2023-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--ADV-CLI MODE-->
%=============================================================================
A = [-10 -20 -30;1  0  0; 0  1  0];
B = [1;   0;   0];
C = [0   0   1];
D = 0;
T = [0:0.1:1];
U = zeros(size(T, 1), size(T, 2));    
X0 = [0.1 0.1 0.1];
sys = ss(A, B, C, D);    
[x, t, y] = lsim(sys, U, T, X0);

assert_isequal(size(x), [11 1]);
assert_isequal(size(t), [11 1]);
assert_isequal(size(y), [11 3]);

x_REF = [0.1000;
    0.1097;
    0.1168;
    0.1198;
    0.1189;
    0.1143;
    0.1068;
    0.0971;
    0.0860;
    0.0739;
    0.0616];
 t_REF = [0;
 0.1000;
 0.2000;
 0.3000;
 0.4000;
 0.5000;
 0.6000;
 0.7000;
 0.8000;
 0.9000;
 1.0000];
 y_REF = [    0.1000    0.1000    0.1000;
 -0.2849    0.0876    0.1097;
 -0.4067    0.0516    0.1168;
 -0.4098    0.0101    0.1198;
 -0.3613   -0.0287    0.1189;
 -0.2927   -0.0615    0.1143;
 -0.2193   -0.0871    0.1068;
 -0.1485   -0.1054    0.0971;
 -0.0843   -0.1170    0.0860;
 -0.0283   -0.1225    0.0739;
  0.0187   -0.1230    0.0616];
  
 assert_isapprox(x, x_REF, 1e-3);
 assert_isapprox(t, t_REF, 1e-3);
 assert_isapprox(y, y_REF, 1e-3);
%=============================================================================
f = figure();
lsim(sys, U, T, X0);
%=============================================================================
% Plot simulated time response of dynamic
A = [-1.5  -0.2   1.0;
     -0.2  -1.7   0.6;
      1.0   0.6  -1.4];
B = [ 1.5  0.6;
     -1.8  1.0;
      0    0  ];
C = [ 0    -0.5 -0.1;
      0.35 -0.1 -0.15
      0.65  0    0.6];
D = [ 0.5  0;
      0.05 0.75
      0    0];
sys = ss(A,B,C,D);
Tf = 10;
Ts = 0.1;
[uSq,t] = gensig("square",4,Tf,Ts);
uP = gensig("pulse",3,Tf,Ts);
u = [uSq uP];
f = figure();
lsim(sys,u,t);
%=============================================================================
f = figure();
A = [-1.5 -3;
      3   -1];
B = [1.3; 0];
C = [1.15 2.3];
D = 0;
          
sys = ss(A,B,C,D);
x0 = [-0.2 0.3];
t = 0:0.05:8;
u = zeros(length(t),1);
u(t>=2) = 1;
lsim(sys,u,t,x0)
grid on
%=============================================================================
