%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
format('shortE')
%=============================================================================
A = complex(0, 0);
R = evalc('A');
REF = '
A =

   0.0000e+00 + 0.0000e+00i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(0, 1);
R = evalc('A');
REF = '
A =

   0.0000e+00 + 1.0000e+00i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(0, -eps);
R = evalc('A');
REF = '
A =

   0.0000e+00 - 2.2204e-16i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(1.8e99, -eps);
R = evalc('A');
REF =  '
A =

   1.8000e+99 - 2.2204e-16i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(2, 3);
R = evalc('A');
REF = '
A =

   2.0000e+00 + 3.0000e+00i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(1e2, pi);
R = evalc('A');
REF = '
A =

   1.0000e+02 + 3.1416e+00i

';
assert_isequal(R, REF)
%=============================================================================
rng('default')
A = complex(rand(2, 2), 1);
A(2, 2) = NaN;
R = evalc('A');
REF = '
A =

   8.1472e-01 + 1.0000e+00i   1.2699e-01 + 1.0000e+00i
   9.0579e-01 + 1.0000e+00i          NaN + 0.0000e+00i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex([6.5574e-04, 6.5574e-04], pi)');
REF =  '
A =

   6.5574e-04 + 3.1416e+00i   6.5574e-04 + 3.1416e+00i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex(ones(2,2), pi*1e6)');
REF = '
A =

   1.0000e+00 + 3.1416e+06i   1.0000e+00 + 3.1416e+06i
   1.0000e+00 + 3.1416e+06i   1.0000e+00 + 3.1416e+06i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex(ones(2,2)*1000,pi*1e6)');
REF = '
A =

   1.0000e+03 + 3.1416e+06i   1.0000e+03 + 3.1416e+06i
   1.0000e+03 + 3.1416e+06i   1.0000e+03 + 3.1416e+06i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = [0.3729   6.5574e-04    0.1393 0]+ eps * i');
REF = '
A =

  Columns 1 through 2

   3.7290e-01 + 2.2204e-16i   6.5574e-04 + 2.2204e-16i

  Columns 3 through 4

   1.3930e-01 + 2.2204e-16i   0.0000e+00 + 2.2204e-16i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(eye(3,3)*pi,-Inf);
A(2,2) = pi*i;
R = evalc('A');
REF =  '
A =

  Columns 1 through 2

   3.1416e+00 -        Infi   0.0000e+00 -        Infi
   0.0000e+00 -        Infi   0.0000e+00 + 3.1416e+00i
   0.0000e+00 -        Infi   0.0000e+00 -        Infi

  Column 3

   0.0000e+00 -        Infi
   0.0000e+00 -        Infi
   3.1416e+00 -        Infi

';
assert_isequal(R, REF)
%=============================================================================
