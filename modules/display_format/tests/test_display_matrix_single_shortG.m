%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
format('shortG')
%=============================================================================
R = evalc('A = single(1)');
REF =  '
A =

  single

     1

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(10)');
REF =  '
A =

  single

    10

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e2)');
REF =  '
A =

  single

   100

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e3)');
REF =  '
A =

  single

        1000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e4)');
REF =  '
A =

  single

       10000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e5)');
REF =  '
A =

  single

      100000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e6)');
REF =  '
A =

  single

     1000000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e7)');
REF =  '
A =

  single

    10000000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e8)');
REF =  '
A =

  single

   100000000

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(1e9)');
REF =  '
A =

  single

        1e+09

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(pi)');
REF =  '
A =

  single

       3.1416

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(NaN)');
REF =  '
A =

  single

   NaN

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(Inf)');
REF =  '
A =

  single

   Inf

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(-Inf)');
REF =  '
A =

  single

  -Inf

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single([0 eps])');
REF =  '
A =

  1×2 single row vector

            0   2.2204e-16

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single([1e9 1e99])');
REF =  '
A =

  1×2 single row vector

        1e+09          Inf

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single([6.5574e-04, 6.5574e-04])');
REF = '
A =

  1×2 single row vector

   0.00065574   0.00065574

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single([0.3729   6.5574e-04    0.1393])');
REF = '
A =

  1×3 single row vector

       0.3729   0.00065574       0.1393

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(eye(3,3))');
REF = '
A =

  3×3 single matrix

     1     0     0
     0     1     0
     0     0     1

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single(eye(3,3) * eps)');
REF = '
A =

  3×3 single matrix

   2.2204e-16            0            0
            0   2.2204e-16            0
            0            0   2.2204e-16

';
assert_isequal(R, REF)
%=============================================================================
A = [0.2220, 1, 2;
     0,  0.2220, 4;
     5, 6, 0.2220];
R = evalc('A = single(A)');
REF = '
A =

  3×3 single matrix

        0.222            1            2
            0        0.222            4
            5            6        0.222

';
assert_isequal(R, REF)
%=============================================================================
A = ones(3,20);
R = evalc('A = single(A)');
REF = '
A =

  3×20 single matrix

  Columns 1 through 13

     1     1     1     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1     1     1     1
     1     1     1     1     1     1     1     1     1     1     1     1     1

  Columns 14 through 20

     1     1     1     1     1     1     1
     1     1     1     1     1     1     1
     1     1     1     1     1     1     1

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = single([Inf Inf])');
REF =  '
A =

  1×2 single row vector

   Inf   Inf

';
assert_isequal(R, REF)
%=============================================================================
