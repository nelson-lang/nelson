%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--ENGLISH IMPOSED-->
%=============================================================================
format('short')
%=============================================================================
R = size([]);
REF = [0 0];
assert_isequal(R, REF);
R = evalc('R = size([])');
REF = '
R =

     0     0

';
assert_isequal(R, REF);
%=============================================================================
R = size({});
REF = [0 0];
assert_isequal(R, REF);
R = evalc('R = size({})');
REF = '
R =

     0     0

';
assert_isequal(R, REF);
%=============================================================================
R = size(struct([]));
REF = [0 0];
assert_isequal(R, REF);
R = evalc('R = size(struct([]))');
REF = '
R =

     0     0

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('R = ones(1, 2, 0)');
REF = '
R =

  1×2×0 empty double array

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('R = zeros(5, 0, 2, 4)');
REF = '
R =

  5×0×2×4 empty double array

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('R = cell(3, 5, 8, 13, 0)');
REF = '
R =

  5-D empty cell array

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('R = struct(rand(1, 2, 0))');
REF = '
R =

  1×2×0 empty struct array with no fields.

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('R = zeros(4, 3, 0, 1)');
REF = '
R =

  4×3×0 empty double array

';
assert_isequal(R, REF);
%=============================================================================
