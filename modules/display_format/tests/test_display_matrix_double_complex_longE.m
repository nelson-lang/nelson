%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
rng('default')
format('longE')
%=============================================================================
A = complex(1.8e99, -eps);
R = evalc('A');
REF = '
A =

      1.800000000000000e+99 - 2.220446049250313e-16i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(2, 3);
R = evalc('A');
REF = '
A =

      2.000000000000000e+00 + 3.000000000000000e+00i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(1e2, pi);
R = evalc('A');
REF = '
A =

      1.000000000000000e+02 + 3.141592653589793e+00i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(rand(2, 2), 1);
A(2, 2) = NaN;
R = evalc('A');
REF =  '
A =

  Column 1

      8.147236919030547e-01 + 1.000000000000000e+00i
      9.057919341139495e-01 + 1.000000000000000e+00i

  Column 2

      1.269868118688464e-01 + 1.000000000000000e+00i
                        NaN + 0.000000000000000e+00i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex([6.5574e-04, 6.5574e-04], pi)');
REF = '
A =

  Column 1

      6.557400000000000e-04 + 3.141592653589793e+00i

  Column 2

      6.557400000000000e-04 + 3.141592653589793e+00i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex(ones(2,2), pi*1e6)');
REF = '
A =

  Column 1

      1.000000000000000e+00 + 3.141592653589793e+06i
      1.000000000000000e+00 + 3.141592653589793e+06i

  Column 2

      1.000000000000000e+00 + 3.141592653589793e+06i
      1.000000000000000e+00 + 3.141592653589793e+06i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = complex(ones(2,2)*1000,pi*1e6)');
REF =  '
A =

  Column 1

      1.000000000000000e+03 + 3.141592653589793e+06i
      1.000000000000000e+03 + 3.141592653589793e+06i

  Column 2

      1.000000000000000e+03 + 3.141592653589793e+06i
      1.000000000000000e+03 + 3.141592653589793e+06i

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = [0.3729   6.5574e-04    0.1393]+ eps * i');
REF = '
A =

  Column 1

      3.729000000000000e-01 + 2.220446049250313e-16i

  Column 2

      6.557400000000000e-04 + 2.220446049250313e-16i

  Column 3

      1.393000000000000e-01 + 2.220446049250313e-16i

';
assert_isequal(R, REF)
%=============================================================================
A = complex(eye(3,3)*pi,-Inf);
A(2,2) = pi*i;
R = evalc('A');
REF =  '
A =

  Column 1

      3.141592653589793e+00 -                   Infi
      0.000000000000000e+00 -                   Infi
      0.000000000000000e+00 -                   Infi

  Column 2

      0.000000000000000e+00 -                   Infi
      0.000000000000000e+00 + 3.141592653589793e+00i
      0.000000000000000e+00 -                   Infi

  Column 3

      0.000000000000000e+00 -                   Infi
      0.000000000000000e+00 -                   Infi
      3.141592653589793e+00 -                   Infi

';
assert_isequal(R, REF)
%=============================================================================
