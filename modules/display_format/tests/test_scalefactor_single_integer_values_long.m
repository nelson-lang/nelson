%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
format('long');
%=============================================================================
A = single([1 2 3]);
R = evalc('A');
REF =       '
A =

  1×3 single row vector

     1     2     3

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 -10 10]);
R = evalc('A');
REF = '
A =

  1×3 single row vector

     1   -10    10

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 10 100]);
R = evalc('A');
REF =    '
A =

  1×3 single row vector

     1    10   100

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 10 1000]);
R = evalc('A');
REF =   '
A =

  1×3 single row vector

           1          10        1000

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 10 1e5]);
R = evalc('A');
REF =    '
A =

  1×3 single row vector

           1          10      100000

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 10 1e6]);
R = evalc('A');
REF =  '
A =

  1×3 single row vector

           1          10     1000000

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 10 1e7]);
R = evalc('A');
REF =     '
A =

  1×3 single row vector

           1          10    10000000

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 1000 1e8]);
R = evalc('A');
REF =  '
A =

  1×3 single row vector

           1        1000   100000000

';
assert_isequal(R, REF);
%=============================================================================
A = single(-[1 1000 1e8]);
R = evalc('A');
REF =   '
A =

  1×3 single row vector

          -1       -1000  -100000000

';
assert_isequal(R, REF);
%=============================================================================
A = single([1 1000 1e9]);
R = evalc('A');
REF =  '
A =

  1×3 single row vector

   1.0e+09 *

   0.0000000   0.0000010   1.0000000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e4 1.1e4 1.2e4])');
REF =  '
A =

  1×3 single row vector

       10000       11000       12000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e5 1.1e5 1.2e5])');
REF =  '
A =

  1×3 single row vector

      100000      110000      120000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e6 1.1e6 1.2e6])');
REF = '
A =

  1×3 single row vector

     1000000     1100000     1200000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e7 1.1e7 1.2e7])');
REF = '
A =

  1×3 single row vector

    10000000    11000000    12000000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e8 1.1e8 1.2e8])');
REF =  '
A =

  1×3 single row vector

   100000000   110000000   120000000

';
assert_isequal(R, REF);
%=============================================================================
R = evalc('A = single([1e9 1.1e9 1.2e9])');
REF = '
A =

  1×3 single row vector

   1.0e+09 *

   1.0000000   1.1000000   1.2000000

';
assert_isequal(R, REF);
%=============================================================================