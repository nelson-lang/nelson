%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
format('rational')
%=============================================================================
R = evalc('A = {1}');
REF =  '
A =

  1×1 cell array

    {[1]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {pi}');
REF =  '
A =

  1×1 cell array

    {[355/113]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-pi}');
REF =  '
A =

  1×1 cell array

    {[-355/113]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {NaN}');
REF = '
A =

  1×1 cell array

    {[0/0]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-Inf}');
REF =  '
A =

  1×1 cell array

    {[-1/0]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {Inf}');
REF =  '
A =

  1×1 cell array

    {[1/0]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {eps}');
REF =  '
A =

  1×1 cell array

    {[*]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-eps}');
REF =  '
A =

  1×1 cell array

    {[*]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(pi, pi)}');
REF =  '
A =

  1×1 cell array

    {[355/113 + 355/113i]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(1, 0)}');
REF = '
A =

  1×1 cell array

    {[1 + 0i]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(NaN, NaN)}');
REF = '
A =

  1×1 cell array

    {[0/0 + 0/0i]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(1.8e99, -eps)}');
REF = '
A =

  1×1 cell array

    {[* - 1/4503599627370496i]}

';
assert_isequal(R, REF)
%=============================================================================
