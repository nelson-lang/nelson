%=============================================================================
% Copyright (c) 2017 Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <-- Issue URL -->
% https://github.com/nelson-lang/nelson/issues/1346
% <-- Short Description -->
% [display] integer in cell are displayed as double and not as integer.
%=============================================================================
% <--ENGLISH IMPOSED-->
%=============================================================================
A = {intmax('uint64'), intmax('uint32')};
R = evalc('A');
REF = '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format short
R = evalc('A');
REF = '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format long 
R = evalc('A');
REF =   '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format shortE 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format longE 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format shortEng 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format longEng 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format('+') 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[+]}    {[+]}

';
assert_isequal(R, REF);
%=============================================================================
format rational 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[18446744073709551615]}    {[4294967295]}

';
assert_isequal(R, REF);
%=============================================================================
format hex 
R = evalc('A');
REF =  '
A =

  1×2 cell array

    {[43f0000000000000]}    {[41efffffffe00000]}

';
assert_isequal(R, REF);
%=============================================================================
