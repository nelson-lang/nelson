%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
format('bank')
%=============================================================================
R = evalc('A = {1}');
REF =   '
A =

  1×1 cell array

    {[1.00]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {pi}');
REF = '
A =

  1×1 cell array

    {[3.14]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-pi}');
REF =  '
A =

  1×1 cell array

    {[-3.14]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-Inf}');
REF =  '
A =

  1×1 cell array

    {[-Inf]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {Inf}');
REF = '
A =

  1×1 cell array

    {[Inf]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {eps}');
REF = '
A =

  1×1 cell array

    {[0.00]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {-eps}');
REF = '
A =

  1×1 cell array

    {[-0.00]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(pi, pi)}');
REF =  '
A =

  1×1 cell array

    {[3.14]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(1, 0)}');
REF = '
A =

  1×1 cell array

    {[1.00]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(1.8e99, -eps)}');
REF =   '
A =

  1×1 cell array

    {1×1 double}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {NaN}');
REF = '
A =

  1×1 cell array

    {[NaN]}

';
assert_isequal(R, REF)
%=============================================================================
R = evalc('A = {complex(NaN, NaN)}');
REF = '
A =

  1×1 cell array

    {[NaN]}

';
assert_isequal(R, REF)
%=============================================================================
