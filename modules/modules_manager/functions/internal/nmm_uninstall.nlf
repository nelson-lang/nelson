//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function nmm_uninstall(varargin)
    if (length(varargin) ~= 1)
        error(_('Wrong number of input arguments.'));
    end
    module_or_directory = varargin{1};
    if ~ischar(module_or_directory)
        error(_('#2 argument: characters expected.'));    
    end
    [module_name, module_data] = nmm_find_installed_module(module_or_directory);
    if isempty(module_data)
        error(_('module name or existing directory installed is expected.'))
    end
    if ismodule(module_name)
        removemodule(module_name);
    end

    modules = nmm_list();
    modified_modules = struct();
    for m  = fieldnames(modules)'
        if ~strcmp(module_name, m{1})
            modified_modules.(m{1}) =  modules.(m{1});
        end            
    end
    p = usermodulesdir();
    modules_json_path = [p, 'modules.json'];
    txt = jsonprettyprint(jsonencode(modified_modules));
    filewrite(modules_json_path, txt);
    if startsWith(module_data.path, p)
        parent_dir = [module_data.path, '..'];
        d = dir(parent_dir);
        if length(d) == 3
            rmdir(parent_dir, 's');
        else
            rmdir(module_data.path, 's');
        end
    end
endfunction
//=============================================================================
