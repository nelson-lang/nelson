//=============================================================================
// Copyright (c) 2017 Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
addpath([nelsonroot(), '/modules/error_manager/tests']);
ME = test_MException_1();
assert_isequal(fieldnames(ME), {'identifier'; 'message'; 'cause'; 'stack'; 'Correction'})
assert_isequal(ME.message, 'Input must be char.');
assert_isequal(ME.identifier, 'sayHello:inputError');
assert_isequal(ME.cause, {})
assert_isequal(size(ME.stack), [0 1])
assert_isequal(class(ME.stack), 'struct')
assert_isequal(fieldnames(ME.stack), {'file'; 'name'; 'line'})
assert_isequal(ME.Correction, {})
//=============================================================================
ME = test_MException_2();
assert_isequal(fieldnames(ME), {'identifier'; 'message'; 'cause'; 'stack'; 'Correction'})
assert_isequal(ME.message, 'Input must be char.');
assert_isequal(ME.identifier, 'sayHello:inputError');
assert_isequal(ME.cause, {})
assert_isequal(class(ME.stack), 'struct')
n = numel(ME.stack);
if (n == 4 || n == 6 || n == 8)
    assert_isequal(ME.stack(1).name, 'test3')
    assert_isequal(ME.stack(1).line, 44)
    assert_isequal(ME.stack(2).name, 'test2')
    assert_isequal(ME.stack(2).line, 39)
    assert_isequal(ME.stack(3).name, 'test1')
    assert_isequal(ME.stack(3).line, 35)
    assert_isequal(ME.stack(4).name, 'test_MException_2')
    assert_isequal(ME.stack(4).line, 28)
else
    error('wrong ME.stack size.')
end
assert_isequal(ME.Correction, {})
//=============================================================================
