//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
#pragma once
//=============================================================================
#include <cstring>
#include <ctype.h>
#include "ArrayOf.hpp"
//=============================================================================
namespace Nelson {
//=============================================================================
enum OutputType
{
    AS_STRING,
    AS_DOUBLE,
    AS_INT64,
    AS_UINT64,
    AS_MIXED,
    AS_NONE
};
//=============================================================================
static int
flagChar(char c)
{
    return ((c == '#') || (c == '0') || (c == '-') || (c == ' ') || (c == '+'));
}
//=============================================================================
static int
convspec(wchar_t c)
{
    return ((c == 'd') || (c == 'i') || (c == 'o') || (c == 'u') || (c == 'x') || (c == 'e')
        || (c == 'f') || (c == 'g') || (c == 'c') || (c == 's'));
}
//=============================================================================
static char*
validateScanFormatSpec(char* cp)
{
    if (*cp == '%') {
        return cp + 1;
    }
    while ((*cp) && flagChar(*cp)) {
        cp++;
    }
    while ((*cp) && isdigit(*cp)) {
        cp++;
    }
    while ((*cp) && (*cp == '.')) {
        cp++;
    }
    while ((*cp) && isdigit(*cp)) {
        cp++;
    }
    if ((*cp) && (convspec(*cp) || (*cp == 'l'))) {
        return cp + 1;
    }
    return nullptr;
}
//=============================================================================
//=============================================================================

}
//=============================================================================
