//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
A = all(logical(ones(99, 0)));
assert_isequal(size(A), [1 0]);
A = all(logical(ones(0, 99)));
REF = logical([1:99]);
assert_isequal(A, REF);
A = all(logical(ones(0, 0)));
assert_isequal(A, true);
//=============================================================================
A = all(logical(ones(99, 0)), 1);
assert_isequal(size(A), [1 0]);
A = all(logical(ones(99, 0)), 2);
assert_isequal(A, logical(ones(99, 1)));
A = all(logical(ones(99, 0)), 3);
assert_isequal(size(A), [99 0]);
//=============================================================================
A = all(logical(ones(0, 0)), 1);
assert_isequal(size(A), [1 0]);
A = all(logical(ones(0, 0)), 2);
assert_isequal(size(A), [0 1]);
A = all(logical(ones(0, 0)), 3);
assert_isequal(size(A), [0 0]);
//=============================================================================
A = all(logical(ones(0, 99)), 1);
assert_isequal(A, logical(ones(1, 99)));
A = all(logical(ones(0, 99)), 2);
assert_isequal(size(A), [0 1]);
A = all(logical(ones(0, 99)), 3);
assert_isequal(size(A), [0 99]);
//=============================================================================
A = all(logical(eye(33, 44)));
assert_isequal(A, false(1, 44));
A = all(logical(eye(33, 44)), 1);
assert_isequal(A, false(1, 44));
A = all(logical(eye(33, 44)), 2);
assert_isequal(A, false(33, 1));
A = all(logical(eye(33, 44)), 3);
assert_isequal(A, logical(eye(33, 44)));
//=============================================================================

