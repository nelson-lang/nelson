<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>en_US</language>
    <keyword>assert</keyword>
    <short_description>Check that condition is true.</short_description>
    <syntax>
        <syntax_item>assert(x)</syntax_item>
        <syntax_item>r = assert(x)</syntax_item>
        <syntax_item>[r, msg] = assert(x)</syntax_item>
        <syntax_item>assert(x, err_msg)</syntax_item>
        <syntax_item>r = assert(x, err_msg)</syntax_item>
        <syntax_item>[r, msg] = assert(x, err_msg)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>x</param_name>
            <param_description
      >a logical value to be tested for truthfulness.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>err_msg</param_name>
            <param_description
      >a string containing the custom error message to display in case of assertion failure (optional).</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>r</param_name>
            <param_description
      >a logical value: true if the assertion passes, false otherwise.</param_description>
        </param_output_item>
        <param_output_item>
            <param_name>msg</param_name>
            <param_description
      >a string containing the error message. If x == true, then msg == ''. If x == false, then msg contains the assertion failure message.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p><b>assert</b> raises an error if the input value is false.</p>
        <p
    >This function also raises an error if the input is not a logical value, ensuring type safety.</p>
        <p>When the optional <b
      >err_msg</b> parameter is provided, it will be used as the error message instead of the default message when the assertion fails.</p>
        <p
    >This is the fundamental assertion function that forms the basis for testing conditions in programs and unit tests.</p>
    </description>
    <used_function />
    <bibliography />
    <examples>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Test assertion failure with custom error message:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[try
    assert(4 == 3, _('error for comparison.'))
catch ME
    disp(['Error: ' ME.message])
end]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Test successful assertion:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[assert(5 > 3);
disp('Assertion passed: 5 is greater than 3')]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Using return values to handle assertion results:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[[r, msg] = assert(false, 'This condition is false');
if ~r
    disp(['Assertion failed: ' msg])
end]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Basic assertion without custom message:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[x = 10;
assert(x > 0)  % Will pass
assert(x < 0)  % Will fail with default message]]></example_item_data>
        </example_item>
    </examples>
    <see_also>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_istrue"
      >assert_istrue</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_isfalse"
      >assert_isfalse</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_isequal"
      >assert_isequal</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_checkerror"
      >assert_checkerror</link>
        </see_also_item>
    </see_also>
    <history>
        <history_item>
            <history_version>1.0.0</history_version>
            <history_description>initial version</history_description>
        </history_item>
    </history>
    <authors>
        <author_item>Allan CORNET</author_item>
    </authors>
</xmldoc>
