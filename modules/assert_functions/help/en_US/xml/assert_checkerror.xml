<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
	<copyright>SAME AS NELSON SOFTWARE</copyright>

	<language>en_US</language>
	<keyword>assert_checkerror</keyword>
	<short_description
  >Check that an command raises the expected error.</short_description>

	<syntax>
		<syntax_item>assert_checkerror(command, expected_error_message)</syntax_item>
		<syntax_item
    >r = assert_checkerror(command, expected_error_message)</syntax_item>
		<syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message)</syntax_item>

		<syntax_item
    >assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
		<syntax_item
    >r = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
		<syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>

	</syntax>
	
	<param_input>
		<param_input_item>
			<param_name>command</param_name>
			<param_description>a string value</param_description>
		</param_input_item>

		<param_input_item>
			<param_name>expected_error_message</param_name>
			<param_description>a string, the expected error message.</param_description>
		</param_input_item>

		<param_input_item>
			<param_name>expected_error_identifier</param_name>
			<param_description>a string, the expected error identifier.</param_description>
		</param_input_item>

	</param_input>

	<param_output>
		<param_output_item>
			<param_name>res</param_name>
			<param_description>a logical value</param_description>
		</param_output_item>
		<param_output_item>
			<param_name>msg</param_name>
			<param_description
      >a string value, the error message. If res == true, then errormsg == ''. If res == false, then msg contains the error message.</param_description>
		</param_output_item>
	</param_output>


	<description
  >If the command does not raise the expected error message, then assert_checkerror raises an error.</description>

	<used_function />
	<bibliography />

<examples>
	<example_item>
		<example_item_type>nelson</example_item_type>
		<example_item_description />
		<example_item_data
      ><![CDATA[assert_checkerror('cos', _('Wrong number of input arguments.'));]]>
		</example_item_data>
	</example_item>

	<example_item>
		<example_item_type>nelson</example_item_type>
		<example_item_description />
		<example_item_data
      ><![CDATA[assert_checkerror('cos', _('Wrong error message.'));]]>
		</example_item_data>
	</example_item>

	<example_item>
		<example_item_type>nelson</example_item_type>
		<example_item_description />
		<example_item_data
      ><![CDATA[assert_checkerror('mustBeFinite(NaN)', _('Value must be finite.'), 'Nelson:validators:mustBeFinite')]]>
		</example_item_data>
	</example_item>

</examples>

	<see_also>
		<see_also_item>
			<link linkend="${assert_functions}assert_istrue">assert_istrue</link>
		</see_also_item>
		<see_also_item>
			<link linkend="${assert_functions}assert_isfalse">assert_isfalse</link>
		</see_also_item>

	</see_also>

	<history>
		<history_item>
			<history_version>1.0.0</history_version>
			<history_description>initial version</history_description>
		</history_item>
	</history>

	<authors>
		<author_item>Allan CORNET</author_item>
	</authors>
</xmldoc>
