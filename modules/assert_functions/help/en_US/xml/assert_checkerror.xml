<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>en_US</language>
    <keyword>assert_checkerror</keyword>
    <short_description
  >Check that a command raises the expected error.</short_description>
    <syntax>
        <syntax_item
    >assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >r = assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
        <syntax_item
    >r = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
        <syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>command</param_name>
            <param_description
      >a string containing the command to execute and test for errors.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>expected_error_message</param_name>
            <param_description
      >a string containing the expected error message that should be raised.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>expected_error_identifier</param_name>
            <param_description
      >a string containing the expected error identifier (optional).</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>r</param_name>
            <param_description
      >a logical value: true if the test passes, false otherwise.</param_description>
        </param_output_item>
        <param_output_item>
            <param_name>msg</param_name>
            <param_description
      >a string containing the error message. If r == true, then msg == ''. If r == false, then msg contains the assertion failure message.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p><b
      >assert_checkerror</b> verifies that executing a command raises the expected error message.</p>
        <p
    >If the command does not raise any error, or if it raises an error with a different message than expected, the assertion fails.</p>
        <p>When the optional <b
      >expected_error_identifier</b> parameter is provided, the function also checks that the error identifier matches the expected one.</p>
        <p
    >This function is particularly useful for unit testing to ensure that invalid inputs or operations properly generate the expected error conditions.</p>
    </description>
    <used_function />
    <bibliography />
    <examples>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Test that cos function with no arguments raises the expected error:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[assert_checkerror('cos', _('Wrong number of input arguments.'));]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Example that demonstrates assertion failure with wrong expected message:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[try
    assert_checkerror('cos', _('Wrong error message.'));
catch ME
    disp(['Error: ' ME.message])
end]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Test with both error message and error identifier:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[assert_checkerror('mustBeFinite(NaN)', _('Value must be finite.'), 'Nelson:validators:mustBeFinite')]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Using return values to handle assertion results:</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[[r, msg] = assert_checkerror('cos', _('Wrong number of input arguments.'));
if r
    disp('Test passed: cos function properly raises expected error')
else
    disp(['Test failed: ' msg])
end]]></example_item_data>
        </example_item>
    </examples>
    <see_also>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_istrue"
      >assert_istrue</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_isfalse"
      >assert_isfalse</link>
        </see_also_item>
    </see_also>
    <history>
        <history_item>
            <history_version>1.0.0</history_version>
            <history_description>initial version</history_description>
        </history_item>
    </history>
    <authors>
        <author_item>Allan CORNET</author_item>
    </authors>
</xmldoc>
