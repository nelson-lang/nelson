<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>fr_FR</language>
    <keyword>assert_checkerror</keyword>
    <short_description
  >Vérifie qu'une commande lève l'erreur attendue.</short_description>
    <syntax>
        <syntax_item
    >assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >r = assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message)</syntax_item>
        <syntax_item
    >assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
        <syntax_item
    >r = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
        <syntax_item
    >[r, msg] = assert_checkerror(command, expected_error_message, expected_error_identifier)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>command</param_name>
            <param_description
      >une chaîne contenant la commande à exécuter et tester pour les erreurs.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>expected_error_message</param_name>
            <param_description
      >une chaîne contenant le message d'erreur attendu qui devrait être levé.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>expected_error_identifier</param_name>
            <param_description
      >une chaîne contenant l'identifiant d'erreur attendu (optionnel).</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>r</param_name>
            <param_description
      >une valeur logique : true si le test réussit, false sinon.</param_description>
        </param_output_item>
        <param_output_item>
            <param_name>msg</param_name>
            <param_description
      >une chaîne contenant le message d'erreur. Si r == true, alors msg == ''. Si r == false, alors msg contient le message d'échec de l'assertion.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p><b
      >assert_checkerror</b> vérifie que l'exécution d'une commande lève le message d'erreur attendu.</p>
        <p
    >Si la commande ne lève aucune erreur, ou si elle lève une erreur avec un message différent de celui attendu, l'assertion échoue.</p>
        <p>Lorsque le paramètre optionnel <b
      >expected_error_identifier</b> est fourni, la fonction vérifie également que l'identifiant d'erreur correspond à celui attendu.</p>
        <p
    >Cette fonction est particulièrement utile pour les tests unitaires afin de s'assurer que les entrées ou opérations non valides génèrent correctement les conditions d'erreur attendues.</p>
    </description>
    <used_function />
    <bibliography />
    <examples>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Teste que la fonction cos sans arguments lève l'erreur attendue :</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[assert_checkerror('cos', _('Wrong number of input arguments.'));]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Exemple qui démontre l'échec d'assertion avec un mauvais message attendu :</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[try
    assert_checkerror('cos', _('Wrong error message.'));
catch ME
    disp(['Error: ' ME.message])
end]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Test avec à la fois le message d'erreur et l'identifiant d'erreur :</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[assert_checkerror('mustBeFinite(NaN)', _('Value must be finite.'), 'Nelson:validators:mustBeFinite')]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Utilisation des valeurs de retour pour gérer les résultats d'assertion :</example_item_description>
            <example_item_data
        runnable="cli"
      ><![CDATA[[r, msg] = assert_checkerror('cos', _('Wrong number of input arguments.'));
if r
    disp('Test passed: cos function properly raises expected error')
else
    disp(['Test failed: ' msg])
end]]></example_item_data>
        </example_item>
    </examples>
    <see_also>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_istrue"
      >assert_istrue</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${assert_functions}assert_isfalse"
      >assert_isfalse</link>
        </see_also_item>
    </see_also>
    <history>
        <history_item>
            <history_version>1.0.0</history_version>
            <history_description>version initiale</history_description>
        </history_item>
    </history>
    <authors>
        <author_item>Allan CORNET</author_item>
    </authors>
</xmldoc>
