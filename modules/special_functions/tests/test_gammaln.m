%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('gammaln'), 1)
assert_isequal(nargout('gammaln'), 1)
%=============================================================================
R = gammaln(0);
REF = Inf;
assert_isequal(R, REF);
%=============================================================================
R = gammaln(1);
REF = 0;
assert_isequal(R, REF);
%=============================================================================
R = gammaln(Inf);
REF = Inf;
assert_isequal(R, REF);
%=============================================================================
assert_checkerror('R = gammaln(-Inf);', _('Input must be nonnegative.'));
%=============================================================================
R = gammaln(NaN);
REF = NaN;
assert_isequal(R, REF);
%=============================================================================
R = gammaln(0.005);
REF = 5.2955;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln([0:3.5]);
REF = [ Inf         0         0    0.6931];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln(2);
REF = 0;
assert_isequal(R, REF);
%=============================================================================
R = gammaln(3);
REF = 0.6931;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln(172);
REF =  711.7147;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln(single(36));
REF = 92.1362;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln(single([0:3.5]));
REF = single([Inf         0         0    0.6931]);
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = gammaln([1.e308 170.6 1.5 2 1 0.5 1.e-307 1.e-100 1.e-30]);
REF = [    Inf  704.5180   -0.1208         0         0    0.5724  706.8936  230.2585   69.0776];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
