%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('interp1'), 3);
assert_isequal(nargout('interp1'), 1);
%=============================================================================
REF = [0    0.1768    0.3536    0.5303    0.7071    0.7803    0.8536    0.9268    1.0000  ...
0.9268    0.8536    0.7803    0.7071    0.5303    0.3536    0.1768    0.0000   -0.1768 ...
-0.3536   -0.5303   -0.7071   -0.7803   -0.8536   -0.9268   -1.0000   -0.9268   -0.8536 ...
-0.7803   -0.7071   -0.5303   -0.3536   -0.1768   -0.0000];
x = 0:pi/4:2*pi; 
v = sin(x);
xq = 0:pi/16:2*pi;
R = interp1(x, v, xq);
assert_isapprox(R, REF, 1e-3);
%=============================================================================
R = interp1(x, v, xq, 'linear');
assert_isapprox(R, REF, 1e-3);
%=============================================================================
REF = [0.7050    1.7050    1.7050    0.7050   -0.7050   -1.7050   -1.7050   -0.7050];
v = [0  1.41  2  1.41  0  -1.41  -2  -1.41 0];
xq = 1.5:8.5;
R = interp1(v, xq);
assert_isapprox(R, REF, 1e-3);
%=============================================================================
R = interp1(v, xq, 'linear');
assert_isapprox(R, REF, 1e-3);
%=============================================================================
v = [0  1.41  2  1.41  0  -1.41  -2  -1.41 0] + 2i;
xq = 1.5:8.5;
R = interp1(v, xq);
REF = [ 0.7050 + 2.0000i   1.7050 + 2.0000i   1.7050 + 2.0000i   0.7050 + 2.0000i ...
  -0.7050 + 2.0000i -1.7050 + 2.0000i  -1.7050 + 2.0000i  -0.7050 + 2.0000i];
assert_isapprox(R, REF);
%=============================================================================
x = 0:pi/4:2*pi; 
v = single(sin(x));
xq = 0:pi/16:2*pi;
R = interp1(x, v, xq);
assert_istrue(issingle(R));
%=============================================================================
