%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
u = [2 7 4 9];
v = [1 0 1];
[q, r] = deconv(u, v);
Q_REF = [2     7];
R_REF = [0     0     2     2];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([1, 1], 1);
Q_REF = [1, 1];
R_REF = [0, 0];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([1; 1], 1);
Q_REF = [1;1];
R_REF = [0; 0];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv((10:-1:1), (4:-1:1));
Q_REF = [2.5000    0.3750    0.4688    0.5859    0.7324    0.2905    0.2694];
R_REF = [0         0         0         0         0         0         0    0.8783    1.1707    0.7306];
assert_isapprox(q, Q_REF, 1e-3);
assert_isapprox(r, R_REF, 1e-3);
%=============================================================================
[q, r] = deconv([3; 6], [1, 2, 3]);
Q_REF = 0;
R_REF = [3; 6];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([3; 6], [1; 2; 3]);
Q_REF = 0;
R_REF = [3; 6];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([3, 6], [1, 2, 3]);
Q_REF = 0;
R_REF = [3, 6];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([3, 6, 9, 9], [1, 2, 3]);
Q_REF = [3     0];
R_REF = [0     0     0     9];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
[q, r] = deconv([1; 2; 3],[1, 1]);
Q_REF = [1; 1];
R_REF = [0; 0; 2];
assert_isequal(q, Q_REF);
assert_isequal(r, R_REF);
%=============================================================================
