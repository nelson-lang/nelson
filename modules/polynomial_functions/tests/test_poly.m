%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = [1 8 -10; -4 2 4; -5 2 8];
e = eig(A);
R = poly(e);
REF = [1.0000  -11.0000    0.0000  -84.0000];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1 2 3; 4 5 6; 7 8 0];
R = poly(A);
REF = [ 1.0000   -6.0000  -72.0000  -27.0000];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1    2    3;  4    5    6; 7    8    0];
R = poly(A);
REF = [1  -6 -72 -27];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1    2    3];
R = poly(A);
REF = [ 1    -6    11    -6];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = 2;
R = poly(A);
REF = [1, -2];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = 0;
R = poly(A);
REF = [1, 0];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [];
R = poly(A);
REF = 1;
assert_isapprox(R, REF, 1e-4);
%=============================================================================
A = [1i, 2i];
R = poly(A);
REF = [1, -3i, -2];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
