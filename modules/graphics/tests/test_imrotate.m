%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--ADV-CLI MODE-->
%=============================================================================
R = reshape (1:18, [2 3 3]);
REF_90(:,:,1) = [5   6; 3   4; 1   2];
REF_90(:,:,2) = [11   12; 9   10; 7    8];
REF_90(:,:,3) = [17   18; 15   16; 13   14];
REF_180(:,:,1) = [6   4   2; 5   3   1];
REF_180(:,:,2) = [12   10    8; 11    9    7];
REF_180(:,:,3) = [18   16   14; 17   15   13];
REF_270(:,:,1) = [2   1; 4   3; 6   5];
REF_270(:,:,2) = [8    7;10    9;12   11];
REF_270(:,:,3) = [14   13;16   15;18   17];
%=============================================================================
assert_isequal(imrotate (R, 0), R);
assert_isequal(imrotate (R, 360), R);
assert_isequal(imrotate (R,   90), REF_90);
assert_isequal(imrotate (R,  -90), REF_270);
assert_isequal(imrotate (R,  270), REF_270);
assert_isequal(imrotate (R, -270), REF_90);
assert_isequal(imrotate (R, 180), imrotate (R, -180))
assert_isequal(imrotate (R, 180), REF_180);
assert_isequal(imrotate (R, -180), REF_180);
%=============================================================================
REF = [0 1 1 0; 0 1 1 0];
R = imrotate (ones (2, 4), 90, 'nearest', 'crop');
assert_isequal(R, REF);
%=============================================================================
REF = [1 1; 1 1; 1 1;1 1];
R = imrotate (ones (2, 4), 90, 'nearest', 'loose');
assert_isequal(R, REF);
%=============================================================================
