//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
#pragma once
//=============================================================================
#include <vector>
#include "ArrayOf.hpp"
#include "GOProperty.hpp"
//=============================================================================
namespace Nelson {
//=============================================================================
class GOVector2DProperty : public GOProperty
{
protected:
    std::vector<double> m_data;

public:
    //=============================================================================
    GOVector2DProperty() { m_data.reserve(2); }
    //=============================================================================
    ~GOVector2DProperty() override { m_data.clear(); }
    //=============================================================================
    ArrayOf
    get() override;
    //=============================================================================
    void set(ArrayOf /*unused*/) override;
    //=============================================================================
    std::vector<double>
    data()
    {
        return m_data;
    }
    //=============================================================================
    void
    value(double x1, double x2)
    {
        if (!m_data.empty()) {
            m_data.clear();
            m_data.reserve(2);
        }
        m_data.push_back(x1);
        m_data.push_back(x2);
    }
    //=============================================================================
    std::string
    print(const std::string& propertyName) override
    {
        return "\t" + propertyName + ":\t [ " + std::to_string(m_data[0]) + " "
            + std::to_string(m_data[1]) + " ]";
    }
    //=============================================================================
};
//=============================================================================
} // namespace Nelson
//=============================================================================
