//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
#pragma once
//=============================================================================
#include "ArrayOf.hpp"
#include "GOProperty.hpp"
//=============================================================================
namespace Nelson {
//=============================================================================
class GOScalarDoubleProperty : public GOProperty
{
protected:
    double m_data;

public:
    //=============================================================================
    GOScalarDoubleProperty() = default;
    //=============================================================================
    ~GOScalarDoubleProperty() override = default;
    //=============================================================================
    ArrayOf
    get() override;
    //=============================================================================
    void set(ArrayOf /*unused*/) override;
    //=============================================================================
    double
    data()
    {
        return m_data;
    }
    //=============================================================================
    void
    value(double m)
    {
        m_data = m;
    }
    //=============================================================================
    std::string
    print(const std::string& propertyName) override
    {
        int ivalue = static_cast<int>(m_data);
        std::string v;
        if (static_cast<double>(ivalue) == m_data) {
            v = std::to_string(ivalue);
        } else {
            v = std::to_string(m_data);
        }
        return "\t" + propertyName + ":\t" + v;
    }
    //=============================================================================
};
//=============================================================================
} // namespace Nelson
//=============================================================================
