<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>fr_FR</language>
    <keyword>Gestion des interruptions de callback dans Nelson</keyword>
    <description>
        <p
    >Vous pouvez affecter une fonction de rappel (callback) à une propriété de callback en utilisant l'une des méthodes suivantes :</p>
        <p>
            <b
      >Handle de fonction</b> : Utilisez cette approche lorsque votre callback n'a pas besoin d'arguments supplémentaires.</p>
        <p>
            <b
      >Cellule</b> : Idéal lorsque votre callback nécessite des arguments supplémentaires. La cellule doit inclure le handle de fonction comme premier élément, suivi des arguments d'entrée.</p>
        <p>
            <b
      >Fonction anonyme</b> : Cette méthode convient pour un code de callback simple ou si vous souhaitez réutiliser une fonction qui n'est pas exclusivement utilisée comme callback.</p>
        <p>
            <b
      >Vecteur de caractères ou chaîne scalaire</b> contenant des commandes.</p>
        <p />
        <p
    >Nelson permet de contrôler si une fonction de callback peut être interrompue pendant son exécution. Dans certains cas, autoriser les interruptions peut être souhaitable, par exemple pour permettre à l'utilisateur d'arrêter une boucle d'animation via un callback interrompant. Cependant, dans des scénarios où l'ordre d'exécution des callbacks est crucial, il peut être nécessaire d'empêcher les interruptions pour garantir le comportement attendu, comme assurer la réactivité dans des applications qui réagissent aux mouvements du pointeur.</p>
        <p />
        <p>Comportement d'interruption des callbacks :</p>
        <p />
        <p
    >Les callbacks sont exécutés dans l'ordre où ils sont mis en file d'attente. Lorsqu'un callback est en cours d'exécution et qu'une autre action utilisateur déclenche un second callback, ce second callback tente d'interrompre le premier. Le premier est appelé « callback en cours d'exécution », le second « callback interrompant ».</p>
        <p />
        <p
    >Dans certains cas, des commandes spécifiques dans le callback en cours invitent Nelson à traiter les callbacks en attente dans la file.</p>
        <p>Lorsque Nelson rencontre l'une de ces commandes comme <b
      >drawnow</b>, <b>figure</b>, <b>waitfor</b> ou <b
      >pause</b>, il évalue si une interruption doit avoir lieu.</p>
        <p />
        <p
    >Pas d'interruption : Si le callback en cours n'inclut aucune de ces commandes, Nelson termine ce callback avant d'exécuter le callback interrompant.</p>
        <p />
        <p
    >Conditions d'interruption : Si le callback en cours inclut l'une de ces commandes, le comportement dépend de la propriété Interruptible de l'objet propriétaire du callback :</p>
        <p />
        <p>Si <b>Interruptible</b> est à <b
      >'on'</b>, Nelson autorise l'interruption. Le callback en cours est mis en pause, le callback interrompant est exécuté, puis Nelson reprend l'exécution du callback initial.</p>
        <p>Si <b>Interruptible</b> est à <b
      >'off'</b>, l'interruption est bloquée. La propriété <b
      >BusyAction</b> du callback interrompant détermine alors la suite :</p>
        <p>Si <b>BusyAction</b> est <b
      >'queue'</b>, le callback interrompant sera exécuté après la fin du callback en cours.</p>
        <p>Si <b>BusyAction</b> est <b
      >'cancel'</b>, le callback interrompant est ignoré et non exécuté.</p>
        <p>Par défaut, la propriété <b>Interruptible</b> est à <b>'on'</b> et <b
      >BusyAction</b> à <b>'queue'</b>.</p>
        <p />
        <p>À noter : certains callbacks, notamment <b>DeleteFcn</b>, <b
      >CloseRequestFcn</b> et <b
      >SizeChangedFcn</b>, interrompent le callback en cours quel que soit la valeur de la propriété Interruptible.</p>
    </description>
    <used_function />
    <bibliography />
    <examples>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description
      >Démo uicontrol Interruptible</example_item_description>
            <example_item_data
        runnable="adv-cli"
      ><![CDATA[
addpath([modulepath('graphics','root'), '/examples/uicontrol'])
edit uicontrol_demo_interruptible
uicontrol_demo_interruptible
]]></example_item_data>
            <example_item_img
        src="../../images/uicontrol_6.png"
        align="middle"
        generate="false"
      />
        </example_item>
    </examples>
    <see_also>
        <see_also_item>
            <link linkend="${graphics}uicontrol">uicontrol</link>
        </see_also_item>
        <see_also_item>
            <link linkend="${graphics}drawnow">drawnow</link>
        </see_also_item>
        <see_also_item>
            <link linkend="${graphics}waitfor">waitfor</link>
        </see_also_item>
    </see_also>
    <history>
        <history_item>
            <history_version>1.0.0</history_version>
            <history_description>version initiale</history_description>
        </history_item>
    </history>
    <authors>
        <author_item>Allan CORNET</author_item>
    </authors>
</xmldoc>
