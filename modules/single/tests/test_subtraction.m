%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = single(3);
B = single(4);
assert_isequal(A-B, single(-1));
%=============================================================================
assert_isequal(single(3) - single([]), single([]));
%=============================================================================
assert_isequal(single([]) - single(3), single([]));
%=============================================================================
assert_isequal(single(3) - single(ones(3,0)), single(zeros(3, 0)));
%=============================================================================
assert_isequal(single(ones(3,0)) - single(3), single(zeros(3, 0)));
%=============================================================================
A = [1 2; 3 4];
B = [5 6; 7 8];
R = single(A) - single(B);
REF = single([-4     -4;-4    -4]);
assert_isequal(R, REF);
%=============================================================================
A = single([1 2; 3 4]);
B = single(10);
R1 = A - B;
R2 = B - A;
REF1 = single([-9, -8; -7, -6]);
REF2 = single([9, 8; 7, 6]);
assert_isequal(R1, REF1);
assert_isequal(R2, REF2);
%=============================================================================
A = single([0 10; 10 0]);
R = single(A - 20);
REF = single([-20   -10;  -10   -20]);
assert_isequal(R, REF);
%=============================================================================
A = single([10 0; 20 40]);
B = single([50 90; 20 10]);
R1 = A - B;
R2 = B - A;
REF1 = single([-40   -90;    0    30]);
REF2 = single([40   90;    0    -30]);
assert_isequal(R1, REF1);
assert_isequal(R2, REF2);
%=============================================================================
A = single([10, 20, 30, 40]);
B = single([50; 60; 70]);
R1 = A - B;
R2 = B - A;
REF1 = [-40   -30   -20   -10;
-50   -40   -30   -20;
-60   -50   -40   -30];
REF2 = [40    30    20    10;
50    40    30    20;
60    50    40    30];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([10; 100]);
R1 = A - B;
R2 = B - A;
REF1 = [     0    10    20;   -60   -50   -40];
REF2 = [     0   -10   -20;    60    50    40];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([1 2 3]);
R1 = A - B;
R2 = B - A;
REF1 = [     9    18    27;    39    48    57];
REF2 = [    -9    -18    -27;   -39    -48    -57];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
B = single([10 20 30; 40 50 60]);
A = single([1 2 3]);
R1 = A - B;
R2 = B - A;
REF1 = [    -9   -18   -27;   -39   -48   -57];
REF2 = [    9   18   27;   39   48   57];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single(ones(3, 1));
B = single(ones(4, 1));
assert_checkerror('A - B', [_('Size mismatch on arguments to arithmetic operator '), '-']);
%=============================================================================
% complex
A = single(3);
B = single(4i);
assert_isequal(A-B, single(3-4i));
%=============================================================================
assert_isequal(single(3i) - single([]), single([]));
%=============================================================================
assert_isequal(single([]) - single(3i), single([]));
%=============================================================================
assert_isequal(single(3i) - single(ones(3,0)), single(zeros(3, 0)));
%=============================================================================
assert_isequal(single(ones(3,0)) - single(3i), single(zeros(3, 0)));
%=============================================================================
A = single([1 2; 3 4] * i);
B = single([5 6; 7 8]);
R1 = A - B;
R2 = B - A;
REF1 = [    -5.0000+1.0000i    -6.0000+2.0000i;
-7.0000+3.0000i    -8.0000+4.0000i];
REF2 = [   5.0000-1.0000i   6.0000-2.0000i;
7.0000-3.0000i   8.0000-4.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([1 2; 3 4]);
B = single(10i);
R1 = A - B;
R2 = B - A;
REF1 = [   1.0000-10.0000i   2.0000-10.0000i;
3.0000-10.0000i   4.0000-10.0000i];
REF2 = [  -1.0000+10.0000i  -2.0000+10.0000i;
-3.0000+10.0000i  -4.0000+10.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([0 10; 10 0]);
R1 = single(A - 20i);
R2 = single(20i - A);
REF1 = [   0.0000-20.0000i  10.0000-20.0000i;
10.0000-20.0000i   0.0000-20.0000i];
assert_isequal(R1, single(REF1));
REF2 = [   0.0000+20.0000i -10.0000+20.0000i;
-10.0000+20.0000i   0.0000+20.0000i];
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10 0; 20 40]);
B = single([50 90; 20 10] * i);
R1 = A - B;
R2 = B - A;
REF1 = [  10.0000-50.0000i   0.0000-90.0000i;
20.0000-20.0000i  40.0000-10.0000i];
REF2 = [ -10.0000+50.0000i   0.0000+90.0000i;
-20.0000+20.0000i -40.0000+10.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10, 20, 30, 40]);
B = single([50; 60; 70] * i);
R1 = A - B;
R2 = B - A;
REF1 = [  10.0000-50.0000i  20.0000-50.0000i  30.0000-50.0000i  40.0000-50.0000i;
10.0000-60.0000i  20.0000-60.0000i  30.0000-60.0000i  40.0000-60.0000i;
10.0000-70.0000i  20.0000-70.0000i  30.0000-70.0000i  40.0000-70.0000i];
REF2 = [ -10.0000+50.0000i -20.0000+50.0000i -30.0000+50.0000i -40.0000+50.0000i;
-10.0000+60.0000i -20.0000+60.0000i -30.0000+60.0000i -40.0000+60.0000i;
-10.0000+70.0000i -20.0000+70.0000i -30.0000+70.0000i -40.0000+70.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([10; 10] * i);
R2 = B - A;
R1 = A - B;
REF2 = [-10.0000+10.0000i -20.0000+10.0000i -30.0000+10.0000i;
-40.0000+10.0000i -50.0000+10.0000i -60.0000+10.0000i];
REF1 = [  10.0000-10.0000i  20.0000-10.0000i  30.0000-10.0000i;
40.0000-10.0000i  50.0000-10.0000i  60.0000-10.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([1 2 3] * i);
R1 = A - B;
R2 = B - A;
REF1 = [  10.0000-1.0000i  20.0000-2.0000i  30.0000-3.0000i;
40.0000-1.0000i  50.0000-2.0000i  60.0000-3.0000i];
REF2 = [ -10.0000+1.0000i -20.0000+2.0000i -30.0000+3.0000i;
-40.0000+1.0000i -50.0000+2.0000i -60.0000+3.0000i];
assert_isequal(R1, single(REF1));
assert_isequal(R2, single(REF2));
%=============================================================================
B = single([10 20 30; 40 50 60]);
A = single([1 2 3] * i);
R1 = A - B;
R2 = B - A;
REF1 = [ -10.0000+1.0000i -20.0000+2.0000i -30.0000+3.0000i
-40.0000+1.0000i -50.0000+2.0000i -60.0000+3.0000i];
assert_isequal(R1, single(REF1));
REF2 = [10.0000-1.0000i  20.0000-2.0000i  30.0000-3.0000i;
40.0000-1.0000i  50.0000-2.0000i  60.0000-3.0000i];
assert_isequal(R2, single(REF2));
%=============================================================================
