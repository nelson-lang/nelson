%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = single(3);
B = single(4);
assert_isequal(A+B, single(7));
%=============================================================================
assert_isequal(single(3 + []), single([]));
%=============================================================================
assert_isequal(single([] + 3), single([]));
%=============================================================================
assert_isequal(single(3 + ones(3,0)), single(zeros(3, 0)));
%=============================================================================
assert_isequal(single(ones(3,0) + 3), single(zeros(3, 0)));
%=============================================================================
A = single([1 2; 3 4]);
B = single([5 6; 7 8]);
R = A + B;
REF = single([6     8;10    12]);
assert_isequal(R, REF);
%=============================================================================
A = single([1 2; 3 4]);
B = single(10);
R1 = A + B;
R2 = B + A;
REF = single([11, 12; 13, 14]);
assert_isequal(R1, R2);
assert_isequal(R1, REF);
%=============================================================================
A = single([0 10; 10 0]);
R = A + single(20);
REF = single([20 30; 30 20]);
assert_isequal(R, REF);
%=============================================================================
A = single([10 0; 20 40]);
B = single([50 90; 20 10]);
R = A + B;
REF = single([60 90; 40 50]);
assert_isequal(R, REF);
%=============================================================================
A = single([10, 20, 30, 40]);
B = single([50; 60; 70]);
R1 = A + B;
R2 = B + A;
assert_isequal(R1, R2);
REF = [60    70    80    90;
70    80    90   100;
80    90   100   110];
assert_isequal(R1, single(REF));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([10; 100]);
R2 = B + A;
R1 = A + B;
assert_isequal(R1, R2);
REF = single([20    30    40;  140   150   160]);
assert_isequal(R1, REF);
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([1 2 3]);
R = A + B;
REF = single([11    22    33; 41    52    63]);
assert_isequal(R, REF);
%=============================================================================
B = single([10 20 30; 40 50 60]);
A = single([1 2 3]);
R = A + B;
REF = single([11    22    33; 41    52    63]);
assert_isequal(R, REF);
%=============================================================================
A = single(ones(3, 1));
B = single(ones(4, 1));
assert_checkerror('A + B', [_('Size mismatch on arguments to arithmetic operator '), '+']);
%=============================================================================
% complex
A = single(3);
B = single(4i);
assert_isequal(A+B, single(3+4i));
%=============================================================================
R = single(3i) + single([]);
REF = single([]);
assert_isequal(R, REF);
%=============================================================================
assert_isequal(single([]) + single(3i), single([]));
%=============================================================================
assert_isequal(single(3i) + single(ones(3,0)), single(zeros(3, 0)));
%=============================================================================
assert_isequal(single(ones(3,0)) + single(3i), single(zeros(3, 0)));
%=============================================================================
A = single([1 2; 3 4] * i);
B = single([5 6; 7 8]);
R = A + B;
REF = [5.0000 + 1.0000i,   6.0000 + 2.0000i;
7.0000 + 3.0000i,   8.0000 + 4.0000i];
assert_isequal(R, single(REF));
%=============================================================================
A = single([1 2; 3 4]);
B = single(10i);
R1 = A + B;
R2 = B + A;
REF = [1.0000+10.0000i,   2.0000+10.0000i;
3.0000+10.0000i   4.0000+10.0000i];
assert_isequal(R1, R2);
assert_isequal(R1, single(REF));
%=============================================================================
A = single([0 10; 10 0]);
R = single(A + 20i);
REF = [  0.0000+20.0000i,  10.0000+20.0000i;
10.0000+20.0000i,   0.0000+20.0000i];
assert_isequal(R, single(REF));
%=============================================================================
A = single([10 0; 20 40]);
B = single([50 90; 20 10]*i);
R = A + B;
REF = [10.0000+50.0000i, 0.0000+90.0000i;
20.0000+20.0000i, 40.0000+10.0000i];
assert_isequal(R, single(REF));
%=============================================================================
A = single([10, 20, 30, 40]);
B = single([50; 60; 70] * i);
R1 = A + B;
R2 = B + A;
assert_isequal(R1, R2);
REF = [ 10.0000+50.0000i,  20.0000+50.0000i,  30.0000+50.0000i,  40.0000+50.0000i;
10.0000+60.0000i,  20.0000+60.0000i,  30.0000+60.0000i,  40.0000+60.0000i;
10.0000+70.0000i,  20.0000+70.0000i,  30.0000+70.0000i, 40.0000+70.0000i];
assert_isequal(R1, single(REF));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([10; 10] * i);
R2 = B + A;
R1 = A + B;
assert_isequal(R1, R2);
REF = [  10.0000+10.0000i, 20.0000+10.0000i,  30.0000+10.0000i;
40.0000+10.0000i, 50.0000+10.0000i,  60.0000+10.0000i];
assert_isequal(R1, single(REF));
%=============================================================================
A = single([10 20 30; 40 50 60]);
B = single([1 2 3] * i);
R = A + B;
REF = [10.0000 + 1.0000i,  20.0000 + 2.0000i,  30.0000 + 3.0000i;
40.0000 + 1.0000i,  50.0000 + 2.0000i,  60.0000 + 3.0000i];
assert_isequal(R, single(REF));
%=============================================================================
B = single([10 20 30; 40 50 60]);
A = single([1 2 3] * i);
R = A + B;
REF = [10.0000 + 1.0000i,  20.0000 + 2.0000i,  30.0000 + 3.0000i;
40.0000 + 1.0000i,  50.0000 + 2.0000i,  60.0000 + 3.0000i];
assert_isequal(R, single(REF));
%=============================================================================
