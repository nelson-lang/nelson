//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function Y = fftn(varargin)
  // N-D fast Fourier transform
  // Y = fftn(X)
  // Y = fftn(X, dims)
  
  if ~(nargin() == 1 || nargin() == 2)
    error(_('Wrong number of input arguments.'));
  end
  X = varargin{1};
  if nargin() == 2
    dims = varargin{2};
  else
    dims = size(X);
  end
  dims = dims(:)';
  if (numel(dims) < ndims(X))
    points = size(X);
    dims = [dims, points((numel(dims) + 1):end)];
  end
  Y = X;
  if ~issingle(Y)
    Y = double(Y);
   end
   if (numel(Y) ~= 0)
     for n=1:numel(dims)
       Y = fft(Y, dims(n), n);
     end
    end
endfunction
//=============================================================================
