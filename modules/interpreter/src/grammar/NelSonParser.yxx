%{
// clang-format off
//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// clang-format off
//bison -L C -k -o NelSonParser.cpp NelSonParser.yxx

#include <stdio.h>
#include <stdlib.h>
#include "AST.hpp"
#include "AstManager.hpp"
#include "Evaluator.hpp"
#include "FunctionDef.hpp"
#include "ParserInterface.hpp"
#include "Error.hpp"
#include "FileParser.hpp"
#include "i18n.hpp"

#define YYSTYPE ParseRHS

#define MSGBUFLEN 2048
static char msgBuffer[MSGBUFLEN];

#include "LexerInterface.hpp"

extern int yylex(void);

extern int yydebug;

bool interactiveMode;

#ifdef WIN32
#define snprintf _snprintf
#endif

namespace Nelson {
  static ASTPtr mainAST;
  static MacroFunctionDef *mainMDef;


  void chainFunction(MacroFunctionDef *r) {
     r->nextFunction = nullptr;
     r->prevFunction = nullptr;
     if (mainMDef == nullptr)
   {
    mainMDef = r;
   }
     else 
   {
    r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
    if (r->nextFunction)
    {
      r->nextFunction->prevFunction = r;
    }
    mainMDef->nextFunction = r;
    r->prevFunction = mainMDef;
     }
  }

  void yyerror(const char *s) {
     return;
  }

  std::string decodeline(ParseRHS val) {
    int tokenID;
    int linenumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    char buffer[IDENTIFIER_LENGTH_MAX + 1];
    sprintf(buffer,"%d",linenumber);
    return(std::string(buffer));
  }
  
  int yyxpt(const std::string &xStr, ParseRHS val) {
    int tokenID;
    int linenumber, colnumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    colnumber = tokenID >> 16;
    if (!interactiveMode)
      snprintf(msgBuffer,MSGBUFLEN,
      _("Expecting %s\n\tat line %d, column %d of file %s").c_str(),
       xStr.c_str(),linenumber,colnumber,getParserFilenameU().c_str());
    else
      snprintf(msgBuffer,MSGBUFLEN,_("Expecting %s").c_str(),xStr.c_str());
    Error(msgBuffer);
    return 0;
  }
}

using namespace Nelson;

%}

%token IDENT
%token NUMERIC ENDQSTMNT ENDSTMNT
%token LE GE EQ
%token DOTTIMES DOTRDIV DOTLDIV
%token DOTPOWER DOTTRANSPOSE
%token CHARACTER STRING SPECIALCALL
%token END IF FUNCTION FOR BREAK
%token MAGICEND
%token WHILE ELSE ELSEIF
%token SWITCH CASE OTHERWISE CONTINUE
%token TRY CATCH
%token FIELD REFLPAREN REFRPAREN
%token KEYBOARD RETURN VARARGIN VARARGOUT
%token QUIT ABORT
%token ENDFUNCTION

%left SOR
%left SAND
%left '|'
%left '&'
%left '<' LE '>' GE EQ NE
%left ':'
%left '+' '-'
%left '*' '/' '\\' DOTTIMES DOTRDIV DOTLDIV
%left POS NEG NOT
%right '^' DOTPOWER
%nonassoc '\'' DOTTRANSPOSE

%%

program:
  statementList {mainAST = $1.v.p;} 
  | functionDefList |
  | error {yyxpt("statement list or function definition",$1);}
;

functionDef:
   FUNCTION  returnDeclaration IDENT '(' argumentList ')' newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
   if ($2.v.p)
   {
    r->returnVals = $2.v.p->toStringList();
   }
     r->name = $3.v.p->text;
     r->arguments = $5.v.p->toStringList();
     r->code = $8.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
  } |
   FUNCTION  IDENT '(' argumentList ')' newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
     r->name = $2.v.p->text;
     r->arguments = $4.v.p->toStringList();
     r->code = $7.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
   } |
   FUNCTION  returnDeclaration IDENT newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
   if ($2.v.p)
   {
    r->returnVals = $2.v.p->toStringList();
   }
     r->name = $3.v.p->text;
     r->code = $5.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
   } |
   FUNCTION  IDENT newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
     r->name = $2.v.p->text;
     r->code = $4.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
   } |
   FUNCTION  returnDeclaration IDENT '(' ')' newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
   if ($2.v.p)
   {
    r->returnVals = $2.v.p->toStringList();
   }
     r->name = $3.v.p->text;
     r->code = $7.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
   } |
   FUNCTION  IDENT '(' ')' newLine statementList {
     MacroFunctionDef *r = new MacroFunctionDef();
     r->name = $2.v.p->text;
     r->code = $6.v.p;
     r->fileName = getParserFilenameW();
     chainFunction(r);
   } |
   FUNCTION  error {yyxpt(_("legal function name or return declaration after 'function'"), $1);} |
   FUNCTION  IDENT error {yyxpt(_("argument list or statement list after identifier '") + 
  $2.v.p->text.c_str() + "'",$2);} |
   FUNCTION  IDENT '('  error {yyxpt(_("(possibly empty) argument list after '('"),$3);}  |
   FUNCTION  IDENT '(' argumentList ')' error {yyxpt(_("statement list after ')'"),$5);} |
   FUNCTION  returnDeclaration  error {yyxpt(_("function name for function declared"),$1);} |
   FUNCTION  returnDeclaration IDENT error {yyxpt(_("argument list or statement list following function name :") + 
  $3.v.p->text.c_str(), $3);} |
   FUNCTION  returnDeclaration IDENT '('  error {yyxpt(_("(possibly empty) argument list after '('"),$4);} |
   FUNCTION  returnDeclaration IDENT '(' argumentList ')' error {yyxpt(_("statement list after ')'"),$6);}
  ;

functionDefList:
  functionDef |
  functionDefList functionDef
  ;

returnDeclaration:
  VARARGOUT '=' {$$.v.p = $1.v.p;} |
  IDENT '=' {$$.v.p = $1.v.p;} | 
  '[' argumentList ']' '=' {$$.v.p = $2.v.p;} |
  '[' ']' '=' {$$.v.p = nullptr;} |
  IDENT error {yyxpt(_("an '=' symbol after identifier in return declaration"),$1);} |
  '[' error {yyxpt(_("a valid list of return arguments in return declaration"),$1);} | 
  '[' argumentList error {yyxpt(_("matching ']' in return declaration for '['"),$1);} |
  '[' argumentList ']' error {yyxpt(_("an '=' symbol after return declaration"),$3);}
  ;

argumentList:
  argument {$$.v.p = $1.v.p;}
  | argumentList ',' argument {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);}
  ;

argument:
  IDENT | '&' IDENT {
  $$.v.p = $2.v.p;
  char *b = (char*) malloc($2.v.p->text.size() + 2);
  b[0] = '&';
  strcpy(b+1, $2.v.p->text.c_str());
  $$.v.p->text = b;
  free(b);
  }
  ;
  

statementList:
   statement {$$.v.p = allocateAbstractSyntaxTree(OP_BLOCK,$1.v.p,$1.v.p->context());} | 
   statementList statement {$$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);}
   ;

statement:
   statementType ENDQSTMNT {
        $$.v.p = allocateAbstractSyntaxTree(OP_QSTATEMENT,NULL,$2.v.i);
      $$.v.p->down = $1.v.p;
   }
   | statementType ENDSTMNT {
      $$.v.p = allocateAbstractSyntaxTree(OP_RSTATEMENT,NULL,$2.v.i);
            $$.v.p->down = $1.v.p;
   }
   | statementType ',' {
      $$.v.p = allocateAbstractSyntaxTree(OP_RSTATEMENT,NULL,$2.v.i);
      $$.v.p->down = $1.v.p;
   } 
   ;

statementType:
   assignmentStatement
   | expr
   | {$$.v.p = allocateAbstractSyntaxTree(null_node,"",-1);} 
     | multiFunctionCall
     | forStatement
     | breakStatement
   | continueStatement
     | whileStatement
     | ifStatement
   | switchStatement
   | tryStatement
   | pauseStatement
   | returnStatement
   | specialSyntaxStatement
   | QUIT 
   | ABORT 
   | endfunctionStatement
;

endfunctionStatement:
  ENDFUNCTION;

specialSyntaxStatement:
  IDENT NUMERIC {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context());} |
  STRING STRING {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context());} |
  CHARACTER CHARACTER {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context());} |
  IDENT STRING {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context());} |
  IDENT CHARACTER {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context());} |
  IDENT IDENT {$$.v.p = allocateAbstractSyntaxTree(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->context()); } |
  specialSyntaxStatement STRING {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement CHARACTER {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement IDENT {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement NUMERIC {$1.v.p->addChild($2.v.p);}

returnStatement:
  RETURN
  ;

pauseStatement:
  KEYBOARD
  ;

continueStatement:
   CONTINUE
   ;
breakStatement:
   BREAK
   ;

tryStatement:
  TRY statementList optionalCatch END 
  { 
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    if ($3.v.p != nullptr) $$.v.p->addChild($3.v.p);
  } 
  | TRY statementList optionalCatch error 
  {yyxpt(_("matching 'end' to 'try' clause from line ") + decodeline($1),$4);}
        ;

optionalCatch:
  CATCH statementList {$$.v.p = $2.v.p;}
  | {$$.v.p = nullptr;}
  ;

switchStatement:
  SWITCH  expr optionalEndStatement caseBlock otherwiseClause END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p); 
    if ($4.v.p != nullptr) $$.v.p->addChild($4.v.p); 
    if ($5.v.p != nullptr) $$.v.p->addChild($5.v.p);
  } |
  SWITCH  expr optionalEndStatement caseBlock otherwiseClause error {
          yyxpt(_("matching 'end' to 'switch' clause from line ") + decodeline($1),$6);
        } 
        ;

optionalEndStatement:
  ',' | ENDSTMNT | ENDQSTMNT | ';' 
  ;

newLine:
  ENDSTMNT | ENDQSTMNT
  ;


caseBlock:
  {$$.v.p = nullptr;} | caseList
  ;

caseList:
  caseStatement {
    $$.v.p = allocateAbstractSyntaxTree(OP_CASEBLOCK,$1.v.p,$1.v.p->context());
  } |
  caseList caseStatement {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);
  }
;

caseStatement:
  CASE expr optionalEndStatement statementList {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p); $$.v.p->addChild($4.v.p);
  }
;

otherwiseClause:
  OTHERWISE statementList {
    $$.v.p = $2.v.p;
  } |
  {
    $$.v.p = nullptr;
  }
;

forStatement:
  FOR forIndexExpression optionalEndStatement END {
   $$.v.p = nullptr;
  } |
  FOR forIndexExpression optionalEndStatement statementList END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    $$.v.p->addChild($4.v.p);
  } |
  FOR forIndexExpression optionalEndStatement statementList error 
           {yyxpt(_("'end' to match 'for' statement from line ") + decodeline($1),$5);}
;

forIndexExpression:
  '(' IDENT '=' expr ')' {$$.v.p = $2.v.p; $$.v.p->addChild($4.v.p);} |
  IDENT '=' expr {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);} |
  IDENT {$$.v.p = $1.v.p; 
        $$.v.p->addChild(allocateAbstractSyntaxTree(OP_RHS, allocateAbstractSyntaxTree(id_node,$1.v.p->text.c_str(), $1.v.p->context()),$1.v.p->context())); } |
  '(' IDENT '=' expr error {yyxpt(_("matching right parenthesis"),$1);} |
  '(' IDENT '=' error {yyxpt(_("indexing expression"),$3);} |
  '(' IDENT error {yyxpt(_("equals operator after loop index"),$2);} |
  '(' error {yyxpt(_("identifier that is the loop variable"),$1);} |
  IDENT '=' error {yyxpt(_("indexing expression"),$2);} |
  error {yyxpt(_("identifier or assignment (id = expr) after 'for' "),$1);} 
;

whileStatement:
  WHILE expr optionalEndStatement END {
    $$.v.p = nullptr;
  }  |
  WHILE expr optionalEndStatement statementList END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    $$.v.p->addChild($4.v.p);
  }  |
  WHILE error {yyxpt(_("test expression after 'while'"),$1);} |
  WHILE expr optionalEndStatement statementList error 
  {yyxpt(_("'end' to match 'while' statement from line ") + decodeline($1),$5);}
;

ifStatement:
  IF conditionedStatement elseIfBlock elseStatement END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    if ($3.v.p != nullptr) $$.v.p->addChild($3.v.p); 
    if ($4.v.p != nullptr) $$.v.p->addChild($4.v.p);
  } |
  IF error {yyxpt(_("condition expression for 'if'"),$1);} |
  IF conditionedStatement elseIfBlock elseStatement error {yyxpt(_("'end' to match 'if' statement from line ") + decodeline($1),$5);}
;

conditionedStatement:
  expr optionalEndStatement statementList {
    $$.v.p = allocateAbstractSyntaxTree(OP_CSTAT,$1.v.p,$3.v.p,$1.v.p->context());
  } |
  expr error {yyxpt("valid list of statements after condition",$2);}
;

elseIfBlock:
  /* empty */ {$$.v.p = nullptr;} |
  elseIfStatementList
  ;

elseIfStatementList:
  elseIfStatement {
    $$.v.p = allocateAbstractSyntaxTree(OP_ELSEIFBLOCK,$1.v.p,$1.v.p->context());
  } |
  elseIfStatementList elseIfStatement {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);
  }
;

elseIfStatement:
  ELSEIF conditionedStatement {
    $$.v.p = $2.v.p;
  } |
  ELSEIF error {yyxpt(_("test condition for 'elseif' clause"),$1);};

elseStatement:
  ELSE statementList {
    $$.v.p = $2.v.p;
  } |
  /* empty */ {$$.v.p = nullptr;} |
  ELSE error {yyxpt(_("statement list for 'else' clause"),$1);}
;

assignmentStatement:
  symbRefList '=' expr {$$.v.p = allocateAbstractSyntaxTree(OP_ASSIGN,$1.v.p,$3.v.p,$2.v.i);} |
  symbRefList '=' error {yyxpt(_("expression in assignment"),$2);}
        ;

multiFunctionCall:
  '[' matrixDef ']' '='  IDENT '('  ')' {
  $$.v.p = allocateAbstractSyntaxTree(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  } |
  '[' matrixDef ']' '='  IDENT '('  indexList ')' {
    $5.v.p->addChild(allocateAbstractSyntaxTree(OP_PARENS,$7.v.p,$6.v.i));
    $$.v.p = allocateAbstractSyntaxTree(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  } |
  '[' matrixDef ']' '='  IDENT '{'  indexList '}' {
    $5.v.p->addChild(allocateAbstractSyntaxTree(OP_PARENS,$7.v.p,$6.v.i));
    $$.v.p = allocateAbstractSyntaxTree(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  } |
  '[' matrixDef ']' '=' IDENT  {
    $5.v.p->addChild(allocateAbstractSyntaxTree(OP_PARENS,NULL,-1));
    $$.v.p = allocateAbstractSyntaxTree(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  } |
  '[' matrixDef ']' '='  IDENT '{'  indexList error {yyxpt(_("matching right bracket"), $6);} |
  '[' matrixDef ']' '='  IDENT '('  indexList error {yyxpt(_("matching right parenthesis"), $6);} |
  '[' matrixDef ']' '='  IDENT '('  error {yyxpt(_("indexing list"), $6);} |
  '[' matrixDef ']' '='  IDENT '{'  error {yyxpt(_("indexing list"), $6);} |
  '[' matrixDef ']' '='  IDENT error {yyxpt(_("left parenthesis"),$5);} | 
  '[' matrixDef ']' '=' error {yyxpt("identifier",$4);}
        ; 

expr:
  expr ':' expr {$$.v.p = allocateAbstractSyntaxTree(OP_COLON,$1.v.p,$3.v.p,$2.v.i);} 
  | expr ':' error {yyxpt(_("an expression after ':'"), $2);}
  | terminal
  | expr '+' expr {$$.v.p = allocateAbstractSyntaxTree(OP_PLUS,$1.v.p,$3.v.p,$2.v.i);}
  | expr '+' error {yyxpt(_("an expression after '+'"), $2);}
  | expr '-' expr {$$.v.p = allocateAbstractSyntaxTree(OP_SUBTRACT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '-' error {yyxpt(_("an expression after '-'"), $2);}
  | expr '*' expr {$$.v.p = allocateAbstractSyntaxTree(OP_TIMES,$1.v.p,$3.v.p,$2.v.i);}
  | expr '*' error {yyxpt(_("an expression after '*'"),$2);}
  | expr '/' expr {$$.v.p = allocateAbstractSyntaxTree(OP_RDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr '/' error {yyxpt(_("an expression after '/'"),$2);}
  | expr '\\' expr {$$.v.p = allocateAbstractSyntaxTree(OP_LDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr '\\' error {yyxpt(_("an expression after '\\'"),$2);}
  | expr '|' expr {$$.v.p = allocateAbstractSyntaxTree(OP_OR,$1.v.p,$3.v.p,$2.v.i);}
  | expr '|' error {yyxpt(_("an expression after '|'"),$2);}
  | expr '&' expr {$$.v.p = allocateAbstractSyntaxTree(OP_AND,$1.v.p,$3.v.p,$2.v.i);}
  | expr '&' error {yyxpt(_("an expression after '&'"),$2);}
  | expr SOR expr {$$.v.p = allocateAbstractSyntaxTree(OP_SOR,$1.v.p,$3.v.p,$2.v.i);}
  | expr SOR error {yyxpt(_("an expression after '||'"),$2);}
  | expr SAND expr {$$.v.p = allocateAbstractSyntaxTree(OP_SAND,$1.v.p,$3.v.p,$2.v.i);}
  | expr SAND error {yyxpt(_("an expression after '&&'"),$2);}
  | expr '<' expr {$$.v.p = allocateAbstractSyntaxTree(OP_LT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '<' error {yyxpt(_("an expression after '<'"),$2);}
  | expr LE  expr {$$.v.p = allocateAbstractSyntaxTree(OP_LEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr LE  error {yyxpt(_("an expression after '<='"),$2);}
  | expr '>' expr {$$.v.p = allocateAbstractSyntaxTree(OP_GT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '>' error {yyxpt(_("an expression after '>'"),$2);}
  | expr GE  expr {$$.v.p = allocateAbstractSyntaxTree(OP_GEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr GE  error {yyxpt(_("an expression after '>='"),$2);}
  | expr EQ  expr {$$.v.p = allocateAbstractSyntaxTree(OP_EQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr EQ  error {yyxpt(_("an expression after '=='"),$2);}
  | expr NE  expr {$$.v.p = allocateAbstractSyntaxTree(OP_NEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr NE  error {yyxpt(_("an expression after '~='"),$2);}
  | expr DOTTIMES expr {$$.v.p = allocateAbstractSyntaxTree(OP_DOT_TIMES,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTTIMES error {yyxpt(_("an expression after '.*'"), $2);}
  | expr DOTRDIV  expr {$$.v.p = allocateAbstractSyntaxTree(OP_DOT_RDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTRDIV  error {yyxpt(_("an expression after './'"),$2);}
  | expr DOTLDIV expr {$$.v.p = allocateAbstractSyntaxTree(OP_DOT_LDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTLDIV error {yyxpt(_("an expression after '.\\'"),$2);}
  | '-' expr %prec NEG {$$.v.p = allocateAbstractSyntaxTree(OP_NEG,$2.v.p,$1.v.i);}
  | '+' expr %prec POS {$$.v.p = allocateAbstractSyntaxTree(OP_POS, $2.v.p, $1.v.i);}
  | '~' expr %prec NOT {$$.v.p = allocateAbstractSyntaxTree(OP_NOT,$2.v.p,$1.v.i);}
  | '~' error %prec NOT {yyxpt(_("an expression after logical not"),$2);}
  | expr '^' expr  {$$.v.p = allocateAbstractSyntaxTree(OP_POWER,$1.v.p,$3.v.p,$2.v.i);}
  | expr '^' error  {yyxpt(_("an expression after '^'"),$2);}
  | expr DOTPOWER expr {$$.v.p = allocateAbstractSyntaxTree(OP_DOT_POWER,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTPOWER error {yyxpt(_("an expression after '.^'"),$2);}
  | expr '\''          {$$.v.p = allocateAbstractSyntaxTree(OP_TRANSPOSE,$1.v.p,$2.v.i);}
  | expr DOTTRANSPOSE  {$$.v.p = allocateAbstractSyntaxTree(OP_DOT_TRANSPOSE,$1.v.p,$2.v.i);}
  | '(' expr ')'  {$$.v.p = $2.v.p;}
  | '(' expr error  {yyxpt(_("a right parenthesis after expression to match this one"),$1);}
  | '(' error  {yyxpt(_("an expression after left parenthesis"),$1);}
  ;

terminal:
	NUMERIC
  | CHARACTER
  | STRING
  | MAGICEND
  | symbRefList {$$.v.p = allocateAbstractSyntaxTree(OP_RHS,$1.v.p,$1.v.p->context());}
    | '[' matrixDef ']' {$$.v.p = $2.v.p;}
    | '[' error {yyxpt(_("a matrix definition followed by a right bracket"),$1);}
    | '[' rowSeperator matrixDef ']' {$$.v.p = $3.v.p;}
    | '[' matrixDef rowSeperator ']' {$$.v.p = $2.v.p;}
    | '[' rowSeperator matrixDef rowSeperator ']' {$$.v.p = $3.v.p;}
	| '[' ']' {$$.v.p = allocateAbstractSyntaxTree(OP_EMPTY,NULL,$1.v.i);}
    | '{' cellDef '}' {$$.v.p = $2.v.p;}
    | '{' rowSeperator cellDef '}' {$$.v.p = $3.v.p;}
    | '{' cellDef rowSeperator '}' {$$.v.p = $2.v.p;}
    | '{' rowSeperator cellDef rowSeperator '}' {$$.v.p = $3.v.p;}
	| '{' '}' {$$.v.p = allocateAbstractSyntaxTree(OP_EMPTY_CELL,NULL,$1.v.i);}
	| '{' error {yyxpt(_("a cell-array definition followed by a right brace"),$1);};
symbRefList:
  IDENT 
    | symbRefList symbRef {$$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);};
  
symbRef:
  '(' indexList ')' {$$.v.p = allocateAbstractSyntaxTree(OP_PARENS,$2.v.p,$1.v.i); }
    | '(' ')' {$$.v.p = allocateAbstractSyntaxTree(OP_PARENS,NULL,$1.v.i); }
	| '(' indexList error {yyxpt(_("matching right parenthesis"),$1);}
    | '{' indexList '}' {$$.v.p = allocateAbstractSyntaxTree(OP_BRACES,$2.v.p,$1.v.i); }
	| '{' indexList error {yyxpt(_("matching right brace"),$1);}
    | '.' IDENT {$$.v.p = allocateAbstractSyntaxTree(OP_DOT,$2.v.p,$1.v.i); }
	| '.' '(' expr ')' {$$.v.p = allocateAbstractSyntaxTree(OP_DOTDYN,$3.v.p,$1.v.i);};

indexElement:
  expr
  | ':' {$$.v.p = allocateAbstractSyntaxTree(OP_ALL,NULL,$1.v.i);}
  | '/' IDENT '=' expr {$$.v.p = allocateAbstractSyntaxTree(OP_KEYWORD,$2.v.p,$4.v.p,$1.v.i);}
  | '/' IDENT '=' error {yyxpt(_("expecting expression after '=' in keyword assignment"),$3);}
  | '/' IDENT {$$.v.p = allocateAbstractSyntaxTree(OP_KEYWORD,$2.v.p,$1.v.i);}
  | '/' error {yyxpt(_("expecting keyword identifier after '/' in keyword assignment"),$1);}
        ;

indexList:
  indexElement | 
        indexList ',' indexElement {$$.v.p = $1.v.p; $$.v.p->addPeer($3.v.p);}
        ;

cellDef:
       rowDef {$$.v.p = allocateAbstractSyntaxTree(OP_BRACES,$1.v.p,$1.v.p->context());}|
       cellDef rowSeperator rowDef {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);}
       ;

matrixDef:
       rowDef {$$.v.p = allocateAbstractSyntaxTree(OP_BRACKETS,$1.v.p,$1.v.p->context());}|
       matrixDef rowSeperator rowDef {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);} 
       ;

rowSeperator:
       ENDSTMNT | ENDQSTMNT
       ;

columnSep:
       ',' 
       ;

rowDef:
       expr {$$.v.p = allocateAbstractSyntaxTree(OP_SEMICOLON,$1.v.p,$1.v.p->context());} |
       rowDef columnSep expr {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);};

%%

namespace Nelson {
  
  void resetParser() {
    if (mainAST)
  {
    mainAST = nullptr;
  }
  if (mainMDef)
  {
      mainMDef = nullptr;
  }
  }
  
  ASTPtr getParsedScriptBlock() {
    return mainAST;
  }
  
  MacroFunctionDef* getParsedFunctionDef() {
    return mainMDef;
  }
  
  ParserState parseState() {
    if (mainAST != nullptr) 
      return ScriptBlock;
    else
      return FuncDef;
  }
  
  ParserState parseString(const std::string &txt) {
    resetParser();
    interactiveMode = true;
    setLexBuffer(txt);
    yyparse();
    return parseState();
  }
  
  ParserState parseFile(FILE *fp, const std::string &fname) {
    resetParser();
    interactiveMode = false;
    setParserFilename(fname);
    setLexFile(fp);
    yyparse();
    ParserState pstate = parseState();
    setParserFilename("");
    return pstate;
  }
}
// clang-format on
