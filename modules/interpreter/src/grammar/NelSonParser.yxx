%{
// clang-format off
//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
// clang-format off
//bison -L C -k -o NelSonParser.cpp NelSonParser.yxx
//=============================================================================
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <mutex>
#include "NelsonParserHelpers.hpp"
#include "AbstractSyntaxTree.hpp"
#include "i18n.hpp"
//=============================================================================
#define YYSTYPE ParseRHS
//=============================================================================
extern int yylex(void);
extern int yydebug;
//=============================================================================
static std::mutex parseMutex;
//=============================================================================
namespace Nelson {
  void yyerror(const char *s) {
     return;
  }
}
//=============================================================================
using namespace Nelson;
//=============================================================================
%}

%token IDENT
%token NUMERIC ENDQSTMNT ENDSTMNT
%token LE GE EQ
%token DOTTIMES DOTRDIV DOTLDIV
%token DOTPOWER DOTTRANSPOSE
%token CHARACTER STRING SPECIALCALL
%token END IF FUNCTION FOR BREAK
%token MAGICEND
%token WHILE ELSE ELSEIF
%token SWITCH CASE OTHERWISE CONTINUE
%token TRY CATCH
%token FIELD REFLPAREN REFRPAREN
%token KEYBOARD RETURN VARARGIN VARARGOUT
%token QUIT ABORT
%token ENDFUNCTION

%left SOR
%left SAND
%left '|'
%left '&'
%left '<' LE '>' GE EQ NE
%left ':'
%left '+' '-'
%left '*' '/' '\\' DOTTIMES DOTRDIV DOTLDIV
%left POS NEG NOT
%right '^' DOTPOWER
%nonassoc '\'' DOTTRANSPOSE

%%

program:
  statementList { setParsedScriptBlock($1.v.p);}
  | functionDefList |
  | error {yyxpt(_("statement list or function definition"),$1);}
;

functionDef:
   FUNCTION  returnDeclaration IDENT '(' argumentList ')' newLine statementList {
   ParseRHS lhsRhs = $2;
   ParseRHS nameRhs = $3;
   ParseRHS rhsRhs = $5;
   ParseRHS codeRhs = $8;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
  } |
   FUNCTION  IDENT '(' argumentList ')' newLine statementList {
   ParseRHS lhsRhs;
   lhsRhs.v.p = nullptr;
   ParseRHS nameRhs = $2;
   ParseRHS rhsRhs = $4;
   ParseRHS codeRhs = $7;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
   } |
   FUNCTION  returnDeclaration IDENT newLine statementList {
    ParseRHS lhsRhs = $2;
    ParseRHS nameRhs = $3;
    ParseRHS rhsRhs;
    rhsRhs.v.p = nullptr;
    ParseRHS codeRhs = $5;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
   } |
   FUNCTION  IDENT newLine statementList {
    ParseRHS lhsRhs;
    lhsRhs.v.p = nullptr;
    ParseRHS nameRhs = $2;
    ParseRHS rhsRhs;
    rhsRhs.v.p = nullptr;
    ParseRHS codeRhs = $4;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
   } |
   FUNCTION  returnDeclaration IDENT '(' ')' newLine statementList {
    ParseRHS lhsRhs = $2;
    ParseRHS nameRhs = $3;
    ParseRHS rhsRhs;
    rhsRhs.v.p = nullptr;
    ParseRHS codeRhs = $7;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
   } |
   FUNCTION  IDENT '(' ')' newLine statementList {
    ParseRHS lhsRhs;
    lhsRhs.v.p = nullptr;
    ParseRHS nameRhs = $2;
    ParseRHS rhsRhs;
    rhsRhs.v.p = nullptr;
    ParseRHS codeRhs = $6;
   functionBody(lhsRhs, nameRhs, rhsRhs, codeRhs);
   } |
   FUNCTION  error {yyxpt(_("legal function name or return declaration after 'function'"), $1);} |
   FUNCTION  IDENT error {yyxpt(_("argument list or statement list after identifier '") +
  $2.v.p->text.c_str() + "'",$2);} |
   FUNCTION  IDENT '('  error {yyxpt(_("(possibly empty) argument list after '('"),$3);}  |
   FUNCTION  IDENT '(' argumentList ')' error {yyxpt(_("statement list after ')'"),$5);} |
   FUNCTION  returnDeclaration  error {yyxpt(_("function name for function declared"),$1);} |
   FUNCTION  returnDeclaration IDENT error {yyxpt(_("argument list or statement list following function name :") +
  $3.v.p->text.c_str(), $3);} |
   FUNCTION  returnDeclaration IDENT '('  error {yyxpt(_("(possibly empty) argument list after '('"),$4);} |
   FUNCTION  returnDeclaration IDENT '(' argumentList ')' error {yyxpt(_("statement list after ')'"),$6);}
  ;

functionDefList:
  functionDef |
  functionDefList functionDef
  ;

returnDeclaration:
  VARARGOUT '=' {$$.v.p = $1.v.p;}
  | IDENT '=' {$$.v.p = $1.v.p;}
  | '[' argumentList ']' '=' {$$.v.p = $2.v.p;}
  | '[' ']' '=' {$$.v.p = nullptr;}
  | IDENT error {yyxpt(_("an '=' symbol after identifier in return declaration"),$1);}
  | '[' error {yyxpt(_("a valid list of return arguments in return declaration"),$1);}
  | '[' argumentList error {yyxpt(_("matching ']' in return declaration for '['"),$1);}
  | '[' argumentList ']' error {yyxpt(_("an '=' symbol after return declaration"),$3);}
  ;

argumentList:
  argument {$$.v.p = $1.v.p;}
  | argumentList ',' argument {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);}
  ;

argument:
  IDENT
  ;


statementList:
   statement {$$.v.p = AbstractSyntaxTree::createNode(OP_BLOCK,$1.v.p,$1.v.p->getContext());} |
   statementList statement {$$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);}
   ;

statement:
   statementType ENDQSTMNT {
        $$.v.p = AbstractSyntaxTree::createNode(OP_QSTATEMENT,NULL,$2.v.i);
      $$.v.p->down = $1.v.p;
   }
   | statementType ENDSTMNT {
      $$.v.p = AbstractSyntaxTree::createNode(OP_RSTATEMENT,NULL,$2.v.i);
            $$.v.p->down = $1.v.p;
   }
   | statementType ',' {
      $$.v.p = AbstractSyntaxTree::createNode(OP_RSTATEMENT,NULL,$2.v.i);
      $$.v.p->down = $1.v.p;
   }
   ;

statementType:
   assignmentStatement
   | expr
   | {$$.v.p = AbstractSyntaxTree::createNode(null_node,"",-1);}
   | multiFunctionCall
   | forStatement
   | breakStatement
   | continueStatement
   | whileStatement
   | ifStatement
   | switchStatement
   | tryStatement
   | pauseStatement
   | returnStatement
   | specialSyntaxStatement
   | QUIT
   | ABORT
   | endfunctionStatement
;

endfunctionStatement:
  ENDFUNCTION;

specialSyntaxStatement:
  IDENT NUMERIC {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext());} |
  STRING STRING {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext());} |
  CHARACTER CHARACTER {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext());} |
  IDENT STRING {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext());} |
  IDENT CHARACTER {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext());} |
  IDENT IDENT {$$.v.p = AbstractSyntaxTree::createNode(OP_SCALL,$1.v.p,$2.v.p,$1.v.p->getContext()); } |
  specialSyntaxStatement STRING {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement CHARACTER {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement IDENT {$1.v.p->addChild($2.v.p);} |
  specialSyntaxStatement NUMERIC {$1.v.p->addChild($2.v.p);}

returnStatement:
  RETURN
  ;

pauseStatement:
  KEYBOARD
  ;

continueStatement:
   CONTINUE
   ;
breakStatement:
   BREAK
   ;

tryStatement:
  TRY statementList optionalCatch END
  {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    if ($3.v.p != nullptr) $$.v.p->addChild($3.v.p);
  }
  | TRY statementList optionalCatch error
  {yyxpt(_("matching 'end' to 'try' clause from line ") + decodeline($1),$4);}
        ;

optionalCatch:
  CATCH IDENT newLine statementList {
    $$.v.p = $2.v.p;
    $$.v.p->addChild($4.v.p);
  }
  | CATCH statementList {$$.v.p = $2.v.p;}
  | {$$.v.p = nullptr;}
  ;

switchStatement:
  SWITCH  expr optionalEndStatement caseBlock otherwiseClause END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    if ($4.v.p != nullptr) $$.v.p->addChild($4.v.p);
    if ($5.v.p != nullptr) $$.v.p->addChild($5.v.p);
  } |
  SWITCH  expr optionalEndStatement caseBlock otherwiseClause error {
          yyxpt(_("matching 'end' to 'switch' clause from line ") + decodeline($1),$6);
        }
        ;

optionalEndStatement:
  ',' | ENDSTMNT | ENDQSTMNT | ';'
  ;

newLine:
  ENDSTMNT | ENDQSTMNT
  ;


caseBlock:
  {$$.v.p = nullptr;} | caseList
  ;

caseList:
  caseStatement {
    $$.v.p = AbstractSyntaxTree::createNode(OP_CASEBLOCK,$1.v.p,$1.v.p->getContext());
  } |
  caseList caseStatement {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);
  }
;

caseStatement:
  CASE expr optionalEndStatement statementList {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p); $$.v.p->addChild($4.v.p);
  }
;

otherwiseClause:
  OTHERWISE statementList {
    $$.v.p = $2.v.p;
  } |
  {
    $$.v.p = nullptr;
  }
;

forStatement:
  FOR forIndexExpression optionalEndStatement END {
   $$.v.p = nullptr;
  } |
  FOR forIndexExpression optionalEndStatement statementList END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    $$.v.p->addChild($4.v.p);
  } |
  FOR forIndexExpression optionalEndStatement statementList error
           {yyxpt(_("'end' to match 'for' statement from line ") + decodeline($1),$5);}
;

forIndexExpression:
  '(' IDENT '=' expr ')' {$$.v.p = $2.v.p; $$.v.p->addChild($4.v.p);} |
  IDENT '=' expr {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);} |
  IDENT {$$.v.p = $1.v.p;
        $$.v.p->addChild(AbstractSyntaxTree::createNode(OP_RHS, AbstractSyntaxTree::createNode(id_node,$1.v.p->text.c_str(), $1.v.p->getContext()),$1.v.p->getContext())); } |
  '(' IDENT '=' expr error {yyxpt(_("matching right parenthesis"),$1);} |
  '(' IDENT '=' error {yyxpt(_("indexing expression"),$3);} |
  '(' IDENT error {yyxpt(_("equals operator after loop index"),$2);} |
  '(' error {yyxpt(_("identifier that is the loop variable"),$1);} |
  IDENT '=' error {yyxpt(_("indexing expression"),$2);} |
  error {yyxpt(_("identifier or assignment (id = expr) after 'for' "),$1);}
;

whileStatement:
  WHILE expr optionalEndStatement END {
    $$.v.p = nullptr;
  }  |
  WHILE expr optionalEndStatement statementList END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    $$.v.p->addChild($4.v.p);
  }  |
  WHILE error {yyxpt(_("test expression after 'while'"),$1);} |
  WHILE expr optionalEndStatement statementList error
  {yyxpt(_("'end' to match 'while' statement from line ") + decodeline($1),$5);}
;

ifStatement:
  IF conditionedStatement elseIfBlock elseStatement END {
    $$.v.p = $1.v.p;
    $$.v.p->addChild($2.v.p);
    if ($3.v.p != nullptr) $$.v.p->addChild($3.v.p);
    if ($4.v.p != nullptr) $$.v.p->addChild($4.v.p);
  } |
  IF error {yyxpt(_("condition expression for 'if'"),$1);} |
  IF conditionedStatement elseIfBlock elseStatement error {yyxpt(_("'end' to match 'if' statement from line ") + decodeline($1),$5);}
;

conditionedStatement:
  expr optionalEndStatement statementList {
    $$.v.p = AbstractSyntaxTree::createNode(OP_CSTAT,$1.v.p,$3.v.p,$1.v.p->getContext());
  } |
  expr optionalEndStatement {
	  $$.v.p = AbstractSyntaxTree::createNode(OP_CSTAT,$1.v.p,$1.v.p->getContext());
	} |
  expr error {yyxpt("valid list of statements after condition",$2);}
;

elseIfBlock:
  /* empty */ {$$.v.p = nullptr;} |
  elseIfStatementList
  ;

elseIfStatementList:
  elseIfStatement {
    $$.v.p = AbstractSyntaxTree::createNode(OP_ELSEIFBLOCK,$1.v.p,$1.v.p->getContext());
  } |
  elseIfStatementList elseIfStatement {
    $$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);
  }
;

elseIfStatement:
  ELSEIF conditionedStatement {
    $$.v.p = $2.v.p;
  } |
  ELSEIF error {yyxpt(_("test condition for 'elseif' clause"),$1);};

elseStatement:
  ELSE statementList {
    $$.v.p = $2.v.p;
  } |
  /* empty */ {$$.v.p = nullptr;} |
  ELSE error {yyxpt(_("statement list for 'else' clause"),$1);}
;

assignmentStatement:
  symbRefList '=' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_ASSIGN,$1.v.p,$3.v.p,$2.v.i);}
  | symbRefList '=' error {yyxpt(_("expression in assignment"),$2);}
  ;

multiFunctionCall:
  '[' matrixDef ']' '='  IDENT '('  ')' {
  $$.v.p = AbstractSyntaxTree::createNode(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  }
  | '[' matrixDef ']' '='  IDENT '('  indexList ')' {
    $5.v.p->addChild(AbstractSyntaxTree::createNode(OP_PARENS,$7.v.p,$6.v.i));
    $$.v.p = AbstractSyntaxTree::createNode(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  }
  | '[' matrixDef ']' '='  IDENT '{'  indexList '}' {
    $5.v.p->addChild(AbstractSyntaxTree::createNode(OP_PARENS,$7.v.p,$6.v.i));
    $$.v.p = AbstractSyntaxTree::createNode(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  }
  | '[' matrixDef ']' '=' IDENT  {
    $5.v.p->addChild(AbstractSyntaxTree::createNode(OP_PARENS,NULL,-1));
    $$.v.p = AbstractSyntaxTree::createNode(OP_MULTICALL,$2.v.p,$5.v.p,$1.v.i);
  }
  | '[' matrixDef ']' '='  IDENT '{'  indexList error {yyxpt(_("matching right bracket"), $6);}
  | '[' matrixDef ']' '='  IDENT '('  indexList error {yyxpt(_("matching right parenthesis"), $6);}
  | '[' matrixDef ']' '='  IDENT '('  error {yyxpt(_("indexing list"), $6);}
  | '[' matrixDef ']' '='  IDENT '{'  error {yyxpt(_("indexing list"), $6);}
  | '[' matrixDef ']' '='  IDENT error {yyxpt(_("left parenthesis"),$5);}
  | '[' matrixDef ']' '=' error {yyxpt("identifier",$4);}
  ;

expr:
  expr ':' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_COLON,$1.v.p,$3.v.p,$2.v.i);}
  | expr ':' error {yyxpt(_("an expression after ':'"), $2);}
  | terminal
  | expr '+' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_PLUS,$1.v.p,$3.v.p,$2.v.i);}
  | expr '+' error {yyxpt(_("an expression after '+'"), $2);}
  | expr '-' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_SUBTRACT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '-' error {yyxpt(_("an expression after '-'"), $2);}
  | expr '*' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_TIMES,$1.v.p,$3.v.p,$2.v.i);}
  | expr '*' error {yyxpt(_("an expression after '*'"),$2);}
  | expr '/' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_RDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr '/' error {yyxpt(_("an expression after '/'"),$2);}
  | expr '\\' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_LDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr '\\' error {yyxpt(_("an expression after '\\'"),$2);}
  | expr '|' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_OR,$1.v.p,$3.v.p,$2.v.i);}
  | expr '|' error {yyxpt(_("an expression after '|'"),$2);}
  | expr '&' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_AND,$1.v.p,$3.v.p,$2.v.i);}
  | expr '&' error {yyxpt(_("an expression after '&'"),$2);}
  | expr SOR expr {$$.v.p = AbstractSyntaxTree::createNode(OP_SOR,$1.v.p,$3.v.p,$2.v.i);}
  | expr SOR error {yyxpt(_("an expression after '||'"),$2);}
  | expr SAND expr {$$.v.p = AbstractSyntaxTree::createNode(OP_SAND,$1.v.p,$3.v.p,$2.v.i);}
  | expr SAND error {yyxpt(_("an expression after '&&'"),$2);}
  | expr '<' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_LT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '<' error {yyxpt(_("an expression after '<'"),$2);}
  | expr LE  expr {$$.v.p = AbstractSyntaxTree::createNode(OP_LEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr LE  error {yyxpt(_("an expression after '<='"),$2);}
  | expr '>' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_GT,$1.v.p,$3.v.p,$2.v.i);}
  | expr '>' error {yyxpt(_("an expression after '>'"),$2);}
  | expr GE  expr {$$.v.p = AbstractSyntaxTree::createNode(OP_GEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr GE  error {yyxpt(_("an expression after '>='"),$2);}
  | expr EQ  expr {$$.v.p = AbstractSyntaxTree::createNode(OP_EQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr EQ  error {yyxpt(_("an expression after '=='"),$2);}
  | expr NE  expr {$$.v.p = AbstractSyntaxTree::createNode(OP_NEQ,$1.v.p,$3.v.p,$2.v.i);}
  | expr NE  error {yyxpt(_("an expression after '~='"),$2);}
  | expr DOTTIMES expr {$$.v.p = AbstractSyntaxTree::createNode(OP_DOT_TIMES,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTTIMES error {yyxpt(_("an expression after '.*'"), $2);}
  | expr DOTRDIV  expr {$$.v.p = AbstractSyntaxTree::createNode(OP_DOT_RDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTRDIV  error {yyxpt(_("an expression after './'"),$2);}
  | expr DOTLDIV expr {$$.v.p = AbstractSyntaxTree::createNode(OP_DOT_LDIV,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTLDIV error {yyxpt(_("an expression after '.\\'"),$2);}
  | '-' expr %prec NEG {$$.v.p = AbstractSyntaxTree::createNode(OP_UMINUS,$2.v.p,$1.v.i);}
  | '+' expr %prec POS {$$.v.p = AbstractSyntaxTree::createNode(OP_UPLUS, $2.v.p, $1.v.i);}
  | '~' expr %prec NOT {$$.v.p = AbstractSyntaxTree::createNode(OP_NOT,$2.v.p,$1.v.i);}
  | '~' error %prec NOT {yyxpt(_("an expression after logical not"),$2);}
  | expr '^' expr  {$$.v.p = AbstractSyntaxTree::createNode(OP_MPOWER,$1.v.p,$3.v.p,$2.v.i);}
  | expr '^' error  {yyxpt(_("an expression after '^'"),$2);}
  | expr DOTPOWER expr {$$.v.p = AbstractSyntaxTree::createNode(OP_POWER,$1.v.p,$3.v.p,$2.v.i);}
  | expr DOTPOWER error {yyxpt(_("an expression after '.^'"),$2);}
  | expr '\''          {$$.v.p = AbstractSyntaxTree::createNode(OP_TRANSPOSE,$1.v.p,$2.v.i);}
  | expr DOTTRANSPOSE  {$$.v.p = AbstractSyntaxTree::createNode(OP_DOT_TRANSPOSE,$1.v.p,$2.v.i);}
  | '(' expr ')'  {$$.v.p = $2.v.p;}
  | '(' expr error  {yyxpt(_("a right parenthesis after expression to match this one"),$1);}
  | '(' error  {yyxpt(_("an expression after left parenthesis"),$1);}
  ;

terminal:
	NUMERIC
  | CHARACTER
  | STRING
  | MAGICEND
  | symbRefList {$$.v.p = AbstractSyntaxTree::createNode(OP_RHS,$1.v.p,$1.v.p->getContext());}
  | '[' matrixDef ']' {$$.v.p = $2.v.p;}
  | '[' error {yyxpt(_("a matrix definition followed by a right bracket"),$1);}
  | '[' rowSeperator matrixDef ']' {$$.v.p = $3.v.p;}
  | '[' matrixDef rowSeperator ']' {$$.v.p = $2.v.p;}
  | '[' rowSeperator matrixDef rowSeperator ']' {$$.v.p = $3.v.p;}
	| '[' ']' {$$.v.p = AbstractSyntaxTree::createNode(OP_EMPTY,NULL,$1.v.i);}
  | '{' cellDef '}' {$$.v.p = $2.v.p;}
  | '{' rowSeperator cellDef '}' {$$.v.p = $3.v.p;}
  | '{' cellDef rowSeperator '}' {$$.v.p = $2.v.p;}
  | '{' rowSeperator cellDef rowSeperator '}' {$$.v.p = $3.v.p;}
	| '{' '}' {$$.v.p = AbstractSyntaxTree::createNode(OP_EMPTY_CELL,NULL,$1.v.i);}
	| '{' error {yyxpt(_("a cell-array definition followed by a right brace"),$1);};

symbRefList:
  IDENT
    | symbRefList symbRef {$$.v.p = $1.v.p; $$.v.p->addChild($2.v.p);};

symbRef:
  '(' indexList ')' {$$.v.p = AbstractSyntaxTree::createNode(OP_PARENS,$2.v.p,$1.v.i); }
  | '(' ')' {$$.v.p = AbstractSyntaxTree::createNode(OP_PARENS,NULL,$1.v.i); }
	| '(' indexList error {yyxpt(_("matching right parenthesis"),$1);}
  | '{' indexList '}' {$$.v.p = AbstractSyntaxTree::createNode(OP_BRACES,$2.v.p,$1.v.i); }
	| '{' indexList error {yyxpt(_("matching right brace"),$1);}
  | '.' IDENT {$$.v.p = AbstractSyntaxTree::createNode(OP_DOT,$2.v.p,$1.v.i); }
	| '.' '(' expr ')' {$$.v.p = AbstractSyntaxTree::createNode(OP_DOTDYN,$3.v.p,$1.v.i);};

indexElement:
  expr
  | ':' {$$.v.p = AbstractSyntaxTree::createNode(OP_ALL,NULL,$1.v.i);}
  | '/' IDENT '=' expr {$$.v.p = AbstractSyntaxTree::createNode(OP_KEYWORD,$2.v.p,$4.v.p,$1.v.i);}
  | '/' IDENT '=' error {yyxpt(_("expecting expression after '=' in keyword assignment"),$3);}
  | '/' IDENT {$$.v.p = AbstractSyntaxTree::createNode(OP_KEYWORD,$2.v.p,$1.v.i);}
  | '/' error {yyxpt(_("expecting keyword identifier after '/' in keyword assignment"),$1);}
        ;

indexList:
  indexElement |
        indexList ',' indexElement {$$.v.p = $1.v.p; $$.v.p->addPeer($3.v.p);}
        ;

cellDef:
       rowDef {$$.v.p = AbstractSyntaxTree::createNode(OP_BRACES,$1.v.p,$1.v.p->getContext());}|
       cellDef rowSeperator rowDef {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);}
       ;

matrixDef:
       rowDef {$$.v.p = AbstractSyntaxTree::createNode(OP_BRACKETS,$1.v.p,$1.v.p->getContext());}|
       matrixDef rowSeperator rowDef {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);}
       ;

rowSeperator:
       ENDSTMNT | ENDQSTMNT
       ;

columnSep:
       ','
       ;

rowDef:
       expr {$$.v.p = AbstractSyntaxTree::createNode(OP_SEMICOLON,$1.v.p,$1.v.p->getContext());} |
       rowDef columnSep expr {$$.v.p = $1.v.p; $$.v.p->addChild($3.v.p);};

%%
//=============================================================================
namespace Nelson {
//=============================================================================
  void callyyparse() {
    std::scoped_lock<std::mutex> lock{parseMutex};
    yyparse();
  }
//=============================================================================
}
//=============================================================================
// clang-format on
