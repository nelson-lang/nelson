%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
% version 2.1 of the License, or (at your option) any later version.
%
% Alternatively, you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public
% License along with this program. If not, see <http://www.gnu.org/licenses/>.
% LICENCE_BLOCK_END
%=============================================================================
function [status, compiler] = loadcompilerconf()
   if ~ispc()
     compiler = 'unix';
     status = false;
     return
   end
   compiler = '';
   status = false;
   arch = computer('arch');
   jsonfile = [prefdir(), '/compiler_', arch, '.json'];
   if isfile(jsonfile)
     txt = fileread(jsonfile);
     json = jsondecode(txt);
     for f = fieldnames(json)(:)'
       if strcmp(f{1},'COMPILER_CHOICE')
         compiler = getfield(json,f{1});
         status = true;
       else
         val = getfield(json, f{1});
         if strcmp(f{1},'PATH')
           setenv('PATH', [val, ';', getenv('PATH')]);
         else
           previous = getenv(f{1});
           if strcmp(previous, '')
             setenv(f{1}, val);
           else
             if ~contains(previous, val)
               setenv(f{1}, [val, ';', previous]);
             end
           end
         end
       end
     end
   end
endfunction
%=============================================================================
