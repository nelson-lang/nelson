//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function [status, message] = configuremingw(mingw_bin_path)
   status = false;
   message = '';
   clear('havecompiler');  // clear persistent variable
   if ~ispc()
     status = false;
     message = _('Not implemented on this platform.');
     return
   end     
   if isdir(mingw_bin_path) 
     arch = computer('arch');
     if strcmp(arch, 'win64')
       ref_gcc_compiler = [mingw_bin_path, '/', 'x86_64-w64-mingw32-gcc.exe'];
     else
       ref_gcc_compiler = [mingw_bin_path, '/', 'i686-w64-mingw32-gcc.exe'];
     end
     if isfile(ref_gcc_compiler)
       config.COMPILER_CHOICE = 'mingw';
       config.PATH = mingw_bin_path;
       json = jsonencode(config);
       json = jsonprettyprint(json);
       filewrite([prefdir(), '/compiler_', arch, '.json'], json);
       loadcompilerconf();
       status = true;
     else
       message = [ref_gcc_compiler, ' ', _('not found.')];
     end
   else
     message = [mingw_bin_path, ' ', _('not found.')];
   end
endfunction
//=============================================================================