%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
R = hann([]);
REF = zeros(0, 1);
assert_isequal(R, REF);
%=============================================================================
R = hann(zeros(3, 0, 'single'));
REF = zeros(0, 1);
assert_isequal(R, REF);
%=============================================================================
R = hann(1);
REF = 1;
assert_isequal(R, REF);
%=============================================================================
R = hann(2)
REF = [0;0];
assert_isequal(R, REF);
%=============================================================================
R = hann(8);
REF = [0; 0.1883; 0.6113; 0.9505; 0.9505; 0.6113; 0.1883; 0];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
assert_checkerror('R = hann(-4)', _('M must be a positive integer.'));
%=============================================================================
R = hann(8, 'symetric');
REF = [0; 0.1883; 0.6113; 0.9505; 0.9505; 0.6113; 0.1883; 0];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = hann(8, 'periodic');
REF = [0; 0.1464; 0.5; 0.8536; 1; 0.8536; 0.5; 0.1464];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
