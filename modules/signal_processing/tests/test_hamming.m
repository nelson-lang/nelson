%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
R = hamming([]);
REF = zeros(0, 1);
assert_isequal(R, REF);
%=============================================================================
R = hamming(zeros(3, 0, 'single'));
REF = zeros(0, 1);
assert_isequal(R, REF);
%=============================================================================
R = hamming(1);
REF = 1;
assert_isequal(R, REF);
%=============================================================================
R = hamming(2)
REF = [0.08; 0.08];
assert_isapprox(R, REF, 1e-2);
%=============================================================================
R = hamming(8);
REF = [0.08; 0.2532; 0.6424; 0.9544; 0.9544; 0.6424; 0.2531; 0.08];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
assert_checkerror('R = hamming(-4)', _('M must be a positive integer.'));
%=============================================================================
R = hamming(8, 'symetric');
REF = [0.08; 0.2532; 0.6424; 0.9544; 0.9544; 0.6424; 0.2531; 0.08];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
R = hamming(8, 'periodic');
REF = [0.08; 0.2147; 0.54; 0.8653;1; 0.8653; 0.54; 0.2147];
assert_isapprox(R, REF, 1e-4);
%=============================================================================
