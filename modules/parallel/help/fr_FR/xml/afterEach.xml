<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
        <language>fr_FR</language>
        <keyword>afterEach</keyword>
        <short_description
  >Exécuter une fonction après chaque fin d'exécution en arrière-plan.</short_description>
    <syntax>
        <syntax_item>B = afterEach(F, fcn, n)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>F</param_name>
            <param_description
      >objet Future en entrée (scalaire ou tableau).</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>fcn</param_name>
            <param_description
      >handle de fonction : fonction à exécuter après chaque future en entrée.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>n</param_name>
            <param_description>nombre d'arguments de sortie.</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>B</param_name>
            <param_description>objet AfterEachFuture.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p><b>B = afterEach(F, fcn, n)</b> renvoie un objet AfterEachFuture <b
      >B</b>.</p>
        <p>La fonction <b
      >fcn</b> est automatiquement exécutée après chaque élément du tableau Future <b
      >F</b> lorsqu'il est terminé.</p>
        <p>Si l'un des éléments de <b
      >F</b> rencontre une erreur, la propriété <b>Error</b> de <b
      >B</b> contient l'erreur.</p>
    </description>
        <used_function />
        <bibliography />
        <examples>
            <example_item>
                <example_item_type>nelson</example_item_type>
                <example_item_description />
                <example_item_data
        runnable="cli"
      ><![CDATA[pool = backgroundPool()
fptrRand = str2func('rand')
fptrMax = str2func('@(r) max(r)')
fptrMin = str2func('@(r) min(r)')
for idx= 1:10
    f(idx) = parfeval(pool, fptrRand, 1, 1000, 1);
end
maxFuture = afterEach(f, fptrMax, 1);
minFuture = afterAll(maxFuture, fptrMin, 1);
fetchOutputs(minFuture)
fetchOutputs(maxFuture)]]></example_item_data>
            </example_item>
        </examples>
        <see_also>
            <see_also_item>
                <link linkend="${parallel}backgroundPool">backgroundPool</link>
            </see_also_item>
            <see_also_item>
                <link linkend="${parallel}fetchOutputs">fetchOutputs</link>
            </see_also_item>
            <see_also_item>
                <link linkend="${parallel}afterAll">afterAll</link>
            </see_also_item>
        </see_also>
        <history>
            <history_item>
                <history_version>1.0.0</history_version>
                <history_description>version initiale</history_description>
            </history_item>
        </history>
        <authors>
            <author_item>Allan CORNET</author_item>
        </authors>
    </xmldoc>
