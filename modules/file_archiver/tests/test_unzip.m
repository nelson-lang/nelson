%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('unzip'), -2);
assert_isequal(nargout('unzip'), -1);
%=============================================================================
TMPDIR = tempdir();
if ismac()
  TMPDIR = ['/private', TMPDIR];
end
%=============================================================================
temp_dest = [TMPDIR, createGUID()];
mkdir(temp_dest);
cd(temp_dest);
R = unzip([nelsonroot(), '/modules/file_archiver/tests/test_zip.zip']);
REF = { [temp_dest, '/test_zip/'], ...
[temp_dest, '/test_zip/dir_1/'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/file_1_1_1.txt'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/file_1_1_2.txt'], ...
[temp_dest, '/test_zip/dir_1/dir_1_2/'], ...
[temp_dest, '/test_zip/dir_1/file_1_1.txt'], ...
[temp_dest, '/test_zip/dir_1/file_1_2.txt'], ...
[temp_dest, '/test_zip/dir_2/'], ...
[temp_dest, '/test_zip/dir_2/file_2_1.txt'], ...
[temp_dest, '/test_zip/file_1.txt'], ...
[temp_dest, '/test_zip/file_2.txt'], ...
[temp_dest, '/file_0.txt'], ...
[temp_dest, '/test_zip/1汉字2.PNG']};
assert_isequal(R, REF);
for r = R
  rr = r{1};
  if endsWith(rr, '/')
    assert_istrue(isdir(rr));
  else
    assert_istrue(isfile(rr));
    fileinfo = dir(rr);
    assert_istrue(fileinfo.bytes > 0);
  end
end
cd(nelsonroot());
rmdir(temp_dest, 's');
%=============================================================================
temp_dest = [TMPDIR, createGUID()];
R = unzip([nelsonroot(), '/modules/file_archiver/tests/test_zip.zip'], temp_dest);
REF = { [temp_dest, '/test_zip/'], ...
[temp_dest, '/test_zip/dir_1/'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/file_1_1_1.txt'], ...
[temp_dest, '/test_zip/dir_1/dir_1_1/file_1_1_2.txt'], ...
[temp_dest, '/test_zip/dir_1/dir_1_2/'], ...
[temp_dest, '/test_zip/dir_1/file_1_1.txt'], ...
[temp_dest, '/test_zip/dir_1/file_1_2.txt'], ...
[temp_dest, '/test_zip/dir_2/'], ...
[temp_dest, '/test_zip/dir_2/file_2_1.txt'], ...
[temp_dest, '/test_zip/file_1.txt'], ...
[temp_dest, '/test_zip/file_2.txt'], ...
[temp_dest, '/file_0.txt'], ...
[temp_dest, '/test_zip/1汉字2.PNG']};
assert_isequal(R, REF);
%=============================================================================
for r = R
  rr = r{1};
  if endsWith(rr, '/')
    assert_istrue(isdir(rr));
  else
    assert_istrue(isfile(rr));
    assert_istrue(fileinfo.bytes > 0);
  end
end
cd(tempdir());
rmdir(temp_dest, 's');
%=============================================================================
