//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('zip'), -3);
assert_isequal(nargout('zip'), -1);
//=============================================================================
sourcedir = [nelsonroot(),'/module_skeleton'];
if ~isdir(sourcedir)
  return
end
//=============================================================================
TMPDIR = tempdir();
if ismac()
  TMPDIR = ['/private', TMPDIR];
end
//=============================================================================
DEST_1 = [TMPDIR, 'zip_test_1.zip'];
cd([nelsonroot(), '/module_skeleton'])
R = zip(DEST_1, '*.nls');
REF1 = {'builder.nls'};
REF2 = {'builder.nls', 'loader.nls'};
if length(R) == 2
  assert_isequal(R, REF2);
else
  assert_isequal(R, REF1);
end
assert_istrue(isfile(DEST_1));
//=============================================================================
DEST_2 = [TMPDIR, 'zip_test_2.zip'];
cd([nelsonroot(), '/module_skeleton'])
R = zip(DEST_2, [nelsonroot(), '/module_skeleton/*.nls']);
REF1 = {'builder.nls'};
REF2 = {'builder.nls', 'loader.nls'};
if length(R) == 2
  assert_isequal(R, REF2);
else
  assert_isequal(R, REF1);
end
assert_istrue(isfile(DEST_2));
//=============================================================================
temp_dest = [TMPDIR, createGUID()];
mkdir(temp_dest);
cd(temp_dest);
R1 = unzip(DEST_1);
REF1 = {[temp_dest, '/builder.nls']};
REF2 = {[temp_dest, '/builder.nls'] , [temp_dest, '/loader.nls']};
if length(R1) == 2
  assert_isequal(R1, REF2);
else
  assert_isequal(R1, REF1);
end
cd(tempdir());
rmdir(temp_dest, 's');
//=============================================================================
temp_dest = [TMPDIR, createGUID()];
mkdir(temp_dest);
cd(temp_dest);
R2 = unzip(DEST_2);
REF1 = {[temp_dest, '/builder.nls']};
REF2 = {[temp_dest, '/builder.nls'] , [temp_dest, '/loader.nls']};
if length(R2) == 2
  assert_isequal(R2, REF2);
else
  assert_isequal(R2, REF1);
end
cd(tempdir());
rmdir(temp_dest, 's');
//=============================================================================
DEST_3 = [TMPDIR, 'zip_test_3.zip'];
R3 = zip(DEST_3, [nelsonroot(), '/module_skeleton']);
REF = {'module_skeleton/builder.nls', ...
 'module_skeleton/builtin/', ...
 'module_skeleton/builtin/builder.nls', ...
 'module_skeleton/builtin/cpp/', ...
 'module_skeleton/builtin/cpp/cpp_sumBuiltin.cpp', ...
 'module_skeleton/builtin/include/', ...
 'module_skeleton/builtin/include/cpp_sumBuiltin.hpp', ...
 'module_skeleton/etc/', ...
 'module_skeleton/etc/finish.nls', ...
 'module_skeleton/etc/startup.nls', ...
 'module_skeleton/functions/', ...
 'module_skeleton/functions/nelson_sum.nlf', ...
 'module_skeleton/help/', ...
 'module_skeleton/help/en_US/', ...
 'module_skeleton/help/en_US/images/', ...
 'module_skeleton/help/en_US/images/banner_nelson.png', ...
 'module_skeleton/help/en_US/images/fibonacci.png', ...
 'module_skeleton/help/en_US/xml/', ...
 'module_skeleton/help/en_US/xml/chapter.xml', ...
 'module_skeleton/help/en_US/xml/cpp_sum.xml', ...
 'module_skeleton/help/en_US/xml/nelson_sum.xml', ...
 'module_skeleton/module.json', ...
 'module_skeleton/src/', ...
 'module_skeleton/src/builder.nls', ...
 'module_skeleton/src/cpp/', ...
 'module_skeleton/src/cpp/cpp_sum.cpp', ...
 'module_skeleton/src/include/', ...
 'module_skeleton/src/include/cpp_sum.hpp', ...
 'module_skeleton/tests/', ...
 'module_skeleton/tests/test_cpp_sum.nls'};
for e = REF
    assert_istrue(any(contains(R3, e{1})));
end
 assert_istrue(isfile(DEST_3));
 info = dir(DEST_3);
 assert_istrue(info.bytes > 0);
//=============================================================================
DEST_4 = [TMPDIR, 'zip_test_4.zip'];
R4 = zip(DEST_4, [nelsonroot(), '/module_skeleton/']);
REF = {'builder.nls', ...
 'builtin/', ...
 'builtin/builder.nls', ...
 'builtin/cpp/', ...
 'builtin/cpp/cpp_sumBuiltin.cpp', ...
 'builtin/include/', ...
 'builtin/include/cpp_sumBuiltin.hpp', ...
 'etc/', ...
 'etc/finish.nls', ...
 'etc/startup.nls', ...
 'functions/', ...
 'functions/nelson_sum.nlf', ...
 'help/', ...
 'help/en_US/', ...
 'help/en_US/images/', ...
 'help/en_US/images/banner_nelson.png', ...
 'help/en_US/images/fibonacci.png', ...
 'help/en_US/xml/', ...
 'help/en_US/xml/chapter.xml', ...
 'help/en_US/xml/cpp_sum.xml', ...
 'help/en_US/xml/nelson_sum.xml', ...
 'module.json', ...
 'src/', ...
 'src/builder.nls', ...
 'src/cpp/', ...
 'src/cpp/cpp_sum.cpp', ...
 'src/include/', ...
 'src/include/cpp_sum.hpp', ...
 'tests/', ...
 'tests/test_cpp_sum.nls'};
for e = REF
    assert_istrue(any(contains(R4, e{1})));
end
assert_istrue(isfile(DEST_4));
info = dir(DEST_4);
assert_istrue(info.bytes > 0);
//=============================================================================
DEST_5 = [TMPDIR, 'zip_test_5.zip'];
R5 = zip(DEST_5, [nelsonroot(), '/module_skeleton/.']);
REF = {'builder.nls', ...
 'builtin/', ...
 'builtin/builder.nls', ...
 'builtin/cpp/', ...
 'builtin/cpp/cpp_sumBuiltin.cpp', ...
 'builtin/include/', ...
 'builtin/include/cpp_sumBuiltin.hpp', ...
 'etc/', ...
 'etc/finish.nls', ...
 'etc/startup.nls', ...
 'functions/', ...
 'functions/nelson_sum.nlf', ...
 'help/', ...
 'help/en_US/', ...
 'help/en_US/images/', ...
 'help/en_US/images/banner_nelson.png', ...
 'help/en_US/images/fibonacci.png', ...
 'help/en_US/xml/', ...
 'help/en_US/xml/chapter.xml', ...
 'help/en_US/xml/cpp_sum.xml', ...
 'help/en_US/xml/nelson_sum.xml', ...
 'module.json', ...
 'src/', ...
 'src/builder.nls', ...
 'src/cpp/', ...
 'src/cpp/cpp_sum.cpp', ...
 'src/include/', ...
 'src/include/cpp_sum.hpp', ...
 'tests/', ...
 'tests/test_cpp_sum.nls'};
for e = REF
    assert_istrue(any(contains(R5, e{1})));
end
assert_istrue(isfile(DEST_5));
info = dir(DEST_5);
assert_istrue(info.bytes > 0);
//=============================================================================
cmd = 'R = zip(DEST_1, ''*.nls'', [nelsonroot(), ''/modules_skeleton''])';
assert_checkerror(cmd, _('Invalid root path.'));
//=============================================================================
