
ans =

    '//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.1.0
//=============================================================================
#include "NelsonGateway.hpp"
#include "example_nig_sumBuiltin.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
const std::wstring gatewayName = L"example";
//=============================================================================
static const nlsGateway gateway[] =
{
    { "example_nig_sum", (void*)Nelson::ExampleGateway::example_nig_sumBuiltin, 1, 2},
};
//=============================================================================
NLSGATEWAYFUNC(gateway)
//=============================================================================
NLSGATEWAYINFO(gateway)
//=============================================================================
NLSGATEWAYREMOVE(gateway)
//=============================================================================
NLSGATEWAYNAME()
//============================================================================='


ans =

    '//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.1.0
//=============================================================================
#pragma once
//=============================================================================
#include "ArrayOf.hpp"
//=============================================================================
namespace Nelson {
    namespace ExampleGateway {
        ArrayOfVector example_nig_sumBuiltin(int nLhs, const ArrayOfVector& argIn);
    }
}
//============================================================================='


ans =

    '//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// SPDX-License-Identifier: LGPL-3.0-or-later
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.1.0
//=============================================================================
#include <algorithm>
#include "Error.hpp"
#include "example_nig_sumBuiltin.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
#ifdef __cplusplus
extern "C"
{
#endif
extern int sum_ ( int *A, int *B, int *OUTPUT);
#ifdef __cplusplus
}
#endif
//=============================================================================
// [OUTPUT] = example_nig_sum(A, B)
//=============================================================================
ArrayOfVector Nelson::ExampleGateway::example_nig_sumBuiltin(Evaluator* eval, int nLhs, const ArrayOfVector& argIn)
{
    ArrayOfVector retval(nLhs);
    nargoutcheck(nLhs, 0, 1)
    nargincheck(argIn, 2, 2)

    // INPUT VARIABLES

    ArrayOf A = argIn[0];
    Dimensions dimsA = A.getDimensions();
    A.promoteType(NLS_INT32);
    int *A_ptr = (int*)A.getDataPointer();
    ArrayOf B = argIn[1];
    Dimensions dimsB = B.getDimensions();
    B.promoteType(NLS_INT32);
    int *B_ptr = (int*)B.getDataPointer();

    // IN/OUT VARIABLES


    // LOCAL VARIABLES


    // OUTPUT VARIABLES

    ArrayOf OUTPUT_output = ArrayOf::int32VectorConstructor(1);
    int *OUTPUT_output_ptr = (int*)OUTPUT_output.getDataPointer();

    // CHECK INPUT VARIABLES DIMENSIONS

    if (!dimsA.isScalar())
    {
        Error(_W("Input argument #1: scalar expected."));
    }
    if (!dimsB.isScalar())
    {
        Error(_W("Input argument #2: scalar expected."));
    }

    // CALL EXTERN FUNCTION

    try
    {
        sum_ ( A_ptr, B_ptr, OUTPUT_output_ptr);
    }
    catch (const std::runtime_error &e)
    {
        e.what();
        Error("sum function fails.");
    }

    // ASSIGN OUTPUT VARIABLES

    if (nLhs > 0)
    {
        retval << OUTPUT;
    }

    return retval;
}
//============================================================================='

