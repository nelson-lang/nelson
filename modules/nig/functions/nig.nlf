%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% This program is free software; you can redistribute it and/or
% modify it under the terms of the GNU Lesser General Public
% License as published by the Free Software Foundation; either
% version 2.1 of the License, or (at your option) any later version.
%
% Alternatively, you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public
% License along with this program. If not, see <http://www.gnu.org/licenses/>.
% LICENCE_BLOCK_END
%=============================================================================
function nig(varargin)
  if nargin ~= 2
    error(_('Wrong number of input arguments.'));
  end
  NIG_FUNCTIONS = varargin{1};
  NIG_DESTINATION = varargin{2};
  if ~isstruct(NIG_FUNCTIONS)
    error(_('struct expected.'));
  end
  if ~isdir(NIG_DESTINATION)
    error(_('an existing directory expected.'));
  end
  addpath([modulepath(nelsonroot(), 'nig', 'root'), '/functions/internal']);
  try
    have_module_subdirectories =  isdir([NIG_DESTINATION, '/builtin/cpp']) && isdir([NIG_DESTINATION, '/builtin/include']);
    len = length(NIG_FUNCTIONS);
    for k = [1:len]
      if have_module_subdirectories
        filenameCppBuiltin = [NIG_DESTINATION, '/builtin/cpp/', NIG_FUNCTIONS(k).NELSON_NAME, 'Builtin.cpp'];
        filenameHeaderBuiltin = [NIG_DESTINATION, '/builtin/include/', NIG_FUNCTIONS(k).NELSON_NAME, 'Builtin.hpp'];
      else
        filenameCppBuiltin = [NIG_DESTINATION, '/', NIG_FUNCTIONS(k).NELSON_NAME, 'Builtin.cpp'];
        filenameHeaderBuiltin = [NIG_DESTINATION, '/', NIG_FUNCTIONS(k).NELSON_NAME, 'Builtin.hpp'];
      end
      nig_txt_to_file(nig_generate_builtin_hpp(NIG_FUNCTIONS(k)), filenameHeaderBuiltin);
      nig_txt_to_file(nig_generate_builtin_cpp(NIG_FUNCTIONS(k)), filenameCppBuiltin);
    end
    if have_module_subdirectories
      filenameCppGateway = [NIG_DESTINATION, '/builtin/cpp/Gateway.cpp'];
    else
      filenameCppGateway = [NIG_DESTINATION, '/', 'Gateway.cpp'];
    end
    nig_txt_to_file(nig_generate_gateway_cpp(NIG_FUNCTIONS), filenameCppGateway);
  catch
    error_struct = lasterror();
    rmpath([modulepath(nelsonroot(), 'nig', 'root'), '/functions/internal']);
    error(error_struct);
  end
  rmpath([modulepath(nelsonroot(), 'nig', 'root'), '/functions/internal']);
endfunction
%=============================================================================
