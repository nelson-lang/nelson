%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
assert_isequal(nargin('dlmread'), 4);
assert_isequal(nargout('dlmread'), 1);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comma_1.csv'];
R = dlmread(csv_filename);
REF = [     1     2     3     4     5;
6     7     8     9    10;
11    -12    13    14    15];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comma_1.csv'];
R = dlmread(csv_filename, '');
REF = [     1     2     3     4     5;
6     7     8     9    10;
11    -12    13    14    15];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comma_1.csv'];
R = dlmread(csv_filename, ',');
REF = [     1     2     3     4     5;
6     7     8     9    10;
11    -12    13    14    15];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comma_1.csv'];
msg = _('Unable to parse numeric value at row');
try
    R = dlmread(csv_filename, ' ');
catch e
    assert_istrue(startsWith(e.message, msg));
end
%=============================================================================
% dlmread_comma_2 is invalid because it cannot generated by dlmwrite
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comma_2.csv'];
msg = _('Unable to parse numeric value at row');
try
    R = dlmread(csv_filename, ' ');
catch e
    assert_istrue(startsWith(e.message, msg));
end
%=============================================================================
% dlm_read does not support comments
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_comments.csv'];
msg = _('Unable to parse numeric value at row');
try
    R = dlmread(csv_filename);
catch e
    assert_istrue(startsWith(e.message, msg));
end
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_complex_1.csv'];
R = dlmread(csv_filename);
REF = [0.3110,   3.1400i,       0.;
            1,  40.6800i, -4.5300i;
5.0000+1.0000i, 5.0000+3.5000i, 67.0000-15.0000i;
  -Inf, complex(Inf, 2), complex(-Inf,-5);
   NaN,      complex(NaN, NaN), complex(NaN, Inf)];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_complex_2_OK.csv'];
R = dlmread(csv_filename);
REF = [6+3i 13-7i 20+4i 27-1.5i 34+3.14i 41-3i 48+3i 55-7i;
+0 -0 Inf -Inf NaN 1.D+308 1.e-308 1.e-323];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_complex_2_KO.csv'];
msg = _('Unable to parse numeric value at row');
try
    R = dlmread(csv_filename);
catch e
    assert_istrue(startsWith(e.message, msg));
end
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN_comma.csv'];
R = dlmread(csv_filename);
REF = [NaN,1,NaN;
-Inf,Inf,4];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN_semicomma.csv'];
R = dlmread(csv_filename);
REF = [NaN,1,NaN;
-Inf,Inf,4];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN_space.csv'];
R = dlmread(csv_filename);
REF = [NaN,1,NaN;
-Inf,Inf,4];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN_tab.csv'];
R = dlmread(csv_filename);
REF = [NaN,1,NaN;
-Inf,Inf,4];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN_tab.csv'];
R = dlmread(csv_filename, '\t');
REF = [NaN,1,NaN;
-Inf,Inf,4];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_Inf_NaN.csv'];
R = dlmread(csv_filename);
REF = [Inf,NaN,Inf, -Inf, NaN, NaN];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_integer_semicolon.csv'];
R = dlmread(csv_filename);
REF = [1,0,0,0,0;
0,1,0,0,0;
0,0,1,0,0];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_integer_space.csv'];
R = dlmread(csv_filename);
REF = [1,0,0,0,0;
0,1,0,0,0;
0,0,1,0,0];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_integer_tab.csv'];
R = dlmread(csv_filename);
REF = [1,0,0,0,0;
0,1,0,0,0;
0,0,1,0,0];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_list.csv'];
msg = _('Unable to parse numeric value at row');
try
    R = dlmread(csv_filename);
catch e
    assert_istrue(startsWith(e.message, msg));
end
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_list.csv'];
R = dlmread(csv_filename, ' ', 1, 0);
REF = [ 10.0000   27.7000   12.4000   12.0000;
11.0000   26.9000   13.5000   18.0000;
12.0000   27.4000   16.9000   31.0000;
13.0000   25.1000   12.7000   29.0000];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_list.csv'];
R = dlmread(csv_filename, ' ', [3 0 4 3]);
REF = [  12.0000   27.4000   16.9000   31.0000;
13.0000   25.1000   12.7000   29.0000];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_list.csv'];
R = dlmread(csv_filename, ' ', 'A3..C4');
REF = [  11.0000   26.9000   13.5000;
12.0000   27.4000   16.9000];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_precision_space.csv'];
R = dlmread(csv_filename);
REF = [1.1000000000000001	0.10000000000000001;
0.10000000000000001	1.1000000000000001;
0.10000000000000001	0.10000000000000001];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_precision.csv'];
R = dlmread(csv_filename);
REF = [1.1000000000000001,0.10000000000000002;
0.10000000000000003,1.1000000000000004;
0.10000000000000005,0.10000000000000006];
assert_isequal(R, REF);
%=============================================================================
csv_filename = [modulepath('spreadsheet'), '/tests/dlmread_semicomma.csv'];
R = dlmread(csv_filename);
REF = [1,1000000000000001,0,10000000000000001;
0,10000000000000001,1,1000000000000001;
0,10000000000000001,0,10000000000000001];
assert_isequal(R, REF);
%=============================================================================
