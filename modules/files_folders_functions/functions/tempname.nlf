//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function tempdest = tempname(varargin)
    if nargin == 0
        tempdirdest = tempdir();
    else
        if nargin == 1
            tempdirdest = checkArgument(varargin{1});
        else
            error(_('Wrong number of input arguments.'));
        end
    end
    if (strcmp(tempdirdest, tempdir()))
        tempdest = [tempdirdest, 'tp', strrep(createGUID,'-','_')];
    else
        tempdest = [tempdirdest, '/', 'tp', strrep(createGUID,'-','_')];
    end
    if isdir(tempdest) || isfile(tempdest)
        tempdest = tempname(tempdirdest);
    end
endfunction
//=============================================================================
function str = checkArgument(arg)
    str = arg;
    supported = (isstring(str) && isscalar(str)) || (ischar(str) && (size(str, 1) == 1));
    if (~supported)
        error(_('Invalid type for #1 input argument: ''char'' or ''string'' expected.'));
    end
    str = convertStringsToChars(str);
    if ~isdir(str)
        error(_('Invalid value for #1 input argument: directory must exists.'));
    end
endfunction
//=============================================================================
