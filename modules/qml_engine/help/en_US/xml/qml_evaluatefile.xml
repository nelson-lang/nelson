<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
  <copyright>SAME AS NELSON SOFTWARE</copyright>

  <language>en_US</language>
  <keyword>qml_evaluatefile</keyword>
  <short_description>Evaluates a js file.</short_description>

  <syntax>
    <syntax_item>r = qml_evaluatefile(filename)</syntax_item>
  </syntax>

  
  <param_input>
    <param_input_item>
      <param_name>filename</param_name>
      <param_description>a string: a js filename.</param_description>
    </param_input_item>
 
  </param_input>

  <param_output>

    <param_output_item>
      <param_name>r</param_name>
      <param_description>a double, logical, int or string.</param_description>
    </param_output_item>
  </param_output>

  <description>
    <p>Evaluates a js file.</p>
    <p
    >If returned value cannot be converted to a basic type, it will converted to string.</p>

</description>

  <used_function />
  <bibliography />

  <see_also>
    <see_also_item>
      <link linkend="${qml_engine}qml_evaluatestring">qml_evaluatestring</link>
    </see_also_item>
  </see_also>


<examples>

  <example_item>
    <example_item_type>nelson</example_item_type>
    <example_item_description />
    <example_item_data
      ><![CDATA[test_file = [tempdir() , '/example_qml_evaluatefile.js'];
f = fopen(test_file, 'wt');
fwrite(f, 'a = 2 + 4');
fclose(f);
qml_evaluatefile(test_file)]]>
    </example_item_data>
  </example_item>

</examples>


  <history>
    <history_item>
      <history_version>1.0.0</history_version>
      <history_description>initial version</history_description>
    </history_item>
  </history>

  <authors>
    <author_item>Allan CORNET</author_item>
  </authors>
</xmldoc>
