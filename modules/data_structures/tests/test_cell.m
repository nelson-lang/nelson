%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
A = [1,2;3,4];
R = {A, 5};
R{1, 2} = [];
REF = {A , []};
assert_isequal(R, REF);
%=============================================================================
C = {A};
C1 = C(1, 1);
C2 = C{1, 1};
T1 = class(C1);
T2 = class(C2);
assert_checkerror('C2{1}', _('Attempt to apply contents-indexing to non cell-array object.'));
assert_isequal(T1, 'cell');
assert_isequal(T2, 'double');
%=============================================================================
R = {cos(33), [1:3;3:5;5:7] {[1:10], 3; 'str', cos(33)}; [1i 3], 'abc', [1:10]};
R1 = R(:);
REF = {cos(33); [1i 3]; [1:3;3:5;5:7]; 'abc'; {[1:10], 3; 'str', cos(33)}; [1:10]};
assert_isequal(R1, REF);
%=============================================================================
R2 = R(:, :);
assert_isequal(R2, R);
%=============================================================================
R3 = R(1, :);
REF = {cos(33), [1:3;3:5;5:7], {[1:10], 3; 'str', cos(33)}};
assert_isequal(R3, REF);
%=============================================================================
R4 = R{2, :};
REF = [1i 3];
assert_isequal(R4, REF);
%=============================================================================
R5 = R(:, 3);
REF = {{[1:10], 3; 'str', cos(33)}; [1:10]};
assert_isequal(R5, REF);
%=============================================================================
assert_checkerror('R{:, 4}', _('Index exceeds dimensions.'));
%=============================================================================
R6 = R(1, 1);
REF = {cos(33)};
assert_isequal(R6, REF);
%=============================================================================
R7 = R(1,3);
REF = {{[1:10], 3; 'str', cos(33)}};
assert_isequal(R7, REF);
%=============================================================================
R8 = R{1,3};
REF = {[1:10], 3; 'str', cos(33)};
assert_isequal(R8, REF);
%=============================================================================
R9 = R{1, 3}{1, 1};
REF = [1:10];
assert_isequal(R9, REF);
%=============================================================================
R10 = R{1, 3}(1, 1);
REF = {[1:10]};
assert_isequal(R10, REF);
%=============================================================================
R11 = R{1, 3}{1, 1}(2);
REF = 2;
assert_isequal(R11, REF);
%=============================================================================
R12 = R(2, 3);
REF = {[1:10]};
assert_isequal(R12, REF);
%=============================================================================
assert_checkerror('R(1, 5)', _('Index exceeds dimensions.'));
assert_checkerror('R(5, 5)', _('Index exceeds dimensions.'));
%=============================================================================
R1 = {1 'abc'};
R2 = {1, 'abc'};
assert_isequal(R1, R2);
%=============================================================================
R = {1, 'abc'; [1:10], [1:2]};
assert_checkerror('R{3}(-1)', _('index must either be real positive integers or logicals.'));
%=============================================================================
R ={ [1, 2; 3, 4], 'hello'; 5, [1, 2, 3]};
assert_isequal(R{2, 2}, [1:3]);
assert_isequal(R(2, 2), {[1:3]});
%=============================================================================
R = { [1, 2; 3, 4], 5};
R(1, 1) = [];
assert_isequal(R, {5});
%=============================================================================
A = ["Nel", "son"; "open", "source"];
R = cell(A);
REF = {'Nel', 'son'; 'open', 'source'};
assert_isequal(R, REF);
%=============================================================================
A = ["Nel", "son"; NaN, "source"];
R = cell(A);
REF = {'Nel', 'son'; [], 'source'};
assert_isequal(R, REF);
%=============================================================================
