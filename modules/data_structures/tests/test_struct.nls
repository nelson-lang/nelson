//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('struct'), 1);
assert_isequal(nargout('struct'), 1);
//=============================================================================
A = struct();
assert_isequal(class(A), 'struct');
assert_isequal(size(A), [1 1]);
c = struct2cell(A);
assert_isequal(class(c), 'cell');
assert_isequal(size(c), [0 1]);
f = fieldnames(A);
assert_isequal(class(f), 'cell');
assert_isequal(size(f), [0 1]);
R = cell2struct(c, f);
assert_isequal(class(R), 'struct');
assert_isequal(size(R), [1 1]);
//=============================================================================
A = struct([]);
assert_isequal(class(A), 'struct');
assert_isequal(size(A), [0 0]);
c = struct2cell(A);
assert_isequal(size(c), [0 0 0]);
f = fieldnames(A);
assert_isequal(size(f), [0 1]);
R = cell2struct(c, f);
assert_isequal(class(R), 'struct');
assert_isequal(size(R), [0 0]);
//=============================================================================
A = struct(ones(1, 0));
assert_isequal(class(A), 'struct');
assert_isequal(size(A), [1 0]);
c = struct2cell(A);
assert_isequal(class(c), 'cell');
assert_isequal(size(c), [0 1 0]);
f = fieldnames(A);
assert_isequal(size(f), [0 1]);
R = cell2struct(c, f);
assert_isequal(class(R), 'struct');
assert_isequal(size(R), [1 0]);
//=============================================================================
A = struct(ones(0, 1));
assert_isequal(class(A), 'struct');
assert_isequal(size(A), [0 1 ]);
c = struct2cell(A);
assert_isequal(class(c), 'cell');
assert_isequal(size(c), [0 0]);
f = fieldnames(A);
assert_isequal(size(f), [0 1]);
R = cell2struct(c, f);
assert_isequal(class(R), 'struct');
assert_isequal(size(R), [1 1]);
//=============================================================================
