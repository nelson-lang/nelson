%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
fun = @(a, b) [a, b];
assert_checkerror('R = arrayfun(fun, ''abc'', ''def'')', _('Non-scalar in Uniform output.'));
%=============================================================================
fun = @(a, b) [a, b];
R = arrayfun(fun, 'abc', 'def', 'UniformOutput', false);
%=============================================================================
R = arrayfun(@(a, b) [a, b], '1234', 'abcd', 'uniformoutput', 0);
REF = {'1a', '2b', '3c', '4d'};
assert_isequal(R, REF);
%=============================================================================
R = arrayfun(@(a, b) [a, b], '1234', 'abcd', 'uniformoutput', false);
REF = {'1a', '2b', '3c', '4d'};
assert_isequal(R, REF);
%=============================================================================
fun = @(in1, in2) [in1+in2, in1-in2, max(in1, in2)];
C = [1 2 3; 4 5 6];
C(:,:,2) = [7 8 9; 10 11 12];
D = [1 2+2i 3; 4+1 5 6];
D(:,:,2) = [1+1i 2 3; 4+1 5 6];
C_flat = C(:);
D_flat = D(:);
R = arrayfun(fun, C_flat, D_flat, 'UniformOutput', false);
REF = {[2, 0, 1]; [9, -1, 5];                                         
    [4.0000+2.0000i, 0.0000-2.0000i, 2.0000+2.0000i]; [10, 0, 5];                                          
    [6, 0, 3]; [12, 0, 6];                                          
    [8.0000+1.0000i, 6.0000-1.0000i, 7.0000+0.0000i]; [15, 5, 10];                                         
    [10, 6, 8]; [16, 6, 11];                                         
    [12, 6, 9]; [18, 6, 12] };
assert_isequal(R, REF)	
%=============================================================================
fun = @(in1, in2) in1+in2;
C = [1 2 3; 4 5 6];
C(:,:,2) = [7 8 9; 10 11 12];
D = [1 2+2i 3; 4+1 5 6];
D(:,:,2) = [1+i 2 3; 4+1 5 6];
R = arrayfun(fun, C, D, 'uniformoutput', 0);
REF_1 = {[2], [4.0000 + 2.0000i], [ 6];
        [9], [              10], [12]};
REF_2 = {[8.0000 + 1.0000i], [10], [12];
         [              15], [16], [18]};
assert_isequal(R(:,:,1), REF_1);
assert_isequal(R(:,:,2), REF_2);
%=============================================================================
fun = @(in1, in2)  in1+in2;
R = arrayfun(fun, [1:3;5:7], [2:4;8:10], 'uniformoutput', 0);
REF =  {[3], [5], [7]; 
        [13], [15], [17]};
assert_isequal(R, REF);
%=============================================================================
A = zeros(2,1);
A(1) = 1; 
A(2) = 0 + 1i;
R = arrayfun(@(x) x, A, 'UniformOutput', false);
REF = {[1]; [0.0000 + 1.0000i]};
assert_isequal(R, REF);
%=============================================================================
A = zeros(2,1);
C1 = cell(2,1);
C1{1} = A(1);
C1{2} = A(2);
[A, B, C] = arrayfun (@find, [10; 0], "UniformOutput", false);
REF_A = {[       1]; []};
REF_B = {[       1]; []};
REF_C = {[      10]; []};
assert_isequal(A, REF_A);
assert_isequal(B, REF_B);
assert_isequal(C, REF_C);
%=============================================================================
