//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
rng('default');
r = rng();
assert_isequal(class(r), 'struct');
assert_isequal(fieldnames(r), {'Type'; 'Seed'; 'State'});
assert_isequal(size(r), [1 1]);
assert_isequal(r.Type, 'twister');
assert_isequal(r.Seed, uint32(0));
assert_isequal(size(r.State), [624, 1]);
assert_isequal(class(r.State), 'uint32');
//=============================================================================
res = rand(3, 3);
ref = [0.5488     0.5449     0.4376;
0.7152     0.4237     0.8918;
0.6028     0.6459     0.9637];
assert_isapprox(res, ref, 1e-4);
//=============================================================================
res = rand(3, 3);
ref = [0.3834     0.5680     0.0871;
0.7917     0.9256     0.0202;
0.5289     0.0710     0.8326];
assert_isapprox(res, ref, 1e-4);
//=============================================================================
res = rand(3, 3);
ref = [0.7782     0.7992     0.1183;
0.8700     0.4615     0.6399;
0.9786     0.7805     0.1434]; 
assert_isapprox(res, ref, 1e-4);
//=============================================================================
r = rng();
//=============================================================================
R1 = rand(3, 3);
ref = [0.9447     0.2646     0.5684;
0.5218     0.7742     0.0188;
0.4147     0.4562     0.6176 ];
assert_isapprox(R1, ref, 1e-4);
//=============================================================================
rng('default');
rng(r);
//=============================================================================
R2 = rand(3, 3);
ref = [0.9447     0.2646     0.5684;
0.5218     0.7742     0.0188;
0.4147     0.4562     0.6176 ];
assert_isapprox(R2, ref, 1e-4);
assert_isequal(R1, R2);
//=============================================================================
rng('default')
rng(5489)
R2 = rand(3, 3);
ref = [0.8147     0.9134     0.2785;
0.9058     0.6324     0.5469;
0.1270     0.0975     0.9575 ];
assert_isapprox(R2, ref, 1e-4);
//=============================================================================
R = rand([0 0]);
REF = [];
assert_isequal(R, REF);
//=============================================================================
R = rand([0 3]);
REF = zeros(0, 3);
assert_isequal(R, REF);
//=============================================================================
