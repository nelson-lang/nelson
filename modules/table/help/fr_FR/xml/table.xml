<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
    <copyright>SAME AS NELSON SOFTWARE</copyright>
    <language>fr_FR</language>
    <keyword>table</keyword>
    <short_description
  >Un tableau de type table avec variables nommées, capable de contenir
        différents types de données</short_description>
    <syntax>
        <syntax_item>T = table()</syntax_item>
        <syntax_item>T = table(var1, ... , varN)</syntax_item>
        <syntax_item>T = table(... , Name, Value)</syntax_item>
    </syntax>
    <param_input>
        <param_input_item>
            <param_name>var1, ... , varN</param_name>
            <param_description
      >Variables d'entrée : les variables sont spécifiées comme des tableaux
                ayant tous le même nombre de lignes. Ces variables peuvent différer en taille et en
                type de données.</param_description>
        </param_input_item>
        <param_input_item>
            <param_name>Name, Value</param_name>
            <param_description
      >Les arguments optionnels sont spécifiés sous forme de paires Name1,
                Value1, ... , NameN, ValueN, où Name est le nom de l'argument et Value sa valeur
                correspondante. Ces paires nom-valeur doivent être placées après les autres
                arguments, mais l'ordre des paires entre elles est flexible.</param_description>
        </param_input_item>
    </param_input>
    <param_output>
        <param_output_item>
            <param_name>T</param_name>
            <param_description>Un objet table.</param_description>
        </param_output_item>
    </param_output>
    <description>
        <p
    >Les tableaux de type table sont conçus pour stocker des données orientées colonne, comme
            des colonnes provenant de fichiers texte ou de feuilles de calcul.</p>
        <p
    >Chaque colonne de données est stockée dans une variable au sein de la table, et ces
            variables peuvent avoir des types et tailles différents, à condition qu'elles partagent
            toutes le même nombre de lignes.</p>
        <p
    >Les variables de table ont des noms, similaires aux champs d'une structure.</p>
        <p />
        <p
    >Pour accéder aux données d'une table, utilisez les méthodes suivantes :</p>
        <p />
        <p
    >- Notation par point (T.varname) pour extraire une seule variable.</p>
        <p
    >- Accolades (T{rows, vars}) pour extraire un tableau à partir de lignes et de variables
            spécifiques.</p>
        <p
    >- Parenthèses (T(rows, vars)) pour retourner un sous-ensemble de la table.</p>
        <p />
        <p><b
      >T = table(var1, ..., varN)</b> crée une table à partir des variables d'entrée
            spécifiées <b>var1,...,varN</b>.</p>
        <p
    >Les variables peuvent varier en taille et en type de données, mais elles doivent toutes
            avoir le même nombre de lignes.</p>
        <p
    >Si les entrées sont des variables d'espace de travail, leurs noms sont utilisés comme
            noms de variables dans la table résultante.</p>
        <p
    >Sinon, la table assigne des noms par défaut au format 'Var1', 'Var2', etc., où N est le
            nombre total de variables.</p>
        <p />
        <p>
            <b
      >T = table(..., Name, Value)</b> permet de spécifier des options supplémentaires en
            utilisant une ou plusieurs paires nom-valeur.</p>
        <p
    >Par exemple, vous pouvez définir des noms de variables personnalisés en utilisant la
            paire nom-valeur 'VariableNames'.</p>
        <p
    >Cette syntaxe peut être utilisée en combinaison avec n'importe lequel des arguments
            d'entrée précédents.</p>
        <p />
        <p>
            <b
      >T = table()</b> crée une table vide avec 0 lignes et 0 colonnes.</p>
    </description>
    <used_function />
    <bibliography />
    <examples>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description />
            <example_item_data
        runnable="cli"
      ><![CDATA[Names = {'John'; 'Alice'; 'Bob'; 'Diana'};
Age = [28; 34; 22; 30];
Height = [175; 160; 180; 165];
Weight = [70; 55; 80; 60];
T = table(Names, Age, Height, Weight)
T.Names
T{2, 2}
T{'Alice', 'Age'}
T{2, 'Age'}
T(:, 'Age')
T(2:3,1:3)
]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description />
            <example_item_data
        runnable="cli"
      ><![CDATA[N = {'John'; 'Alice'; 'Bob'; 'Diana'};
A = [28; 34; 22; 30];
H = [175; 160; 180; 165];
W = [70; 55; 80; 60];
T = table(N, A, H, W, 'VariableNames', {'Name', 'Age', 'Height', 'Weight'})]]></example_item_data>
        </example_item>
        <example_item>
            <example_item_type>nelson</example_item_type>
            <example_item_description />
            <example_item_data
        runnable="cli"
      ><![CDATA[N = {'John'; 'Alice'; 'Bob'; 'Diana'};
A = [28; 34; 22; 30];
H = [175; 160; 180; 165];
W = [70; 55; 80; 60];

% Define the row names
RowNames = {'Person1', 'Person2', 'Person3', 'Person4'};

% Create the table with row names
T = table(A, H, W, 'RowNames', RowNames, 'VariableNames', {'Age', 'Height_cm', 'Weight_kg'})
T('Person2', 1:2)
]]></example_item_data>
        </example_item>
    </examples>
    <see_also>
        <see_also_item>
            <link
        linkend="${table}1_accessing_manipulating_table"
      >Accessing and Manipulating Tables in
                Nelson</link>
        </see_also_item>
        <see_also_item>
            <link
        linkend="${table}2_direct_compution_with_table"
      >Direct computation with Table</link>
        </see_also_item>
        <see_also_item>
            <link linkend="${table}cell2table">cell2table</link>
        </see_also_item>
        <see_also_item>
            <link linkend="${table}array2table">array2table</link>
        </see_also_item>
        <see_also_item>
            <link linkend="${table}struct2table">struct2table</link>
        </see_also_item>
    </see_also>
    <history>
        <history_item>
            <history_version>1.8.0</history_version>
            <history_description>version initiale</history_description>
        </history_item>
    </history>
    <authors>
        <author_item>Allan CORNET</author_item>
    </authors>
</xmldoc>
