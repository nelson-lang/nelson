%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
% <--PYTHON ENVIRONMENT REQUIRED-->
%=============================================================================
A = pyrun('','A', 'A', int32(3));
B = pyrun('','B', 'B', int32(2));
%=============================================================================
assert_checkerror('A + ''ff'' ', [_('TypeError: unsupported operand type(s) for +: ''int'' and ''str'''), char(10)])
%=============================================================================
R = A + B;
assert_isequal(R.double(), 5);
%=============================================================================
R = A + 3.5;
assert_isequal(R, 6.5);
%=============================================================================
% __pos__
R = +A;
assert_isequal(R, A);
%=============================================================================
% __neg__
R = -A;
assert_isequal(R.double(), -3);
%=============================================================================
% __mul__
R = A * B;
assert_isequal(R.double(), 6);
%=============================================================================
% __truediv__
R = A / B;
assert_isequal(R, 1.5);
%=============================================================================
% __pow__
R = A ^ B;
assert_isequal(R.double(), 9);
%=============================================================================
% __gt__
R = A > B;
assert_istrue(R);
%=============================================================================
% __ge__
R = A >= B;
assert_istrue(R);
%=============================================================================
% __le__
R = A <= B;
assert_isfalse(R);
%=============================================================================
% __ne__
R = A ~= B;
assert_istrue(R);
%=============================================================================
% __lt__
R = A < B;
assert_isfalse(R);
%=============================================================================
% __add__
R = A + B;
assert_isequal(R.double(), 5);
%=============================================================================
% __sub__
R = A - B;
assert_isequal(R.double(), 1);
%=============================================================================
% __eq__
R = (A == B);
assert_isfalse(R);
%=============================================================================
% __mod__
R = mod(A, B);
assert_isequal(R.double(), 1);
%=============================================================================
