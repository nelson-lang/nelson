<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
  <copyright>SAME AS NELSON SOFTWARE</copyright>

  <language>en_US</language>
  <keyword>pyrunfile</keyword>
  <short_description>Run Python file from Nelson.</short_description>

  <syntax>
    <syntax_item>pyrunfile(filename)</syntax_item>
    <syntax_item>pyrunfile(filename input)</syntax_item>
    <syntax_item>outvars = pyrunfile(filename, outputs)</syntax_item>
    <syntax_item
    >outvars = pyrunfile(filename, outputs, pyName, pyValue, ...)</syntax_item>
  </syntax>
  
  <param_input>
    <param_input_item>
      <param_name>filename</param_name>
      <param_description
      >a string scalar, character vector: filename .py to run.</param_description>
    </param_input_item>
    <param_input_item>
      <param_name>"filename 'input'"</param_name>
      <param_description
      >a string scalar, character vector: filename .py to run with input arguments.</param_description>
    </param_input_item>

    <param_input_item>
      <param_name>pyName, pyValue</param_name>
      <param_description>Input arguments name and value</param_description>
    </param_input_item>

    <param_input_item>
      <param_name>outputs</param_name>
      <param_description
      >string array: Python variable names.</param_description>
    </param_input_item>

  </param_input>

  <param_output>
    <param_output_item>
      <param_name>outvars</param_name>
      <param_description
      >One or more Nelson workspace variable names returned as valid Python types.</param_description>
    </param_output_item>
  </param_output>

  <description>
    <p><b>pyrunfile(filenam)</b> function executes Python file.</p>
    <p>In contrast to the <b
      >pyrun</b> function, variables generated in the Python workspace through the <b
      >pyrunfile</b> function do not persist. This means that subsequent calls to <b
      >pyrunfile</b> won't be able to access these variables.</p> 
    <p>The code <b
      >outvars = pyrunfile(file, outputs, pyName1, pyValue2, ..., pyNameN, pyValueN)</b> executes the code with one or more name-value pair arguments.</p>
    <p>Known limitation:</p>
    <p>The <b>pyrun</b> and <b
      >pyrunfile</b> functions lack support for classes containing local variables initialized by other local variables via methods. In such cases, it's advisable to create a module and access it instead.</p>

  </description>
  <used_function />
  <bibliography />

<examples>

  <example_item>
    <example_item_type>Python</example_item_type>
    <example_item_description>pyrunfile_example_1.py</example_item_description>
    <example_item_data><![CDATA[content = "hello Nelson"
print(content)]]>
    </example_item_data>
  </example_item>

  <example_item>
    <example_item_type>nelson</example_item_type>
    <example_item_description>pyrunfile from Nelson</example_item_description>
    <example_item_data><![CDATA[pyrunfile('pyrunfile_example_1.py')]]>
    </example_item_data>
  </example_item>

  <example_item>
    <example_item_type>Python</example_item_type>
    <example_item_description>pyrunfile_example_2.py</example_item_description>
    <example_item_data
      ><![CDATA[import sys
print('greetings from:')
for arg in sys.argv[0:]:
    print(arg)
]]>
    </example_item_data>
  </example_item>

  <example_item>
    <example_item_type>nelson</example_item_type>
    <example_item_description
      >pyrunfile from Nelson with arguments</example_item_description>
    <example_item_data
      ><![CDATA[pyrunfile('pyrunfile_example_2.py "Hello" "world"')]]>
    </example_item_data>
  </example_item>


  <example_item>
    <example_item_type>Python</example_item_type>
    <example_item_description>pyrunfile_example_3.py</example_item_description>
    <example_item_data
      ><![CDATA[def minus(a,c):
    b = a-c
    return b

z = minus(x, y)
]]>
    </example_item_data>
  </example_item>

  <example_item>
    <example_item_type>nelson</example_item_type>
    <example_item_description
      >pyrunfile from Nelson with values from Nelson</example_item_description>
    <example_item_data
      ><![CDATA[pyrunfile('pyrunfile_example_3.py', 'x', 5, 'y', 3)]]>
    </example_item_data>
  </example_item>

</examples>

  <see_also>
    <see_also_item>
      <link linkend="${python_engine}pyrun">pyrun</link>
    </see_also_item>
    <see_also_item>
      <link linkend="${python_engine}pyenv">pyenv</link>
    </see_also_item>
    <see_also_item>
      <link linkend="${python_engine}python_types">Python types supported</link>
    </see_also_item>
  </see_also>

  <history>
    <history_item>
      <history_version>1.4.0</history_version>
      <history_description>initial version</history_description>
    </history_item>
  </history>

  <authors>
    <author_item>Allan CORNET</author_item>
  </authors>
</xmldoc>
