//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
test_h5save_file = [tempdir(), '/test_h5save.nh5'];
if isfile(test_h5save_file)
  rmfile(test_h5save_file);
end
//=============================================================================
// logical
//=============================================================================
A = logical(eye(3, 4));
savenh5(test_h5save_file, 'A');
schema_version = h5readatt(test_h5save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(A));
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = logical(1);
savenh5(test_h5save_file, 'A');
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(A));
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = logical(ones(3, 0));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(0, 4));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(3, 0, 2, 4));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(3, 0, 0, 0));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(reshape(1:18,3,2,3));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5save_file, '/A');
assert_isequal(R, uint8(A));
//=============================================================================
A = sparse(4, 5, true, 6, 7, 19);
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(20));
R = h5read(test_h5save_file, '/A/data');
assert_isequal(R, uint8(1));
R = h5read(test_h5save_file, '/A/ir');
assert_isequal(R, uint64(4));
R = h5read(test_h5save_file, '/A/jc');
assert_isequal(R, uint64(5));
//=============================================================================
A = logical(sparse(eye(0, 4)));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
//=============================================================================
A = logical(sparse(eye(5, 0)));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
//=============================================================================
A = logical(sparse(eye(5, 4)));
savenh5(test_h5save_file, 'A');
R = h5readatt(test_h5save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(4));
R = h5readatt(test_h5save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5read(test_h5save_file, '/A/data');
assert_isequal(R, uint8([1 1 1 1]));
R = h5read(test_h5save_file, '/A/ir');
assert_isequal(R, uint64([1 2 3 4]));
R = h5read(test_h5save_file, '/A/jc');
assert_isequal(R, uint64([1 2 3 4]));
//=============================================================================
