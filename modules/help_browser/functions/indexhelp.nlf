//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function r = indexhelp(varargin)
// private function used to index help files
// indexhelp(true) forces indexing
  force = false;
  if nargin > 1
    error(_('Wrong number of input arguments.'));
  end
  if nargin == 1
    force = varargin{1};
    if ~islogical(force)
      error(_('Wrong type for argument #1: logical expected.'));
    end
    if ~isscalar(force)
      error(_('Wrong size for argument #1: scalar expected.'));
    end
  end
  pref_help = [prefdir(), '/help_index.nh5'];
  attributes = helpbrowser('-attributes');
  needToIndex = false;
  if ~isfile(pref_help) || force || isempty(attributes)
    needToIndex = true;
  else
    load(pref_help);
    if ~isvar('modules_help_available') || ~isvar('version_help')
      needToIndex = true;
    else
      current_version = version('-number');
      if (compareVersion(version_help, current_version) ~= 0)
        needToIndex = true;
      else
        modules_help_list = getModulesHelpList();
        needToIndex = ~isequal(modules_help_available, ['Nelson'; modules_help_list]);
      end
    end
  end

  if needToIndex
    r = reindexhelp(pref_help);
  else
    r = false;    
  end
endfunction
//=============================================================================
function modules_help_list = getModulesHelpList()
    run([nelsonroot() '/modules/' 'modules.nls']);
    modules_help_list = [convertStringsToChars(modules_help_list); getExternalModules()];
endfunction
//=============================================================================
function external_modules = getExternalModules()
  [m, p, v, pm] = getmodules();
  external_modules = m(pm == false);
endfunction
//=============================================================================
function r = compareVersion(previous, current)
  if (previous(1) == current(1))
    if (previous(2) == current(2))
      if (previous(3) == current(3))
        r = 0;
      else
        if (previous(3) > current(3))
          r = -1;
        else
          r = 1;
        end
      end
    else
      if (previous(2) > current(2))
        r = -1;
      else
        r = 1;
      end
    end
  else
    if (previous(1) > current(1))
      r = -1;
    else
      r = 1;
    end
  end
endfunction
//=============================================================================
function r = reindexhelp(pref_help)
    helpbrowser('-clearcache');
    helpbrowser();
    helpbrowser('-hide', 'bookmarks');
    homepage = [nelsonroot(), '/modules/main/help/', getlanguage(), '/', 'org.nelson.help.qch'];
    if ~isfile(homepage) 
      homepage = [nelsonroot(), '/modules/main/help/', getdefaultlanguage(), '/', 'org.nelson.help.qch']; 
    end
    lastDisplayedPercent = dispPercentLevel(0, '');
    if isfile(homepage)
      forceaddmodule('Nelson', homepage);
    end
    helpbrowser('-identifier', 'Nelson::homepage');
    modules_help_list = getModulesHelpList();
    len = length(modules_help_list);
    modules_help_available = {'Nelson'};
    for idx = [1:len]
      module_name = modules_help_list{idx};
      help_file = getHelpFile(module_name);
      modules_help_available{end+1, 1} = module_name;
      if isfile(help_file)
        forceaddmodule(module_name, help_file);
        percent = (idx * 100) * inv(len);
        lastDisplayedPercent = dispPercentLevel(percent, lastDisplayedPercent);
      end
    end
    dispPercentLevel(100, lastDisplayedPercent);
    fprintf(stdout, char(13));
    version_help = version('-number');
    save(pref_help, 'modules_help_available', 'version_help');
    r = true;
endfunction
//=============================================================================
function newPrevious = dispPercentLevel(percent, previous)
  if ~isempty(previous)
    backspace = repmat(sprintf('\b'), 1, length(previous));
    newPrevious = sprintf('%d %', percent);
    fprintf(stdout, '%s%s', backspace, newPrevious);
  else
    newPrevious = sprintf('%d %', percent);
    fprintf(stdout, '\n%s %s', _('Indexing help files:'), newPrevious);
  end
endfunction
//=============================================================================
function help_file = getHelpFile(module_name)
  help_file = '';
  module_path = [nelsonroot() , '/modules/', module_name];
  if ismodule(module_name)
    module_path = modulepath(module_name);
    help_file = [module_path, '/help/', getlanguage(), '/', 'org.nelson.modules.', module_name, '.help.qch'];
  end    
  if ~isfile(help_file)
    help_file = [module_path, '/help/', getdefaultlanguage(), '/', 'org.nelson.modules.', module_name, '.help.qch'];
  end
endfunction
//=============================================================================
function forceaddmodule(module_name, help_file)
  for i = 1:5
    helpbrowser();
    helpbrowser('-register', help_file);
    attributes = helpbrowser('-attributes');
    if any(strcmp(attributes, module_name))
      break;
    end
  end
endfunction
//=============================================================================
