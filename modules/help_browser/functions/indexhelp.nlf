//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function r = indexhelp(varargin)
// private function used to index help files
// indexhelp(true) forces indexing
  force = false;
  if nargin > 1
    error(_('Wrong number of input arguments.'));
  end
  if nargin == 1
    force = varargin{1};
    if ~islogical(force)
      error(_('Wrong type for argument #1: logical expected.'));
    end
    if ~isscalar(force)
      error(_('Wrong size for argument #1: scalar expected.'));
    end
  end
  pref_help = [prefdir(), '/help_index.nh5'];
  attributes = helpbrowser('-attributes');
  if ~isfile(pref_help) || force || isempty(attributes)
    r = reindexhelp(pref_help);
  else
    load(pref_help);
    if ~isvar('modules_help_available')
      modules_help_available = {};
    end
    if ~isvar('version_help')
      version_help = [0, 0, 0];
    end
    current_version = version('-number');
    if (compareVersion(version_help, current_version) ~= 0) || ~isequal(attributes, modules_help_available) || isempty(modules_help_available)
      r = reindexhelp(pref_help);
    else
      r = false;
    end
  end
endfunction
//=============================================================================
function r = compareVersion(previous, current)
  if (previous(1) == current(1))
    if (previous(2) == current(2))
      if (previous(3) == current(3))
        r = 0;
      else
        if (previous(3) > current(3))
          r = -1;
        else
          r = 1;
        end
      end
    else
      if (previous(2) > current(2))
        r = -1;
      else
        r = 1;
      end
    end
  else
    if (previous(1) > current(1))
      r = -1;
    else
      r = 1;
    end
  end
endfunction
//=============================================================================
function r = reindexhelp(pref_help)
    helpbrowser('-clearcache');
    helpbrowser();
    helpbrowser('-hide', 'bookmarks');
    homepage = [nelsonroot(), '/modules/main/help/', getlanguage(), '/', 'org.nelson.help.qch'];
    if ~isfile(homepage) 
      homepage = [nelsonroot(), '/modules/main/help/', getdefaultlanguage(), '/', 'org.nelson.help.qch']; 
    end
    fprintf(stdout, [char(10), _('Indexing help files'), ' ']);
    fprintf(stdout, '.');
    if isfile(homepage)
      forceaddmodule('Nelson', homepage);
    end
    helpbrowser('-identifier', 'Nelson::homepage');
    run([nelsonroot() '/modules/' 'modules.nls']);
    len = length(modules_help_list);
    modules_help_available = {'Nelson'};
    for idx = [1:len]
      module_name = modules_help_list{idx};
      module_path = [nelsonroot() , '/modules/', module_name];
      if isdir(module_path)
        help_file = [module_path, '/help/', getlanguage(), '/', 'org.nelson.modules.', module_name, '.help.qch'];
        if ~isfile(help_file)
          help_file = [module_path, '/help/', getdefaultlanguage(), '/', 'org.nelson.modules.', module_name, '.help.qch'];
        end
        if isfile(help_file)
          modules_help_available{end+1, 1} = module_name;
          forceaddmodule(module_name, help_file);
        end
        fprintf(stdout,'.');
      end
    end
    fprintf(stdout, char(13))
    version_help = version('-number');
    save(pref_help, 'modules_help_available', 'version_help');
    r = true;
endfunction
//=============================================================================
function forceaddmodule(module_name, help_file)
  for i = 1:5
    attributes = helpbrowser('-attributes');
    if any(strcmp(attributes, module_name))
      break;
    end
    helpbrowser();
    helpbrowser('-register', help_file);
    sleep(0.5)
  end
endfunction