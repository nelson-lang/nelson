%=============================================================================
% Copyright (c) 2016-present Allan CORNET (Nelson)
%=============================================================================
% This file is part of the Nelson.
%=============================================================================
% LICENCE_BLOCK_BEGIN
% SPDX-License-Identifier: LGPL-3.0-or-later
% LICENCE_BLOCK_END
%=============================================================================
R = 0i;
assert_istrue(isreal(R));
%=============================================================================
R = 0*i;
assert_istrue(isreal(R));
%=============================================================================
R = i*0;
assert_istrue(isreal(R));
%=============================================================================
R = 0.*i;
assert_istrue(isreal(R));
%=============================================================================
R = i.*0;
assert_istrue(isreal(R));
%=============================================================================
R = i .* 0;
assert_istrue(isreal(R));
%=============================================================================
R = 0 .* i;
assert_istrue(isreal(R));
%=============================================================================
R = [0*i 1];
assert_istrue(isreal(R));
%=============================================================================
R = [0i 1];
assert_istrue(isreal(R));
%=============================================================================
R = complex([0*i]);
assert_isfalse(isreal(R));
%=============================================================================
R = [eps*i 1];
assert_isfalse(isreal(R));
%=============================================================================
R = 0 * [i i];
assert_istrue(isreal(R));
%=============================================================================
R = 0 * [i  0i];
assert_istrue(isreal(R));
%=============================================================================
R = [0 0] * [2;3];
assert_istrue(isreal(R));
%=============================================================================
R = [0i 0] * [2;3];
assert_istrue(isreal(R));
%=============================================================================
R = [complex(0,0) 0] * [2;3];
assert_istrue(isreal(R));
%=============================================================================
R = [1 2 3 4] .* 2i;
assert_isfalse(isreal(R));
%=============================================================================
R = 2i .* [1 2 3 4];
assert_isfalse(isreal(R));
%=============================================================================
