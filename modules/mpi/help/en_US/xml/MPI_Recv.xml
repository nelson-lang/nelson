<?xml version="1.0" encoding="UTF-8" ?>
<xmldoc>
  <copyright>SAME AS NELSON SOFTWARE</copyright>

  <language>en_US</language>
  <keyword>MPI_Recv</keyword>
  <short_description>Blocking receive for a message.</short_description>

  <syntax>
    <syntax_item>r = MPI_Recv(Source, Tag)</syntax_item>
    <syntax_item
    >[r, mpi_source, mpi_tag] = MPI_Reduce(Source, Tag, Comm)</syntax_item>
  </syntax>

  <param_input>
    <param_input_item>
      <param_name>Source</param_name>
      <param_description>an integer value: rank of source.</param_description>
    </param_input_item>

    <param_input_item>
      <param_name>Tag</param_name>
      <param_description>an integer value: message tag.</param_description>
    </param_input_item>

    <param_input_item>
      <param_name>Comm</param_name>
      <param_description>a MPI_Comm object.</param_description>
    </param_input_item>
    
  </param_input>


  <param_output>
    <param_output_item>
      <param_name>r</param_name>
      <param_description>received value</param_description>
    </param_output_item>
  </param_output>

  <description>
  <p
    >This function receives an array from a source node on a given communicator with the specified tag.</p>
  <p>Throws an exception if there is an error.</p>
  <p
    >Receive arrays of arbitrary complexity, including cell arrays, structures, strings, sparse, etc ...</p>
</description>

  <used_function />
  <bibliography />

  <see_also>
    <see_also_item>
      <link linkend="${mpi}MPI_Send">MPI_Send</link>
    </see_also_item>
  </see_also>


<examples>

  <example_item>
    <example_item_type>nelson</example_item_type>
    <example_item_description
      >mpiexec([modulepath('mpi'), '/examples/MPI_helloworld.m'], 4)</example_item_description>
    <example_item_data
      ><![CDATA[if ~MPI_Initialized()
  MPI_Init();
end
comm = MPI_Comm_object()
my_rank = MPI_Comm_rank (comm)
num_ranks = MPI_Comm_size(comm)

TAG= 1;
if (my_rank != 0)
  rankvect = 0;
  MPI_Send(rand(3,3) + my_rank, rankvect, TAG, comm);
else
  disp('MPI master receive:')
  for source = 1:num_ranks - 1
    disp(['From slave ', int2str(source)])
    message = MPI_Recv (source, TAG, comm);
    disp(message)
  end
end

if MPI_Initialized()
  MPI_Finalize();
end]]>
    </example_item_data>
  </example_item>

</examples>


  <history>
    <history_item>
      <history_version>1.0.0</history_version>
      <history_description>initial version</history_description>
    </history_item>
  </history>

  <authors>
    <author_item>Allan CORNET</author_item>
  </authors>
</xmldoc>
