#==============================================================================
# Copyright (c) 2016-2018 Allan CORNET (Nelson)
#==============================================================================
# LICENCE_BLOCK_BEGIN
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# LICENCE_BLOCK_END
#==============================================================================
# Travis: Linux Ubuntu trusty & Macos X

sudo: required
language: cpp
python:
 - "3.5"

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps
    
branches:
  only:
    - master

matrix:
  include:
    - os: linux
      group: travis_latest
      env: ARCH="x86_64"
      global:
      # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
      # via the "travis encrypt" command using the project repo's public key
      - secure: "mRbW2T2NTBxmXFwsRj/InsPYpMCD8XKkSnBIOkPgxQrJ/kiUfUu0fPvPaMbbkW8a0ZE0Dto2xcvgGb7PDP7Z0GyYovm6upzB9IQtQnt1LN0Il36CeHEMj5uyPkpHxsimKCMZrKXpnuUzHQJuL8FZRNenrV46WY1k1SRViHvj9UcWwkP4+JruCFVdsNIUqqNp5NelrDEZi3nZJjTir2eAe2GbI4eRo5kE0qMXI1xVcdRrMbcPtiuYalgc3Jdj3wfbss9tU4kzlz1G+gFrUIABobKoQ8PpU7VE129PcraQ3GHRdNT+zQm7iHOn1YDuGAVQ4znsZ7YkEzRyFhsGvu3m9V1jWagDc+xo9ABHerMHf4z8IM3kqvzycVwTToUzsJvI2bAlX4Zmrh86sTfa+B+d+dgznM10CyTEjoeZP/BeEeN3s+ZhEKbZS2KumVfHe1N7qOlwGDZV8l7GzwuxEZfT1tuMpjqHeJQ2cfdUhNloxKJTH8JNscpgRtsjXQ9LZf0r0N7GSjck3jESdK6NfmDsYt5upPA4r5eIrSrq/KywqXSCq9Azgi4/q+bY2Ulry4onHAUmOLGpysPzXdzT1R9pjKBD55rSgkHCl+bjFS0BITo0BeyOO20yt+k9AGBibrJye3o9U/SkxZyU6saoDfIa9PB/xLo4ww/d1Su/ndd3dLI="

      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=g++-6 TEST_CXX14=true BOOST_VERSION=1.61.0

    - os: osx
      env: ARCH="x86_64"
      compiler: clang
      osx_image: xcode8.3

  allow_failures:
    - os: osx

before_install:
    - if [ `uname` = "Linux" ];
      then echo -n | openssl s_client -connect https://scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      fi

    - if [ `uname` = "Linux" ];
      then sudo apt-get install libopenmpi-dev;
      sudo apt-get install openmpi-bin;
      sudo apt-get install gettext;
      sudo apt-get install pkg-config;
      sudo apt-get install cmake;
      sudo apt-get install libffi-dev;
      sudo apt-get install libicu-dev;
      sudo apt-get install libxml2-dev;
      sudo apt-get install liblapack-dev;
      sudo apt-get install liblapacke-dev;
      sudo apt-get install fftw3;
      sudo apt-get install fftw3-dev;
      sudo apt-get install libasound-dev;
      sudo apt-get install portaudio19-dev;
      sudo apt-get install libsndfile1-dev;
      sudo apt-get install libtag1-dev;
      fi
    - if [ `uname` = "Linux" ];
      then sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa;
      sudo apt-get update;
      sudo apt-get install qtbase5-dev qtdeclarative5-dev libqt5webkit5-dev libsqlite3-dev;
      sudo apt-get install qt5-default qttools5-dev-tools;
      sudo apt-get install libqt5qml-graphicaleffects;
      sudo apt-get install libqt5opengl5-dev;
      sudo apt-get install qtbase5-private-dev;
      sudo apt-get install qtdeclarative5-dev;
      sudo apt-get install qtdeclarative5-controls-plugin;
      sudo apt-get install qtdeclarative5-quicklayouts-plugin;
      sudo apt-get install qtdeclarative5-qtquick2-plugin;
      sudo apt-get install qtdeclarative5-dialogs-plugin;
      sudo apt-get install qtdeclarative5-window-plugin;
      fi
      
    - if [ `uname` = "Darwin" ]; 
      then brew update;
      brew info open-mpi;
      brew install openmpi;
      brew install python3;
      brew install libffi;
      brew install icu4c;
      brew link --force icu4c;
      brew install pkg-config;
      brew link --force libffi;
      brew install pkgconfig;
      brew install gettext;
      brew link --force gettext;
      brew install boost;
      brew install libxml2;
      brew install cmake;
      brew install qt5;
      brew install fftw;
      brew install portaudio;
      brew install libsndfile;
      brew install taglib;
      fi

install:
  - if [ `uname` = "Linux" ]; then git clone https://github.com/eigenteam/eigen-git-mirror /tmp/eigen && mkdir /tmp/eigen-build && cd /tmp/eigen && git checkout 3.3.4 && cd - && cd /tmp/eigen-build && cmake . /tmp/eigen && make -j4 && sudo make install && cd -; fi
  - if [ $TRAVIS_OS_NAME == osx ]; then git clone https://github.com/eigenteam/eigen-git-mirror /tmp/eigen && mkdir /tmp/eigen-build && cd /tmp/eigen && git checkout 3.3.4 && cd - && cd /tmp/eigen-build && FC="nofortran" cmake . /tmp/eigen && make -j4 && sudo make install && cd -; fi

before_script:
  - if [ `uname` = "Linux" ];
    then export DISPLAY=:99.0;
    sh -e /etc/init.d/xvfb start;
    fi
  - if [ `uname` = "Linux" ];
    then export CC=$USE_CC; export CXX=$USE_CXX;
    export BUILD_ROOT=$(pwd);
    cd $HOME;
    curl https://netcologne.dl.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.bz2 | tar xj;
    pushd "boost_1_62_0";
    export GCC=$(which $CXX);
    echo -e "using gcc \x3a \x3a $GCC ;" > user-config.jam; cat user-config.jam;
    ./bootstrap.sh --prefix=/usr/local/boost --with-libraries=thread,date_time,filesystem,system,program_options,chrono,regex,locale,iostreams;
    ./b2 -q -d0 --user-config=user-config.jam headers;
    sudo ./b2 -q -d0 --user-config=user-config.jam cxxflags="-std=c++11 -fPIC" threading=multi link=shared install;
    popd;
    fi

  - if [ $TRAVIS_OS_NAME == osx ];
    then export BUILD_ROOT=$(pwd);
    cd $HOME;
    curl -O http://coudert.name/software/gfortran-6.3-Sierra.dmg;
    sudo hdiutil attach gfortran-6.3-Sierra.dmg;
    sudo installer -package /Volumes/gfortran-6.3-Sierra/gfortran.pkg -target /;
    sudo hdiutil detach /Volumes/gfortran-6.3-Sierra;
    cd $BUILD_ROOT;
    cd ..;
    git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-macosx.git;
    fi

script:
  - echo ${COMPILER}
  - cd ${TRAVIS_BUILD_DIR} 
  - python3 ./tools/update_version/update_version.py
  - if [ $TRAVIS_OS_NAME == linux ];
    then cmake -G "Unix Makefiles" -DBOOST_ROOT=/usr/local/boost;
    fi
  - if [ $TRAVIS_OS_NAME == osx ];
    then export PATH=/usr/local/opt/qt5/bin:$PATH;
    cmake -G "Unix Makefiles";
    fi

  - make -j4
  - make buildhelp
  - make missing_help
  - make tests_minimal
  - make package
  - make tests_all


addons:
  coverity_scan:
    project:
      name: "Nelson-numerical-software/nelson"
      description: "Nelson"
    notification_email: nelson.numerical.computation@gmail.com
    build_command_prepend: "cmake -G "Unix Makefiles""
    build_command: " make -j4"
    branch_pattern: master

notifications:
  email:
    recipients:
      - nelson.numerical.computation@gmail.com
    on_success: never
    on_failure: always

  slack: nelson-software:MD73E5wbxFedQnxuaNbgbB5p
