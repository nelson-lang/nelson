#=============================================================================
# Copyright (c) 2016-2019 Allan CORNET (Nelson)
#=============================================================================
# LICENCE_BLOCK_BEGIN
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# LICENCE_BLOCK_END
#=============================================================================
jobs:
  - job: Ubuntu
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        sudo apt-get install libopenmpi-dev;
        sudo apt-get install openmpi-bin;
        sudo apt-get install openmpi-bin;
        sudo apt-get install gettext;
        sudo apt-get install pkg-config;
        sudo apt-get install cmake;
        sudo apt-get install libffi-dev;
        sudo apt-get install libicu-dev;
        sudo apt-get install libxml2-dev;
        sudo apt-get install liblapack-dev;
        sudo apt-get install liblapacke-dev;
        sudo apt-get install fftw3;
        sudo apt-get install fftw3-dev;
        sudo apt-get install libasound-dev;
        sudo apt-get install portaudio19-dev;
        sudo apt-get install libsndfile1-dev;
        sudo apt-get install libtag1-dev;
        sudo apt-get install alsa-utils;
        sudo apt-get install libhdf5-dev;
        sudo apt-get install hdf5-tools;
        sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa;
        sudo apt-get update;
        sudo apt-get install qtbase5-dev qtdeclarative5-dev libqt5webkit5-dev libsqlite3-dev;
        sudo apt-get install qt5-default qttools5-dev-tools;
        sudo apt-get install libqt5qml-graphicaleffects;
        sudo apt-get install libqt5opengl5-dev;
        sudo apt-get install qtbase5-private-dev;
        sudo apt-get install qtdeclarative5-dev;
        sudo apt-get install qtdeclarative5-controls-plugin;
        sudo apt-get install qtdeclarative5-quicklayouts-plugin;
        sudo apt-get install qtdeclarative5-qtquick2-plugin;
        sudo apt-get install qtdeclarative5-dialogs-plugin;
        sudo apt-get install qtdeclarative5-window-plugin;
        git clone https://github.com/eigenteam/eigen-git-mirror /tmp/eigen && mkdir /tmp/eigen-build && cd /tmp/eigen && git checkout 3.3.7 && cd - && cd /tmp/eigen-build && cmake . /tmp/eigen && make -j4 && sudo make install && cd -;
        export CC=$USE_CC; export CXX=$USE_CXX;
        export BUILD_ROOT=$(pwd);
        cd $HOME;
        curl https://netcologne.dl.sourceforge.net/project/boost/boost/1.62.0/boost_1_62_0.tar.bz2 | tar xj;
        pushd "boost_1_62_0";
        export GCC=$(which $CXX);
        echo -e "using gcc \x3a \x3a $GCC ;" > user-config.jam; cat user-config.jam;
        ./bootstrap.sh --prefix=/usr/local/boost --with-libraries=thread,date_time,filesystem,system,program_options,chrono,regex,locale,iostreams,random;
        ./b2 -q -d0 --user-config=user-config.jam headers;
        sudo ./b2 -q -d0 --user-config=user-config.jam cxxflags="-std=c++11 -fPIC" threading=multi link=shared install;
        popd;
      displayName: Installing dependencies
    - script: |
        Xvfb :99 -ac 2>/dev/null &
        export DISPLAY=:99
      displayName: Configure Display
    - script: |
        cmake -G "Unix Makefiles" -DBOOST_ROOT=/usr/local/boost;
      displayName: Configure CMake
    - script: |
        make -j4
      displayName: Build Nelson
    - script: |
        make buildhelp
      displayName: Build help
    - script: |
        make tests_minimal
      displayName: Executes minimal tests
    - script: |
        make package
      displayName: Package
    - script: |
        make tests_all
      displayName: Executes all tests
    - script: |
        make missing_help
      displayName: Search missing help


  - job: MacOS
    pool:
      vmImage: 'macOS-10.13'
    steps:
    - script: |
        brew update;
        brew unlink libffi;
        brew install libffi;
        brew unlink libffi;
        brew link --force libffi;
        brew uninstall icu4c;
        brew install icu4c;
        brew unlink icu4c;
        brew link icu4c --force;
        brew info open-mpi;
        brew install openmpi;
        brew install python3;
        brew upgrade python;
        brew install pkg-config;
        brew install pkgconfig;
        brew install gettext;
        brew link --force gettext;
        brew install boost;
        brew install libxml2;
        brew install cmake;
        brew install qt5;
        brew install fftw;
        brew install portaudio;
        brew install libsndfile;
        brew install taglib;
        brew install hdf5;
        git clone https://github.com/eigenteam/eigen-git-mirror /tmp/eigen && mkdir /tmp/eigen-build && cd /tmp/eigen && git checkout 3.3.7 && cd - && cd /tmp/eigen-build && FC="nofortran" cmake . /tmp/eigen && make -j4 && sudo make install && cd -;
        export BUILD_ROOT=$(pwd);
        cd $HOME;
        curl -O http://coudert.name/software/gfortran-6.3-Sierra.dmg;
        sudo hdiutil attach gfortran-6.3-Sierra.dmg;
        sudo installer -package /Volumes/gfortran-6.3-Sierra/gfortran.pkg -target /;
        sudo hdiutil detach /Volumes/gfortran-6.3-Sierra;
        cd $BUILD_ROOT;
        cd ..;
        git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-macosx.git;
      displayName: Installing dependencies
    - script: |
        export PATH=/usr/local/opt/qt5/bin:$PATH;
        cmake -G "Unix Makefiles";
      displayName: Configure CMake
    - script: |
        make -j4
      displayName: Build Nelson
#    - script: |
#        make buildhelp
#      displayName: Build help
    - script: |
        make missing_help
      displayName: Search missing help
    - script: |
        make tests_minimal
      displayName: Executes minimal tests
    - script: |
        make package
      displayName: Package
    - script: |
        make tests_all
      displayName: Executes all tests

  - job: Windows_VS2017_Win32
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - powershell: |
        Write-Host '##vso[task.setvariable variable=QTDIR;issecret=false]%AGENT_BUILDDIRECTORY%\Qt\msvc2017' 
    - script: |
        git clone https://github.com/Nelson-numerical-software/qt-5-win32.git %AGENT_BUILDDIRECTORY%\Qt
        git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-win32.git %AGENT_BUILDDIRECTORY%\nelson-thirdparty-win32
        cd %AGENT_BUILDDIRECTORY%\nelson-thirdparty-win32
        install.bat
      displayName: Installing dependencies
    - script: |
        cd %BUILD_SOURCESDIRECTORY%
        msbuild nelson.sln /p:Configuration=Release /p:Platform=win32 /target:"NelSon-gui"  /m:4 
      displayName: Build Nelson
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/win32/nelson-cli --quiet -f "%BUILD_SOURCESDIRECTORY%/tools/buildhelp/buildhelp.nls"
      displayName: Build help
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/win32/nelson-cli --quiet -f "%BUILD_SOURCESDIRECTORY%/tools/tests_minimal/runtests_minimal.nls"
      displayName: Minimal tests
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/win32/nelson-cli --quiet -e run('%BUILD_SOURCESDIRECTORY%/tools/innosetup/innosetup.nls');exit"
      displayName: Generates Main Inno setup file
    - script: |
        "C:\Program Files (x86)\Inno Setup 5\iscc.exe" "%BUILD_SOURCESDIRECTORY%/tools/innosetup/Nelson.iss"
      displayName: Build Inno setup file


  - job: Windows_VS2017_Win64
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - powershell: |
        Write-Host '##vso[task.setvariable variable=QTDIR;issecret=false]%AGENT_BUILDDIRECTORY%\Qt\msvc2017_64' 
    - script: |
        git clone https://github.com/Nelson-numerical-software/qt-5-x64.git %AGENT_BUILDDIRECTORY%\Qt
        git clone https://github.com/Nelson-numerical-software/nelson-thirdparty-x64.git %AGENT_BUILDDIRECTORY%\nelson-thirdparty-x64
        cd %AGENT_BUILDDIRECTORY%\nelson-thirdparty-x64
        install.bat
      displayName: Installing dependencies
    - script: |
        cd %BUILD_SOURCESDIRECTORY%
        msbuild nelson.sln /p:Configuration=Release /p:Platform=x64 /target:"NelSon-gui"  /m:4 
      displayName: Build Nelson
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/x64/nelson-cli --quiet -f "%BUILD_SOURCESDIRECTORY%/tools/buildhelp/buildhelp.nls"
      displayName: Build help
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/x64/nelson-cli --quiet -f "%BUILD_SOURCESDIRECTORY%/tools/tests_minimal/runtests_minimal.nls"
      displayName: Minimal tests
    - script: |
        %BUILD_SOURCESDIRECTORY%/bin/x64/nelson-cli --quiet -e run('%BUILD_SOURCESDIRECTORY%/tools/innosetup/innosetup.nls');exit"
      displayName: Generates Main Inno setup file
    - script: |
        "C:\Program Files (x86)\Inno Setup 5\iscc.exe" "%BUILD_SOURCESDIRECTORY%/tools/innosetup/Nelson.iss"
      displayName: Build Inno setup file

